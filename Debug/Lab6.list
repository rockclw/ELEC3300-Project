
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a14  08006a98  08006a98  00016a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ac  080074ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080074ac  080074ac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074ac  080074ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080074b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200001dc  08007690  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08007690  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009745  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3e  00000000  00000000  0002994a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002b588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a999  00000000  00000000  0002c858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd0d  00000000  00000000  000471f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009589e  00000000  00000000  00052efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e879c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e8  00000000  00000000  000e87ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08006a80 	.word	0x08006a80

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08006a80 	.word	0x08006a80

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	e002      	b.n	8000b70 <Delay+0x10>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f9      	bne.n	8000b6a <Delay+0xa>
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f000 f829 	bl	8000be0 <LCD_BackLed_Control>
	LCD_Rst();
 8000b8e:	f000 f80f 	bl	8000bb0 <LCD_Rst>
	LCD_REG_Config();
 8000b92:	f000 f85f 	bl	8000c54 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ba0:	22f0      	movs	r2, #240	; 0xf0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 f9e6 	bl	8000f76 <LCD_Clear>
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <LCD_Rst+0x28>)
 8000bba:	f001 faf1 	bl	80021a0 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <LCD_Rst+0x2c>)
 8000bc0:	f7ff ffce 	bl	8000b60 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <LCD_Rst+0x28>)
 8000bca:	f001 fae9 	bl	80021a0 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <LCD_Rst+0x2c>)
 8000bd0:	f7ff ffc6 	bl	8000b60 <Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40011800 	.word	0x40011800
 8000bdc:	0002bffc 	.word	0x0002bffc

08000be0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <LCD_BackLed_Control+0x34>)
 8000bf8:	f001 fad2 	bl	80021a0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000bfc:	e005      	b.n	8000c0a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <LCD_BackLed_Control+0x34>)
 8000c06:	f001 facb 	bl	80021a0 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40011400 	.word	0x40011400

08000c18 <LCD_Write_Cmd>:


void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c22:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	8013      	strh	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <LCD_Write_Data>:



void LCD_Write_Data ( uint16_t usData )
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <LCD_Write_Data+0x1c>)
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	8013      	strh	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	60020000 	.word	0x60020000

08000c54 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000c58:	20cf      	movs	r0, #207	; 0xcf
 8000c5a:	f7ff ffdd 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f7ff ffe8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000c64:	2081      	movs	r0, #129	; 0x81
 8000c66:	f7ff ffe5 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000c6a:	2030      	movs	r0, #48	; 0x30
 8000c6c:	f7ff ffe2 	bl	8000c34 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000c70:	20ed      	movs	r0, #237	; 0xed
 8000c72:	f7ff ffd1 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f7ff ffdc 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f7ff ffd9 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000c82:	2012      	movs	r0, #18
 8000c84:	f7ff ffd6 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000c88:	2081      	movs	r0, #129	; 0x81
 8000c8a:	f7ff ffd3 	bl	8000c34 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000c8e:	20e8      	movs	r0, #232	; 0xe8
 8000c90:	f7ff ffc2 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000c94:	2085      	movs	r0, #133	; 0x85
 8000c96:	f7ff ffcd 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000c9a:	2010      	movs	r0, #16
 8000c9c:	f7ff ffca 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f7ff ffc7 	bl	8000c34 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000ca6:	20cb      	movs	r0, #203	; 0xcb
 8000ca8:	f7ff ffb6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000cac:	2039      	movs	r0, #57	; 0x39
 8000cae:	f7ff ffc1 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000cb2:	202c      	movs	r0, #44	; 0x2c
 8000cb4:	f7ff ffbe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ffbb 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000cbe:	2034      	movs	r0, #52	; 0x34
 8000cc0:	f7ff ffb8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff ffb5 	bl	8000c34 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000cca:	20f7      	movs	r0, #247	; 0xf7
 8000ccc:	f7ff ffa4 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000cd0:	2020      	movs	r0, #32
 8000cd2:	f7ff ffaf 	bl	8000c34 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000cd6:	20ea      	movs	r0, #234	; 0xea
 8000cd8:	f7ff ff9e 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ffa9 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ffa6 	bl	8000c34 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000ce8:	20b1      	movs	r0, #177	; 0xb1
 8000cea:	f7ff ff95 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ffa0 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000cf4:	201b      	movs	r0, #27
 8000cf6:	f7ff ff9d 	bl	8000c34 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000cfa:	20b6      	movs	r0, #182	; 0xb6
 8000cfc:	f7ff ff8c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000d00:	200a      	movs	r0, #10
 8000d02:	f7ff ff97 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000d06:	20a2      	movs	r0, #162	; 0xa2
 8000d08:	f7ff ff94 	bl	8000c34 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d0c:	20c0      	movs	r0, #192	; 0xc0
 8000d0e:	f7ff ff83 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000d12:	2035      	movs	r0, #53	; 0x35
 8000d14:	f7ff ff8e 	bl	8000c34 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d18:	20c1      	movs	r0, #193	; 0xc1
 8000d1a:	f7ff ff7d 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000d1e:	2011      	movs	r0, #17
 8000d20:	f7ff ff88 	bl	8000c34 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d24:	20c5      	movs	r0, #197	; 0xc5
 8000d26:	f7ff ff77 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000d2a:	2045      	movs	r0, #69	; 0x45
 8000d2c:	f7ff ff82 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000d30:	2045      	movs	r0, #69	; 0x45
 8000d32:	f7ff ff7f 	bl	8000c34 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000d36:	20c7      	movs	r0, #199	; 0xc7
 8000d38:	f7ff ff6e 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000d3c:	20a2      	movs	r0, #162	; 0xa2
 8000d3e:	f7ff ff79 	bl	8000c34 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d42:	20f2      	movs	r0, #242	; 0xf2
 8000d44:	f7ff ff68 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ff73 	bl	8000c34 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d4e:	2026      	movs	r0, #38	; 0x26
 8000d50:	f7ff ff62 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff ff6d 	bl	8000c34 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000d5a:	20e0      	movs	r0, #224	; 0xe0
 8000d5c:	f7ff ff5c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000d60:	200f      	movs	r0, #15
 8000d62:	f7ff ff67 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000d66:	2026      	movs	r0, #38	; 0x26
 8000d68:	f7ff ff64 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000d6c:	2024      	movs	r0, #36	; 0x24
 8000d6e:	f7ff ff61 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000d72:	200b      	movs	r0, #11
 8000d74:	f7ff ff5e 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000d78:	200e      	movs	r0, #14
 8000d7a:	f7ff ff5b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d7e:	2009      	movs	r0, #9
 8000d80:	f7ff ff58 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000d84:	2054      	movs	r0, #84	; 0x54
 8000d86:	f7ff ff55 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000d8a:	20a8      	movs	r0, #168	; 0xa8
 8000d8c:	f7ff ff52 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000d90:	2046      	movs	r0, #70	; 0x46
 8000d92:	f7ff ff4f 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000d96:	200c      	movs	r0, #12
 8000d98:	f7ff ff4c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f7ff ff49 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000da2:	2009      	movs	r0, #9
 8000da4:	f7ff ff46 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000da8:	200f      	movs	r0, #15
 8000daa:	f7ff ff43 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dae:	2007      	movs	r0, #7
 8000db0:	f7ff ff40 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff3d 	bl	8000c34 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000dba:	20e1      	movs	r0, #225	; 0xe1
 8000dbc:	f7ff ff2c 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ff37 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f7ff ff34 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000dcc:	201b      	movs	r0, #27
 8000dce:	f7ff ff31 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff ff2e 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000dd8:	2010      	movs	r0, #16
 8000dda:	f7ff ff2b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000dde:	2007      	movs	r0, #7
 8000de0:	f7ff ff28 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000de4:	202a      	movs	r0, #42	; 0x2a
 8000de6:	f7ff ff25 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000dea:	2047      	movs	r0, #71	; 0x47
 8000dec:	f7ff ff22 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000df0:	2039      	movs	r0, #57	; 0x39
 8000df2:	f7ff ff1f 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff ff1c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	f7ff ff19 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e02:	2006      	movs	r0, #6
 8000e04:	f7ff ff16 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000e08:	2030      	movs	r0, #48	; 0x30
 8000e0a:	f7ff ff13 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000e0e:	2038      	movs	r0, #56	; 0x38
 8000e10:	f7ff ff10 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e14:	200f      	movs	r0, #15
 8000e16:	f7ff ff0d 	bl	8000c34 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e1a:	2036      	movs	r0, #54	; 0x36
 8000e1c:	f7ff fefc 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000e20:	20c8      	movs	r0, #200	; 0xc8
 8000e22:	f7ff ff07 	bl	8000c34 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e26:	202a      	movs	r0, #42	; 0x2a
 8000e28:	f7ff fef6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff01 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fefe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fefb 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000e3e:	20ef      	movs	r0, #239	; 0xef
 8000e40:	f7ff fef8 	bl	8000c34 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e44:	202b      	movs	r0, #43	; 0x2b
 8000e46:	f7ff fee7 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fef2 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff feef 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff feec 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000e5c:	203f      	movs	r0, #63	; 0x3f
 8000e5e:	f7ff fee9 	bl	8000c34 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000e62:	203a      	movs	r0, #58	; 0x3a
 8000e64:	f7ff fed8 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000e68:	2055      	movs	r0, #85	; 0x55
 8000e6a:	f7ff fee3 	bl	8000c34 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000e6e:	2011      	movs	r0, #17
 8000e70:	f7ff fed2 	bl	8000c18 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <LCD_REG_Config+0x230>)
 8000e76:	f7ff fe73 	bl	8000b60 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000e7a:	2029      	movs	r0, #41	; 0x29
 8000e7c:	f7ff fecc 	bl	8000c18 <LCD_Write_Cmd>
	
	
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0002bffc 	.word	0x0002bffc

08000e88 <LCD_OpenWindow>:


void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4604      	mov	r4, r0
 8000e90:	4608      	mov	r0, r1
 8000e92:	4611      	mov	r1, r2
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80bb      	strh	r3, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000ea6:	202a      	movs	r0, #42	; 0x2a
 8000ea8:	f7ff feb6 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff febe 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff feb8 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	121b      	asrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff feaf 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	4413      	add	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fea4 	bl	8000c34 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000eec:	202b      	movs	r0, #43	; 0x2b
 8000eee:	f7ff fe93 	bl	8000c18 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe9b 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe95 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f0a:	88ba      	ldrh	r2, [r7, #4]
 8000f0c:	883b      	ldrh	r3, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b01      	subs	r3, #1
 8000f12:	121b      	asrs	r3, r3, #8
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fe8c 	bl	8000c34 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f1c:	88ba      	ldrh	r2, [r7, #4]
 8000f1e:	883b      	ldrh	r3, [r7, #0]
 8000f20:	4413      	add	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fe81 	bl	8000c34 <LCD_Write_Data>
	
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}

08000f3a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f4a:	202c      	movs	r0, #44	; 0x2c
 8000f4c:	f7ff fe64 	bl	8000c18 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e006      	b.n	8000f64 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe6b 	bl	8000c34 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3301      	adds	r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d3f4      	bcc.n	8000f56 <LCD_FillColor+0x1c>
		
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LCD_Clear>:


void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000f76:	b590      	push	{r4, r7, lr}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	4608      	mov	r0, r1
 8000f80:	4611      	mov	r1, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	4623      	mov	r3, r4
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	80bb      	strh	r3, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	88f8      	ldrh	r0, [r7, #6]
 8000f9c:	f7ff ff74 	bl	8000e88 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	883a      	ldrh	r2, [r7, #0]
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	8b3b      	ldrh	r3, [r7, #24]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4610      	mov	r0, r2
 8000fb0:	f7ff ffc3 	bl	8000f3a <LCD_FillColor>
	
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	80bb      	strh	r3, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	3b20      	subs	r3, #32
 8000fd2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000fd4:	88b9      	ldrh	r1, [r7, #4]
 8000fd6:	88f8      	ldrh	r0, [r7, #6]
 8000fd8:	2310      	movs	r3, #16
 8000fda:	2208      	movs	r2, #8
 8000fdc:	f7ff ff54 	bl	8000e88 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fe0:	202c      	movs	r0, #44	; 0x2c
 8000fe2:	f7ff fe19 	bl	8000c18 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
 8000fea:	e023      	b.n	8001034 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000fec:	7b3a      	ldrb	r2, [r7, #12]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4914      	ldr	r1, [pc, #80]	; (8001044 <LCD_DrawChar+0x88>)
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	440a      	add	r2, r1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	737b      	strb	r3, [r7, #13]
 8001000:	e012      	b.n	8001028 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 800100c:	201f      	movs	r0, #31
 800100e:	f7ff fe11 	bl	8000c34 <LCD_Write_Data>
 8001012:	e003      	b.n	800101c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001014:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001018:	f7ff fe0c 	bl	8000c34 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	3301      	adds	r3, #1
 8001026:	737b      	strb	r3, [r7, #13]
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9e9      	bls.n	8001002 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	3301      	adds	r3, #1
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d9d8      	bls.n	8000fec <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08006acc 	.word	0x08006acc

08001048 <LCD_DrawString>:


void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	603a      	str	r2, [r7, #0]
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	460b      	mov	r3, r1
 8001056:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001058:	e01c      	b.n	8001094 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2be8      	cmp	r3, #232	; 0xe8
 800105e:	d904      	bls.n	800106a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001060:	2300      	movs	r3, #0
 8001062:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	3310      	adds	r3, #16
 8001068:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001070:	d903      	bls.n	800107a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001072:	2300      	movs	r3, #0
 8001074:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001076:	2300      	movs	r3, #0
 8001078:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	88b9      	ldrh	r1, [r7, #4]
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff9a 	bl	8000fbc <LCD_DrawChar>
		
		pStr ++;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	3308      	adds	r3, #8
 8001092:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1de      	bne.n	800105a <LCD_DrawString+0x12>
		
	}
	
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010aa:	f000 fd51 	bl	8001b50 <HAL_Init>
  //HAL_I2C_Mem_Write(&hi2c2,0x1E<<1,0x00,1,0x70,1,100);
  //HAL_I2C_Mem_Write(&hi2c2,0x1E<<1,0x01,1,0xA0,1,100);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ae:	f000 f810 	bl	80010d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b2:	f000 f881 	bl	80011b8 <MX_GPIO_Init>
  MX_FSMC_Init();
 80010b6:	f000 f911 	bl	80012dc <MX_FSMC_Init>
  MX_I2C2_Init();
 80010ba:	f000 f84f 	bl	800115c <MX_I2C2_Init>
  LCD_INIT();
 80010be:	f7ff fd60 	bl	8000b82 <LCD_INIT>
  MPU5050_INIT();
 80010c2:	f000 f975 	bl	80013b0 <MPU5050_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	MPU6050_display();
 80010c6:	f000 fadf 	bl	8001688 <MPU6050_display>
	HAL_Delay(100);
 80010ca:	2064      	movs	r0, #100	; 0x64
 80010cc:	f000 fda2 	bl	8001c14 <HAL_Delay>
	MPU6050_display();
 80010d0:	e7f9      	b.n	80010c6 <main+0x20>

080010d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b090      	sub	sp, #64	; 0x40
 80010d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	2228      	movs	r2, #40	; 0x28
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fdeb 	bl	8003cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001102:	2301      	movs	r3, #1
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001106:	2302      	movs	r3, #2
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001110:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	4618      	mov	r0, r3
 800111c:	f002 f87a 	bl	8003214 <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001126:	f000 f93d 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2302      	movs	r3, #2
 8001130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2102      	movs	r1, #2
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fae7 	bl	8003718 <HAL_RCC_ClockConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001150:	f000 f928 	bl	80013a4 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3740      	adds	r7, #64	; 0x40
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C2_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_I2C2_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C2_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_I2C2_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C2_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_I2C2_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_I2C2_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_I2C2_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_I2C2_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_I2C2_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_I2C2_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C2_Init+0x50>)
 800119a:	f001 f83b 	bl	8002214 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f8fe 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001f8 	.word	0x200001f8
 80011b0:	40005800 	.word	0x40005800
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <MX_GPIO_Init+0x110>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <MX_GPIO_Init+0x110>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <MX_GPIO_Init+0x110>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e4:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <MX_GPIO_Init+0x110>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <MX_GPIO_Init+0x110>)
 80011ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <MX_GPIO_Init+0x110>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <MX_GPIO_Init+0x110>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a31      	ldr	r2, [pc, #196]	; (80012c8 <MX_GPIO_Init+0x110>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <MX_GPIO_Init+0x110>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <MX_GPIO_Init+0x110>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <MX_GPIO_Init+0x110>)
 800121a:	f043 0320 	orr.w	r3, r3, #32
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <MX_GPIO_Init+0x110>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MX_GPIO_Init+0x110>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <MX_GPIO_Init+0x110>)
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_GPIO_Init+0x110>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800124a:	4820      	ldr	r0, [pc, #128]	; (80012cc <MX_GPIO_Init+0x114>)
 800124c:	f000 ffa8 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2102      	movs	r1, #2
 8001254:	481e      	ldr	r0, [pc, #120]	; (80012d0 <MX_GPIO_Init+0x118>)
 8001256:	f000 ffa3 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800125a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_GPIO_Init+0x11c>)
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	4619      	mov	r1, r3
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <MX_GPIO_Init+0x120>)
 8001270:	f000 fe02 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	4619      	mov	r1, r3
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <MX_GPIO_Init+0x114>)
 800128e:	f000 fdf3 	bl	8001e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	4619      	mov	r1, r3
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <MX_GPIO_Init+0x118>)
 80012aa:	f000 fde5 	bl	8001e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2028      	movs	r0, #40	; 0x28
 80012b4:	f000 fda9 	bl	8001e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	f000 fdc2 	bl	8001e42 <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40011400 	.word	0x40011400
 80012d0:	40011800 	.word	0x40011800
 80012d4:	10110000 	.word	0x10110000
 80012d8:	40011000 	.word	0x40011000

080012dc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <MX_FSMC_Init+0xbc>)
 80012f6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012fa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <MX_FSMC_Init+0xbc>)
 80012fe:	4a27      	ldr	r2, [pc, #156]	; (800139c <MX_FSMC_Init+0xc0>)
 8001300:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <MX_FSMC_Init+0xbc>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001316:	2210      	movs	r2, #16
 8001318:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_FSMC_Init+0xbc>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_FSMC_Init+0xbc>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_FSMC_Init+0xbc>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001348:	2200      	movs	r2, #0
 800134a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_FSMC_Init+0xbc>)
 800134e:	2200      	movs	r2, #0
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001352:	230f      	movs	r3, #15
 8001354:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001356:	230f      	movs	r3, #15
 8001358:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800135e:	230f      	movs	r3, #15
 8001360:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001362:	2310      	movs	r3, #16
 8001364:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001366:	2311      	movs	r3, #17
 8001368:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	4619      	mov	r1, r3
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <MX_FSMC_Init+0xbc>)
 8001376:	f002 fb53 	bl	8003a20 <HAL_SRAM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8001380:	f000 f810 	bl	80013a4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_FSMC_Init+0xc4>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <MX_FSMC_Init+0xc4>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2000024c 	.word	0x2000024c
 800139c:	a0000104 	.word	0xa0000104
 80013a0:	40010000 	.word	0x40010000

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <MPU5050_INIT>:
#include "mpu6050.h"
#include "main.h"

extern I2C_HandleTypeDef hi2c2;

void MPU5050_INIT(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af04      	add	r7, sp, #16
	uint8_t Data = 0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT, 1, &Data, 1, 1000);
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2301      	movs	r3, #1
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	226b      	movs	r2, #107	; 0x6b
 80013cc:	21d0      	movs	r1, #208	; 0xd0
 80013ce:	481a      	ldr	r0, [pc, #104]	; (8001438 <MPU5050_INIT+0x88>)
 80013d0:	f001 f864 	bl	800249c <HAL_I2C_Mem_Write>

	Data = 0x07;
 80013d4:	2307      	movs	r3, #7
 80013d6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	2219      	movs	r2, #25
 80013ea:	21d0      	movs	r1, #208	; 0xd0
 80013ec:	4812      	ldr	r0, [pc, #72]	; (8001438 <MPU5050_INIT+0x88>)
 80013ee:	f001 f855 	bl	800249c <HAL_I2C_Mem_Write>

	Data = 0x00;
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCER_CONFIG, 1, &Data, 1, 1000);
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	1dfb      	adds	r3, r7, #7
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2301      	movs	r3, #1
 8001406:	221c      	movs	r2, #28
 8001408:	21d0      	movs	r1, #208	; 0xd0
 800140a:	480b      	ldr	r0, [pc, #44]	; (8001438 <MPU5050_INIT+0x88>)
 800140c:	f001 f846 	bl	800249c <HAL_I2C_Mem_Write>

	Data = 0x00;
 8001410:	2300      	movs	r3, #0
 8001412:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCER_CONFIG, 1, &Data, 1, 1000);
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2301      	movs	r3, #1
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	221c      	movs	r2, #28
 8001426:	21d0      	movs	r1, #208	; 0xd0
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MPU5050_INIT+0x88>)
 800142a:	f001 f837 	bl	800249c <HAL_I2C_Mem_Write>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001f8 	.word	0x200001f8

0800143c <MPU6050_GetData>:

int16_t MPU6050_GetData(uint8_t HighAddr){
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
	uint8_t regData[2];

	regData[0] = MPU6050_Read(HighAddr);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f815 	bl	8001478 <MPU6050_Read>
 800144e:	4603      	mov	r3, r0
 8001450:	733b      	strb	r3, [r7, #12]
	regData[1] = MPU6050_Read(HighAddr+1);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3301      	adds	r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f80d 	bl	8001478 <MPU6050_Read>
 800145e:	4603      	mov	r3, r0
 8001460:	737b      	strb	r3, [r7, #13]

	return (int16_t)((regData[0] << 8) | regData[1]);
 8001462:	7b3b      	ldrb	r3, [r7, #12]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <MPU6050_Read>:

uint8_t MPU6050_Read(uint8_t addr){
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af04      	add	r7, sp, #16
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, addr,1,  &Data, 1, 1000);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	b29a      	uxth	r2, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	2301      	movs	r3, #1
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	f107 030f 	add.w	r3, r7, #15
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	21d0      	movs	r1, #208	; 0xd0
 800149a:	4804      	ldr	r0, [pc, #16]	; (80014ac <MPU6050_Read+0x34>)
 800149c:	f001 f8f8 	bl	8002690 <HAL_I2C_Mem_Read>
	return Data;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200001f8 	.word	0x200001f8

080014b0 <getACCER>:


struct MPU6050_Data getACCER(void){
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	struct MPU6050_Data tmp = {0,0,0};
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp.x = (MPU6050_GetData(ACCER_OUT) + ACCER_OFFSET_X)/CONV_ACCER;
 80014dc:	203b      	movs	r0, #59	; 0x3b
 80014de:	f7ff ffad 	bl	800143c <MPU6050_GetData>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fff9 	bl	80004dc <__aeabi_i2d>
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f7fe fea7 	bl	8000244 <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <getACCER+0xe4>)
 8001504:	f7ff f97e 	bl	8000804 <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp.y = (MPU6050_GetData(ACCER_OUT+2) + ACCER_OFFSET_Y)/CONV_ACCER;
 8001510:	203d      	movs	r0, #61	; 0x3d
 8001512:	f7ff ff93 	bl	800143c <MPU6050_GetData>
 8001516:	4603      	mov	r3, r0
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ffdf 	bl	80004dc <__aeabi_i2d>
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	f7fe fe8d 	bl	8000244 <__adddf3>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <getACCER+0xe4>)
 8001538:	f7ff f964 	bl	8000804 <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp.z = (MPU6050_GetData(ACCER_OUT+4) + ACCER_OFFSET_Z)/CONV_ACCER;
 8001544:	203f      	movs	r0, #63	; 0x3f
 8001546:	f7ff ff79 	bl	800143c <MPU6050_GetData>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffc5 	bl	80004dc <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	f7fe fe73 	bl	8000244 <__adddf3>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <getACCER+0xe4>)
 800156c:	f7ff f94a 	bl	8000804 <__aeabi_ddiv>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return tmp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	461d      	mov	r5, r3
 800157c:	f107 0408 	add.w	r4, r7, #8
 8001580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001584:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001588:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bdb0      	pop	{r4, r5, r7, pc}
 8001594:	40d00000 	.word	0x40d00000

08001598 <getGYRO>:

struct MPU6050_Data getGYRO(void){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	struct MPU6050_Data tmp = {0,0,0};
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp.x = (MPU6050_GetData(GYRO_OUT) + GYRO_OFFSET_X)/CONV_GYRO;
 80015c4:	2043      	movs	r0, #67	; 0x43
 80015c6:	f7ff ff39 	bl	800143c <MPU6050_GetData>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ff85 	bl	80004dc <__aeabi_i2d>
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	f7fe fe33 	bl	8000244 <__adddf3>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	a326      	add	r3, pc, #152	; (adr r3, 8001680 <getGYRO+0xe8>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f90a 	bl	8000804 <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp.y = (MPU6050_GetData(GYRO_OUT+2) + GYRO_OFFSET_Y)/CONV_GYRO;
 80015f8:	2045      	movs	r0, #69	; 0x45
 80015fa:	f7ff ff1f 	bl	800143c <MPU6050_GetData>
 80015fe:	4603      	mov	r3, r0
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff6b 	bl	80004dc <__aeabi_i2d>
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	f7fe fe19 	bl	8000244 <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	a319      	add	r3, pc, #100	; (adr r3, 8001680 <getGYRO+0xe8>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7ff f8f0 	bl	8000804 <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	e9c7 2304 	strd	r2, r3, [r7, #16]
	tmp.z = (MPU6050_GetData(GYRO_OUT+4) + GYRO_OFFSET_Z)/CONV_GYRO;
 800162c:	2047      	movs	r0, #71	; 0x47
 800162e:	f7ff ff05 	bl	800143c <MPU6050_GetData>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff51 	bl	80004dc <__aeabi_i2d>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	f7fe fdff 	bl	8000244 <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	a30c      	add	r3, pc, #48	; (adr r3, 8001680 <getGYRO+0xe8>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff f8d6 	bl	8000804 <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	return tmp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	461d      	mov	r5, r3
 8001664:	f107 0408 	add.w	r4, r7, #8
 8001668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001670:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	f3af 8000 	nop.w
 8001680:	00000000 	.word	0x00000000
 8001684:	40606000 	.word	0x40606000

08001688 <MPU6050_display>:

void MPU6050_display(void){
 8001688:	b580      	push	{r7, lr}
 800168a:	b092      	sub	sp, #72	; 0x48
 800168c:	af02      	add	r7, sp, #8
	  	 struct MPU6050_Data accer, gyro;
	  	 char line[9];

		 LCD_Clear(60, 120, 170, 20, BACKGROUND);
 800168e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2314      	movs	r3, #20
 8001696:	22aa      	movs	r2, #170	; 0xaa
 8001698:	2178      	movs	r1, #120	; 0x78
 800169a:	203c      	movs	r0, #60	; 0x3c
 800169c:	f7ff fc6b 	bl	8000f76 <LCD_Clear>

		 accer = getACCER();
 80016a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff03 	bl	80014b0 <getACCER>
		 gyro = getGYRO();
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff72 	bl	8001598 <getGYRO>

		 LCD_DrawString(leftCornerX + elemWidth, leftCornerY, "x");
 80016b4:	4a32      	ldr	r2, [pc, #200]	; (8001780 <MPU6050_display+0xf8>)
 80016b6:	210a      	movs	r1, #10
 80016b8:	203c      	movs	r0, #60	; 0x3c
 80016ba:	f7ff fcc5 	bl	8001048 <LCD_DrawString>
		 LCD_DrawString(leftCornerX + 2*elemWidth, leftCornerY, "y");
 80016be:	4a31      	ldr	r2, [pc, #196]	; (8001784 <MPU6050_display+0xfc>)
 80016c0:	210a      	movs	r1, #10
 80016c2:	2078      	movs	r0, #120	; 0x78
 80016c4:	f7ff fcc0 	bl	8001048 <LCD_DrawString>
		 LCD_DrawString(leftCornerX + 3*elemWidth, leftCornerY, "z");
 80016c8:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <MPU6050_display+0x100>)
 80016ca:	210a      	movs	r1, #10
 80016cc:	20b4      	movs	r0, #180	; 0xb4
 80016ce:	f7ff fcbb 	bl	8001048 <LCD_DrawString>
		 LCD_DrawString(leftCornerX, leftCornerY + elemHeight, "accer");
 80016d2:	4a2e      	ldr	r2, [pc, #184]	; (800178c <MPU6050_display+0x104>)
 80016d4:	2150      	movs	r1, #80	; 0x50
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fcb6 	bl	8001048 <LCD_DrawString>
		 LCD_DrawString(leftCornerX, leftCornerY + 2*elemHeight, "gyro");
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <MPU6050_display+0x108>)
 80016de:	2196      	movs	r1, #150	; 0x96
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fcb1 	bl	8001048 <LCD_DrawString>


		 sprintf(line, "%.2f", accer.x);
 80016e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ea:	1d38      	adds	r0, r7, #4
 80016ec:	4929      	ldr	r1, [pc, #164]	; (8001794 <MPU6050_display+0x10c>)
 80016ee:	f002 ff4d 	bl	800458c <siprintf>
		 LCD_DrawString(leftCornerX + elemWidth, leftCornerY + elemHeight, line);
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	461a      	mov	r2, r3
 80016f6:	2150      	movs	r1, #80	; 0x50
 80016f8:	203c      	movs	r0, #60	; 0x3c
 80016fa:	f7ff fca5 	bl	8001048 <LCD_DrawString>
		 sprintf(line, "%.2f", accer.y);
 80016fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001702:	1d38      	adds	r0, r7, #4
 8001704:	4923      	ldr	r1, [pc, #140]	; (8001794 <MPU6050_display+0x10c>)
 8001706:	f002 ff41 	bl	800458c <siprintf>
		 LCD_DrawString(leftCornerX + 2*elemWidth, leftCornerY + elemHeight, line);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	461a      	mov	r2, r3
 800170e:	2150      	movs	r1, #80	; 0x50
 8001710:	2078      	movs	r0, #120	; 0x78
 8001712:	f7ff fc99 	bl	8001048 <LCD_DrawString>
		 sprintf(line, "%.2f", accer.z);
 8001716:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800171a:	1d38      	adds	r0, r7, #4
 800171c:	491d      	ldr	r1, [pc, #116]	; (8001794 <MPU6050_display+0x10c>)
 800171e:	f002 ff35 	bl	800458c <siprintf>
		 LCD_DrawString(leftCornerX + 3*elemWidth, leftCornerY + elemHeight, line);
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	461a      	mov	r2, r3
 8001726:	2150      	movs	r1, #80	; 0x50
 8001728:	20b4      	movs	r0, #180	; 0xb4
 800172a:	f7ff fc8d 	bl	8001048 <LCD_DrawString>

		 sprintf(line, "%.2f", gyro.x);
 800172e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001732:	1d38      	adds	r0, r7, #4
 8001734:	4917      	ldr	r1, [pc, #92]	; (8001794 <MPU6050_display+0x10c>)
 8001736:	f002 ff29 	bl	800458c <siprintf>
		 LCD_DrawString(leftCornerX + elemWidth, leftCornerY + 2*elemHeight, line);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	461a      	mov	r2, r3
 800173e:	2196      	movs	r1, #150	; 0x96
 8001740:	203c      	movs	r0, #60	; 0x3c
 8001742:	f7ff fc81 	bl	8001048 <LCD_DrawString>
		 sprintf(line, "%.2f", gyro.y);
 8001746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800174a:	1d38      	adds	r0, r7, #4
 800174c:	4911      	ldr	r1, [pc, #68]	; (8001794 <MPU6050_display+0x10c>)
 800174e:	f002 ff1d 	bl	800458c <siprintf>
		 LCD_DrawString(leftCornerX + 2*elemWidth, leftCornerY + 2*elemHeight, line);
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	461a      	mov	r2, r3
 8001756:	2196      	movs	r1, #150	; 0x96
 8001758:	2078      	movs	r0, #120	; 0x78
 800175a:	f7ff fc75 	bl	8001048 <LCD_DrawString>
		 sprintf(line, "%.2f", gyro.z);
 800175e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001762:	1d38      	adds	r0, r7, #4
 8001764:	490b      	ldr	r1, [pc, #44]	; (8001794 <MPU6050_display+0x10c>)
 8001766:	f002 ff11 	bl	800458c <siprintf>
		 LCD_DrawString(leftCornerX + 3*elemWidth, leftCornerY + 2*elemHeight, line);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	461a      	mov	r2, r3
 800176e:	2196      	movs	r1, #150	; 0x96
 8001770:	20b4      	movs	r0, #180	; 0xb4
 8001772:	f7ff fc69 	bl	8001048 <LCD_DrawString>
}
 8001776:	bf00      	nop
 8001778:	3740      	adds	r7, #64	; 0x40
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	08006a98 	.word	0x08006a98
 8001784:	08006a9c 	.word	0x08006a9c
 8001788:	08006aa0 	.word	0x08006aa0
 800178c:	08006aa4 	.word	0x08006aa4
 8001790:	08006aac 	.word	0x08006aac
 8001794:	08006ab4 	.word	0x08006ab4

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_MspInit+0x5c>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_MspInit+0x5c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6193      	str	r3, [r2, #24]
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_MspInit+0x5c>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x5c>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_MspInit+0x5c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	61d3      	str	r3, [r2, #28]
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x5c>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_MspInit+0x60>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_MspInit+0x60>)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000

080017fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a16      	ldr	r2, [pc, #88]	; (8001870 <HAL_I2C_MspInit+0x74>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d124      	bne.n	8001866 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_I2C_MspInit+0x78>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <HAL_I2C_MspInit+0x78>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_I2C_MspInit+0x78>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001834:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001838:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183a:	2312      	movs	r3, #18
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	480b      	ldr	r0, [pc, #44]	; (8001878 <HAL_I2C_MspInit+0x7c>)
 800184a:	f000 fb15 	bl	8001e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_I2C_MspInit+0x78>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_I2C_MspInit+0x78>)
 8001854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_I2C_MspInit+0x78>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40005800 	.word	0x40005800
 8001874:	40021000 	.word	0x40021000
 8001878:	40010c00 	.word	0x40010c00

0800187c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_FSMC_MspInit+0x78>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d129      	bne.n	80018ec <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_FSMC_MspInit+0x78>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_FSMC_MspInit+0x7c>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <HAL_FSMC_MspInit+0x7c>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6153      	str	r3, [r2, #20]
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_FSMC_MspInit+0x7c>)
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018b6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80018ba:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	4619      	mov	r1, r3
 80018ca:	480c      	ldr	r0, [pc, #48]	; (80018fc <HAL_FSMC_MspInit+0x80>)
 80018cc:	f000 fad4 	bl	8001e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80018d0:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80018d4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4619      	mov	r1, r3
 80018e4:	4806      	ldr	r0, [pc, #24]	; (8001900 <HAL_FSMC_MspInit+0x84>)
 80018e6:	f000 fac7 	bl	8001e78 <HAL_GPIO_Init>
 80018ea:	e000      	b.n	80018ee <HAL_FSMC_MspInit+0x72>
    return;
 80018ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000294 	.word	0x20000294
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40011800 	.word	0x40011800
 8001900:	40011400 	.word	0x40011400

08001904 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800190c:	f7ff ffb6 	bl	800187c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195e:	f000 f93d 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}

08001966 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800196a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800196e:	f000 fc2f 	bl	80021d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}

08001976 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
	return 1;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <_kill>:

int _kill(int pid, int sig)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800198e:	f002 f96b 	bl	8003c68 <__errno>
 8001992:	4603      	mov	r3, r0
 8001994:	2216      	movs	r2, #22
 8001996:	601a      	str	r2, [r3, #0]
	return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_exit>:

void _exit (int status)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe7 	bl	8001984 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019b6:	e7fe      	b.n	80019b6 <_exit+0x12>

080019b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e00a      	b.n	80019e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ca:	f3af 8000 	nop.w
 80019ce:	4601      	mov	r1, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbf0      	blt.n	80019ca <_read+0x12>
	}

return len;
 80019e8:	687b      	ldr	r3, [r7, #4]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e009      	b.n	8001a18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf1      	blt.n	8001a04 <_write+0x12>
	}
	return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_close>:

int _close(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
	return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a50:	605a      	str	r2, [r3, #4]
	return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <_isatty>:

int _isatty(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b085      	sub	sp, #20
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
	return 0;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
	...

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f002 f8d4 	bl	8003c68 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20010000 	.word	0x20010000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	20000298 	.word	0x20000298
 8001af4:	200002b0 	.word	0x200002b0

08001af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b2a:	f7ff ffe5 	bl	8001af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f002 f8a1 	bl	8003c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7ff fab8 	bl	80010a6 <main>
  bx lr
 8001b36:	4770      	bx	lr
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b40:	080074b4 	.word	0x080074b4
  ldr r2, =_sbss
 8001b44:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b48:	200002b0 	.word	0x200002b0

08001b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_Init+0x28>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_Init+0x28>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 f947 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f000 f808 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7ff fe14 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x58>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f95f 	bl	8001e5e <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00e      	b.n	8001bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d80a      	bhi.n	8001bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f000 f927 	bl	8001e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <HAL_InitTick+0x5c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x1c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_IncTick+0x20>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_IncTick+0x20>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	2000029c 	.word	0x2000029c

08001c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_GetTick+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	2000029c 	.word	0x2000029c

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_GetTick>
 8001c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_Delay+0x44>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c3a:	bf00      	nop
 8001c3c:	f7ff ffe0 	bl	8001c00 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4906      	ldr	r1, [pc, #24]	; (8001cf4 <__NVIC_EnableIRQ+0x34>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc0:	d301      	bcc.n	8001dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00f      	b.n	8001de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <SysTick_Config+0x40>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f7ff ff90 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <SysTick_Config+0x40>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dde:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SysTick_Config+0x40>)
 8001de0:	2207      	movs	r2, #7
 8001de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	e000e010 	.word	0xe000e010

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff2d 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff42 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff90 	bl	8001d4c <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5f 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff35 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ffa2 	bl	8001db0 <SysTick_Config>
 8001e6c:	4603      	mov	r3, r0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b08b      	sub	sp, #44	; 0x2c
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8a:	e179      	b.n	8002180 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	f040 8168 	bne.w	800217a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a96      	ldr	r2, [pc, #600]	; (8002108 <HAL_GPIO_Init+0x290>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d05e      	beq.n	8001f72 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_GPIO_Init+0x290>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d875      	bhi.n	8001fa6 <HAL_GPIO_Init+0x12e>
 8001eba:	4a94      	ldr	r2, [pc, #592]	; (800210c <HAL_GPIO_Init+0x294>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d058      	beq.n	8001f72 <HAL_GPIO_Init+0xfa>
 8001ec0:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_GPIO_Init+0x294>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d86f      	bhi.n	8001fa6 <HAL_GPIO_Init+0x12e>
 8001ec6:	4a92      	ldr	r2, [pc, #584]	; (8002110 <HAL_GPIO_Init+0x298>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d052      	beq.n	8001f72 <HAL_GPIO_Init+0xfa>
 8001ecc:	4a90      	ldr	r2, [pc, #576]	; (8002110 <HAL_GPIO_Init+0x298>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d869      	bhi.n	8001fa6 <HAL_GPIO_Init+0x12e>
 8001ed2:	4a90      	ldr	r2, [pc, #576]	; (8002114 <HAL_GPIO_Init+0x29c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d04c      	beq.n	8001f72 <HAL_GPIO_Init+0xfa>
 8001ed8:	4a8e      	ldr	r2, [pc, #568]	; (8002114 <HAL_GPIO_Init+0x29c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d863      	bhi.n	8001fa6 <HAL_GPIO_Init+0x12e>
 8001ede:	4a8e      	ldr	r2, [pc, #568]	; (8002118 <HAL_GPIO_Init+0x2a0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d046      	beq.n	8001f72 <HAL_GPIO_Init+0xfa>
 8001ee4:	4a8c      	ldr	r2, [pc, #560]	; (8002118 <HAL_GPIO_Init+0x2a0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d85d      	bhi.n	8001fa6 <HAL_GPIO_Init+0x12e>
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d82a      	bhi.n	8001f44 <HAL_GPIO_Init+0xcc>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d859      	bhi.n	8001fa6 <HAL_GPIO_Init+0x12e>
 8001ef2:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <HAL_GPIO_Init+0x80>)
 8001ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef8:	08001f73 	.word	0x08001f73
 8001efc:	08001f4d 	.word	0x08001f4d
 8001f00:	08001f5f 	.word	0x08001f5f
 8001f04:	08001fa1 	.word	0x08001fa1
 8001f08:	08001fa7 	.word	0x08001fa7
 8001f0c:	08001fa7 	.word	0x08001fa7
 8001f10:	08001fa7 	.word	0x08001fa7
 8001f14:	08001fa7 	.word	0x08001fa7
 8001f18:	08001fa7 	.word	0x08001fa7
 8001f1c:	08001fa7 	.word	0x08001fa7
 8001f20:	08001fa7 	.word	0x08001fa7
 8001f24:	08001fa7 	.word	0x08001fa7
 8001f28:	08001fa7 	.word	0x08001fa7
 8001f2c:	08001fa7 	.word	0x08001fa7
 8001f30:	08001fa7 	.word	0x08001fa7
 8001f34:	08001fa7 	.word	0x08001fa7
 8001f38:	08001fa7 	.word	0x08001fa7
 8001f3c:	08001f55 	.word	0x08001f55
 8001f40:	08001f69 	.word	0x08001f69
 8001f44:	4a75      	ldr	r2, [pc, #468]	; (800211c <HAL_GPIO_Init+0x2a4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4a:	e02c      	b.n	8001fa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	623b      	str	r3, [r7, #32]
          break;
 8001f52:	e029      	b.n	8001fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	623b      	str	r3, [r7, #32]
          break;
 8001f5c:	e024      	b.n	8001fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	3308      	adds	r3, #8
 8001f64:	623b      	str	r3, [r7, #32]
          break;
 8001f66:	e01f      	b.n	8001fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	623b      	str	r3, [r7, #32]
          break;
 8001f70:	e01a      	b.n	8001fa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e013      	b.n	8001fa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f88:	2308      	movs	r3, #8
 8001f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	611a      	str	r2, [r3, #16]
          break;
 8001f92:	e009      	b.n	8001fa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f94:	2308      	movs	r3, #8
 8001f96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	615a      	str	r2, [r3, #20]
          break;
 8001f9e:	e003      	b.n	8001fa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
          break;
 8001fa4:	e000      	b.n	8001fa8 <HAL_GPIO_Init+0x130>
          break;
 8001fa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2bff      	cmp	r3, #255	; 0xff
 8001fac:	d801      	bhi.n	8001fb2 <HAL_GPIO_Init+0x13a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	e001      	b.n	8001fb6 <HAL_GPIO_Init+0x13e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d802      	bhi.n	8001fc4 <HAL_GPIO_Init+0x14c>
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	e002      	b.n	8001fca <HAL_GPIO_Init+0x152>
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	3b08      	subs	r3, #8
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	6a39      	ldr	r1, [r7, #32]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80c1 	beq.w	800217a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff8:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_GPIO_Init+0x2a8>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2a8>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_GPIO_Init+0x2a8>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002010:	4a44      	ldr	r2, [pc, #272]	; (8002124 <HAL_GPIO_Init+0x2ac>)
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <HAL_GPIO_Init+0x2b0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d01f      	beq.n	800207c <HAL_GPIO_Init+0x204>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3b      	ldr	r2, [pc, #236]	; (800212c <HAL_GPIO_Init+0x2b4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d019      	beq.n	8002078 <HAL_GPIO_Init+0x200>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <HAL_GPIO_Init+0x2b8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x1fc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a39      	ldr	r2, [pc, #228]	; (8002134 <HAL_GPIO_Init+0x2bc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1f8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a38      	ldr	r2, [pc, #224]	; (8002138 <HAL_GPIO_Init+0x2c0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1f4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a37      	ldr	r2, [pc, #220]	; (800213c <HAL_GPIO_Init+0x2c4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1f0>
 8002064:	2305      	movs	r3, #5
 8002066:	e00a      	b.n	800207e <HAL_GPIO_Init+0x206>
 8002068:	2306      	movs	r3, #6
 800206a:	e008      	b.n	800207e <HAL_GPIO_Init+0x206>
 800206c:	2304      	movs	r3, #4
 800206e:	e006      	b.n	800207e <HAL_GPIO_Init+0x206>
 8002070:	2303      	movs	r3, #3
 8002072:	e004      	b.n	800207e <HAL_GPIO_Init+0x206>
 8002074:	2302      	movs	r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x206>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_GPIO_Init+0x206>
 800207c:	2300      	movs	r3, #0
 800207e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002080:	f002 0203 	and.w	r2, r2, #3
 8002084:	0092      	lsls	r2, r2, #2
 8002086:	4093      	lsls	r3, r2
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800208e:	4925      	ldr	r1, [pc, #148]	; (8002124 <HAL_GPIO_Init+0x2ac>)
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4924      	ldr	r1, [pc, #144]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	4920      	ldr	r1, [pc, #128]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	491a      	ldr	r1, [pc, #104]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4916      	ldr	r1, [pc, #88]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d025      	beq.n	8002144 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	4910      	ldr	r1, [pc, #64]	; (8002140 <HAL_GPIO_Init+0x2c8>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
 8002104:	e025      	b.n	8002152 <HAL_GPIO_Init+0x2da>
 8002106:	bf00      	nop
 8002108:	10320000 	.word	0x10320000
 800210c:	10310000 	.word	0x10310000
 8002110:	10220000 	.word	0x10220000
 8002114:	10210000 	.word	0x10210000
 8002118:	10120000 	.word	0x10120000
 800211c:	10110000 	.word	0x10110000
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40011000 	.word	0x40011000
 8002134:	40011400 	.word	0x40011400
 8002138:	40011800 	.word	0x40011800
 800213c:	40011c00 	.word	0x40011c00
 8002140:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_GPIO_Init+0x324>)
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	43db      	mvns	r3, r3
 800214c:	4913      	ldr	r1, [pc, #76]	; (800219c <HAL_GPIO_Init+0x324>)
 800214e:	4013      	ands	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_GPIO_Init+0x324>)
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_GPIO_Init+0x324>)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	60cb      	str	r3, [r1, #12]
 800216a:	e006      	b.n	800217a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_GPIO_Init+0x324>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	43db      	mvns	r3, r3
 8002174:	4909      	ldr	r1, [pc, #36]	; (800219c <HAL_GPIO_Init+0x324>)
 8002176:	4013      	ands	r3, r2
 8002178:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	3301      	adds	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	f47f ae7e 	bne.w	8001e8c <HAL_GPIO_Init+0x14>
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	372c      	adds	r7, #44	; 0x2c
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021bc:	e003      	b.n	80021c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f806 	bl	8002200 <HAL_GPIO_EXTI_Callback>
  }
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40010400 	.word	0x40010400

08002200 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e12b      	b.n	800247e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fade 	bl	80017fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002266:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002276:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002278:	f001 fba0 	bl	80039bc <HAL_RCC_GetPCLK1Freq>
 800227c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a81      	ldr	r2, [pc, #516]	; (8002488 <HAL_I2C_Init+0x274>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d807      	bhi.n	8002298 <HAL_I2C_Init+0x84>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a80      	ldr	r2, [pc, #512]	; (800248c <HAL_I2C_Init+0x278>)
 800228c:	4293      	cmp	r3, r2
 800228e:	bf94      	ite	ls
 8002290:	2301      	movls	r3, #1
 8002292:	2300      	movhi	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e006      	b.n	80022a6 <HAL_I2C_Init+0x92>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a7d      	ldr	r2, [pc, #500]	; (8002490 <HAL_I2C_Init+0x27c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	bf94      	ite	ls
 80022a0:	2301      	movls	r3, #1
 80022a2:	2300      	movhi	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0e7      	b.n	800247e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a78      	ldr	r2, [pc, #480]	; (8002494 <HAL_I2C_Init+0x280>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a6a      	ldr	r2, [pc, #424]	; (8002488 <HAL_I2C_Init+0x274>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d802      	bhi.n	80022e8 <HAL_I2C_Init+0xd4>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	e009      	b.n	80022fc <HAL_I2C_Init+0xe8>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	4a69      	ldr	r2, [pc, #420]	; (8002498 <HAL_I2C_Init+0x284>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	099b      	lsrs	r3, r3, #6
 80022fa:	3301      	adds	r3, #1
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	430b      	orrs	r3, r1
 8002302:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800230e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	495c      	ldr	r1, [pc, #368]	; (8002488 <HAL_I2C_Init+0x274>)
 8002318:	428b      	cmp	r3, r1
 800231a:	d819      	bhi.n	8002350 <HAL_I2C_Init+0x13c>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e59      	subs	r1, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fbb1 f3f3 	udiv	r3, r1, r3
 800232a:	1c59      	adds	r1, r3, #1
 800232c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002330:	400b      	ands	r3, r1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_I2C_Init+0x138>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e59      	subs	r1, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fbb1 f3f3 	udiv	r3, r1, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234a:	e051      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 800234c:	2304      	movs	r3, #4
 800234e:	e04f      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d111      	bne.n	800237c <HAL_I2C_Init+0x168>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e58      	subs	r0, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	440b      	add	r3, r1
 8002366:	fbb0 f3f3 	udiv	r3, r0, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e012      	b.n	80023a2 <HAL_I2C_Init+0x18e>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e58      	subs	r0, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	0099      	lsls	r1, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002392:	3301      	adds	r3, #1
 8002394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Init+0x196>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e022      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10e      	bne.n	80023d0 <HAL_I2C_Init+0x1bc>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e58      	subs	r0, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	440b      	add	r3, r1
 80023c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ce:	e00f      	b.n	80023f0 <HAL_I2C_Init+0x1dc>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	0099      	lsls	r1, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	6809      	ldr	r1, [r1, #0]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800241e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6911      	ldr	r1, [r2, #16]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68d2      	ldr	r2, [r2, #12]
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	430b      	orrs	r3, r1
 8002432:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	000186a0 	.word	0x000186a0
 800248c:	001e847f 	.word	0x001e847f
 8002490:	003d08ff 	.word	0x003d08ff
 8002494:	431bde83 	.word	0x431bde83
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	4608      	mov	r0, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	817b      	strh	r3, [r7, #10]
 80024ae:	460b      	mov	r3, r1
 80024b0:	813b      	strh	r3, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b6:	f7ff fba3 	bl	8001c00 <HAL_GetTick>
 80024ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	f040 80d9 	bne.w	800267c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2319      	movs	r3, #25
 80024d0:	2201      	movs	r2, #1
 80024d2:	496d      	ldr	r1, [pc, #436]	; (8002688 <HAL_I2C_Mem_Write+0x1ec>)
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fcc1 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024e0:	2302      	movs	r3, #2
 80024e2:	e0cc      	b.n	800267e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_I2C_Mem_Write+0x56>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e0c5      	b.n	800267e <HAL_I2C_Mem_Write+0x1e2>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d007      	beq.n	8002518 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002526:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2221      	movs	r2, #33	; 0x21
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a4d      	ldr	r2, [pc, #308]	; (800268c <HAL_I2C_Mem_Write+0x1f0>)
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255a:	88f8      	ldrh	r0, [r7, #6]
 800255c:	893a      	ldrh	r2, [r7, #8]
 800255e:	8979      	ldrh	r1, [r7, #10]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	4603      	mov	r3, r0
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 faf8 	bl	8002b60 <I2C_RequestMemoryWrite>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d052      	beq.n	800261c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e081      	b.n	800267e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fd42 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b04      	cmp	r3, #4
 8002590:	d107      	bne.n	80025a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e06b      	b.n	800267e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d11b      	bne.n	800261c <HAL_I2C_Mem_Write+0x180>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1aa      	bne.n	800257a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fd2e 	bl	800308a <I2C_WaitOnBTFFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2b04      	cmp	r3, #4
 800263a:	d107      	bne.n	800264c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e016      	b.n	800267e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e000      	b.n	800267e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800267c:	2302      	movs	r3, #2
  }
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	00100002 	.word	0x00100002
 800268c:	ffff0000 	.word	0xffff0000

08002690 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	; 0x30
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	817b      	strh	r3, [r7, #10]
 80026a2:	460b      	mov	r3, r1
 80026a4:	813b      	strh	r3, [r7, #8]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ae:	f7ff faa7 	bl	8001c00 <HAL_GetTick>
 80026b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b20      	cmp	r3, #32
 80026be:	f040 8244 	bne.w	8002b4a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2319      	movs	r3, #25
 80026c8:	2201      	movs	r2, #1
 80026ca:	4982      	ldr	r1, [pc, #520]	; (80028d4 <HAL_I2C_Mem_Read+0x244>)
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fbc5 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
 80026da:	e237      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Mem_Read+0x5a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e230      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d007      	beq.n	8002710 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2222      	movs	r2, #34	; 0x22
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <HAL_I2C_Mem_Read+0x248>)
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002752:	88f8      	ldrh	r0, [r7, #6]
 8002754:	893a      	ldrh	r2, [r7, #8]
 8002756:	8979      	ldrh	r1, [r7, #10]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4603      	mov	r3, r0
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fa92 	bl	8002c8c <I2C_RequestMemoryRead>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1ec      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e1c0      	b.n	8002b24 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d11e      	bne.n	80027e8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ba:	b672      	cpsid	i
}
 80027bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027e4:	b662      	cpsie	i
}
 80027e6:	e035      	b.n	8002854 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d11e      	bne.n	800282e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
}
 8002802:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002828:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800282a:	b662      	cpsie	i
}
 800282c:	e012      	b.n	8002854 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800283c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002854:	e166      	b.n	8002b24 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b03      	cmp	r3, #3
 800285c:	f200 811f 	bhi.w	8002a9e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	2b01      	cmp	r3, #1
 8002866:	d123      	bne.n	80028b0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fc4d 	bl	800310c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e167      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ae:	e139      	b.n	8002b24 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d152      	bne.n	800295e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	2200      	movs	r2, #0
 80028c0:	4906      	ldr	r1, [pc, #24]	; (80028dc <HAL_I2C_Mem_Read+0x24c>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 faca 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e13c      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
 80028d2:	bf00      	nop
 80028d4:	00100002 	.word	0x00100002
 80028d8:	ffff0000 	.word	0xffff0000
 80028dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002926:	b662      	cpsie	i
}
 8002928:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800295c:	e0e2      	b.n	8002b24 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	2200      	movs	r2, #0
 8002966:	497b      	ldr	r1, [pc, #492]	; (8002b54 <HAL_I2C_Mem_Read+0x4c4>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fa77 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0e9      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002988:	b672      	cpsid	i
}
 800298a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029be:	4b66      	ldr	r3, [pc, #408]	; (8002b58 <HAL_I2C_Mem_Read+0x4c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	4a65      	ldr	r2, [pc, #404]	; (8002b5c <HAL_I2C_Mem_Read+0x4cc>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0a1a      	lsrs	r2, r3, #8
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00da      	lsls	r2, r3, #3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	3b01      	subs	r3, #1
 80029dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d118      	bne.n	8002a16 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a06:	b662      	cpsie	i
}
 8002a08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e09a      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d1d9      	bne.n	80029d8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a66:	b662      	cpsie	i
}
 8002a68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a9c:	e042      	b.n	8002b24 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fb32 	bl	800310c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e04c      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d118      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f ae94 	bne.w	8002856 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	00010004 	.word	0x00010004
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	14f8b589 	.word	0x14f8b589

08002b60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f960 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb0:	d103      	bne.n	8002bba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e05f      	b.n	8002c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	492d      	ldr	r1, [pc, #180]	; (8002c88 <I2C_RequestMemoryWrite+0x128>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f998 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e04c      	b.n	8002c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	6a39      	ldr	r1, [r7, #32]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fa02 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d107      	bne.n	8002c22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e02b      	b.n	8002c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c2c:	893b      	ldrh	r3, [r7, #8]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e021      	b.n	8002c7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c38:	893b      	ldrh	r3, [r7, #8]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f9dc 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d107      	bne.n	8002c6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e005      	b.n	8002c7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c72:	893b      	ldrh	r3, [r7, #8]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	00010002 	.word	0x00010002

08002c8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f8c2 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cec:	d103      	bne.n	8002cf6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0aa      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	6a3a      	ldr	r2, [r7, #32]
 8002d0e:	4952      	ldr	r1, [pc, #328]	; (8002e58 <I2C_RequestMemoryRead+0x1cc>)
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f8fa 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e097      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	6a39      	ldr	r1, [r7, #32]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f964 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d107      	bne.n	8002d5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e076      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d68:	893b      	ldrh	r3, [r7, #8]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	e021      	b.n	8002db8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f93e 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d107      	bne.n	8002daa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e050      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dae:	893b      	ldrh	r3, [r7, #8]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dba:	6a39      	ldr	r1, [r7, #32]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f923 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d107      	bne.n	8002de0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e035      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f82b 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1a:	d103      	bne.n	8002e24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e013      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e28:	897b      	ldrh	r3, [r7, #10]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	6a3a      	ldr	r2, [r7, #32]
 8002e3c:	4906      	ldr	r1, [pc, #24]	; (8002e58 <I2C_RequestMemoryRead+0x1cc>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f863 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	00010002 	.word	0x00010002

08002e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6c:	e025      	b.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d021      	beq.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7fe fec3 	bl	8001c00 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e023      	b.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10d      	bne.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	e00c      	b.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d0b6      	beq.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f18:	e051      	b.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d123      	bne.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e046      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d021      	beq.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe fe41 	bl	8001c00 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e020      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10c      	bne.n	8002fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	e00b      	b.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d18d      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003014:	e02d      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f8ce 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e02d      	b.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d021      	beq.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe fde7 	bl	8001c00 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d1ca      	bne.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003096:	e02d      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f88d 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e02d      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d021      	beq.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fe fda6 	bl	8001c00 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e007      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d1ca      	bne.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003118:	e042      	b.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d119      	bne.n	800315c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e029      	b.n	80031b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315c:	f7fe fd50 	bl	8001c00 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	d1b5      	bne.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d11b      	bne.n	8003208 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e272      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8087 	beq.w	8003342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003234:	4b92      	ldr	r3, [pc, #584]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b04      	cmp	r3, #4
 800323e:	d00c      	beq.n	800325a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003240:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d112      	bne.n	8003272 <HAL_RCC_OscConfig+0x5e>
 800324c:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d10b      	bne.n	8003272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325a:	4b89      	ldr	r3, [pc, #548]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d06c      	beq.n	8003340 <HAL_RCC_OscConfig+0x12c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d168      	bne.n	8003340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e24c      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x76>
 800327c:	4b80      	ldr	r3, [pc, #512]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a7f      	ldr	r2, [pc, #508]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e02e      	b.n	80032e8 <HAL_RCC_OscConfig+0xd4>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x98>
 8003292:	4b7b      	ldr	r3, [pc, #492]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7a      	ldr	r2, [pc, #488]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b78      	ldr	r3, [pc, #480]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a77      	ldr	r2, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e01d      	b.n	80032e8 <HAL_RCC_OscConfig+0xd4>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0xbc>
 80032b6:	4b72      	ldr	r3, [pc, #456]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a71      	ldr	r2, [pc, #452]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6e      	ldr	r2, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e00b      	b.n	80032e8 <HAL_RCC_OscConfig+0xd4>
 80032d0:	4b6b      	ldr	r3, [pc, #428]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6a      	ldr	r2, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b68      	ldr	r3, [pc, #416]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a67      	ldr	r2, [pc, #412]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d013      	beq.n	8003318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fc86 	bl	8001c00 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fe fc82 	bl	8001c00 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e200      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0xe4>
 8003316:	e014      	b.n	8003342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe fc72 	bl	8001c00 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003320:	f7fe fc6e 	bl	8001c00 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b64      	cmp	r3, #100	; 0x64
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1ec      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x10c>
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d063      	beq.n	8003416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334e:	4b4c      	ldr	r3, [pc, #304]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800335a:	4b49      	ldr	r3, [pc, #292]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b08      	cmp	r3, #8
 8003364:	d11c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x18c>
 8003366:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d116      	bne.n	80033a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_RCC_OscConfig+0x176>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d001      	beq.n	800338a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e1c0      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4939      	ldr	r1, [pc, #228]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	e03a      	b.n	8003416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d020      	beq.n	80033ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a8:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fe fc27 	bl	8001c00 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b6:	f7fe fc23 	bl	8001c00 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e1a1      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4927      	ldr	r1, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]
 80033e8:	e015      	b.n	8003416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <HAL_RCC_OscConfig+0x270>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe fc06 	bl	8001c00 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f8:	f7fe fc02 	bl	8001c00 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e180      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d03a      	beq.n	8003498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d019      	beq.n	800345e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003430:	f7fe fbe6 	bl	8001c00 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003438:	f7fe fbe2 	bl	8001c00 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e160      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_RCC_OscConfig+0x26c>)
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003456:	2001      	movs	r0, #1
 8003458:	f000 fac4 	bl	80039e4 <RCC_Delay>
 800345c:	e01c      	b.n	8003498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_OscConfig+0x274>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003464:	f7fe fbcc 	bl	8001c00 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346a:	e00f      	b.n	800348c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346c:	f7fe fbc8 	bl	8001c00 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d908      	bls.n	800348c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e146      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	42420000 	.word	0x42420000
 8003488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348c:	4b92      	ldr	r3, [pc, #584]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e9      	bne.n	800346c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a6 	beq.w	80035f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034aa:	4b8b      	ldr	r3, [pc, #556]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	4b88      	ldr	r3, [pc, #544]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4a87      	ldr	r2, [pc, #540]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c0:	61d3      	str	r3, [r2, #28]
 80034c2:	4b85      	ldr	r3, [pc, #532]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ce:	2301      	movs	r3, #1
 80034d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b82      	ldr	r3, [pc, #520]	; (80036dc <HAL_RCC_OscConfig+0x4c8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d118      	bne.n	8003510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034de:	4b7f      	ldr	r3, [pc, #508]	; (80036dc <HAL_RCC_OscConfig+0x4c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a7e      	ldr	r2, [pc, #504]	; (80036dc <HAL_RCC_OscConfig+0x4c8>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ea:	f7fe fb89 	bl	8001c00 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f2:	f7fe fb85 	bl	8001c00 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	; 0x64
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e103      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	4b75      	ldr	r3, [pc, #468]	; (80036dc <HAL_RCC_OscConfig+0x4c8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d106      	bne.n	8003526 <HAL_RCC_OscConfig+0x312>
 8003518:	4b6f      	ldr	r3, [pc, #444]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4a6e      	ldr	r2, [pc, #440]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6213      	str	r3, [r2, #32]
 8003524:	e02d      	b.n	8003582 <HAL_RCC_OscConfig+0x36e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x334>
 800352e:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a69      	ldr	r2, [pc, #420]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6213      	str	r3, [r2, #32]
 800353a:	4b67      	ldr	r3, [pc, #412]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	4a66      	ldr	r2, [pc, #408]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	6213      	str	r3, [r2, #32]
 8003546:	e01c      	b.n	8003582 <HAL_RCC_OscConfig+0x36e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b05      	cmp	r3, #5
 800354e:	d10c      	bne.n	800356a <HAL_RCC_OscConfig+0x356>
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	4b5e      	ldr	r3, [pc, #376]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a5d      	ldr	r2, [pc, #372]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	e00b      	b.n	8003582 <HAL_RCC_OscConfig+0x36e>
 800356a:	4b5b      	ldr	r3, [pc, #364]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a5a      	ldr	r2, [pc, #360]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	4b58      	ldr	r3, [pc, #352]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a57      	ldr	r2, [pc, #348]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d015      	beq.n	80035b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe fb39 	bl	8001c00 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fe fb35 	bl	8001c00 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e0b1      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ee      	beq.n	8003592 <HAL_RCC_OscConfig+0x37e>
 80035b4:	e014      	b.n	80035e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fb23 	bl	8001c00 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe fb1f 	bl	8001c00 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e09b      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d4:	4b40      	ldr	r3, [pc, #256]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ee      	bne.n	80035be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d105      	bne.n	80035f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e6:	4b3c      	ldr	r3, [pc, #240]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4a3b      	ldr	r2, [pc, #236]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8087 	beq.w	800370a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035fc:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d061      	beq.n	80036cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d146      	bne.n	800369e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003610:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fe faf3 	bl	8001c00 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361e:	f7fe faef 	bl	8001c00 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e06d      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003630:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f0      	bne.n	800361e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d108      	bne.n	8003658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4921      	ldr	r1, [pc, #132]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a19      	ldr	r1, [r3, #32]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	430b      	orrs	r3, r1
 800366a:	491b      	ldr	r1, [pc, #108]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fe fac3 	bl	8001c00 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367e:	f7fe fabf 	bl	8001c00 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e03d      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x46a>
 800369c:	e035      	b.n	800370a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fe faac 	bl	8001c00 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe faa8 	bl	8001c00 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e026      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x498>
 80036ca:	e01e      	b.n	800370a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e019      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40007000 	.word	0x40007000
 80036e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_RCC_OscConfig+0x500>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40021000 	.word	0x40021000

08003718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0d0      	b.n	80038ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800372c:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d910      	bls.n	800375c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b67      	ldr	r3, [pc, #412]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 0207 	bic.w	r2, r3, #7
 8003742:	4965      	ldr	r1, [pc, #404]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800377e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d040      	beq.n	8003838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d115      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	4b41      	ldr	r3, [pc, #260]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e073      	b.n	80038ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e06b      	b.n	80038ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4b39      	ldr	r3, [pc, #228]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4936      	ldr	r1, [pc, #216]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003808:	f7fe f9fa 	bl	8001c00 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	e00a      	b.n	8003826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003810:	f7fe f9f6 	bl	8001c00 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	; 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e053      	b.n	80038ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 020c 	and.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	429a      	cmp	r2, r3
 8003836:	d1eb      	bne.n	8003810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d210      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 0207 	bic.w	r2, r3, #7
 800384e:	4922      	ldr	r1, [pc, #136]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 f821 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1c8>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1cc>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1d0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe f958 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40022000 	.word	0x40022000
 80038dc:	40021000 	.word	0x40021000
 80038e0:	080070bc 	.word	0x080070bc
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	b490      	push	{r4, r7}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038f2:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCC_GetSysClockFreq+0xac>)
 80038f4:	1d3c      	adds	r4, r7, #4
 80038f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038fc:	f240 2301 	movw	r3, #513	; 0x201
 8003900:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b04      	cmp	r3, #4
 8003924:	d002      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x40>
 8003926:	2b08      	cmp	r3, #8
 8003928:	d003      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x46>
 800392a:	e02b      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800392c:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800392e:	623b      	str	r3, [r7, #32]
      break;
 8003930:	e02b      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	0c9b      	lsrs	r3, r3, #18
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3328      	adds	r3, #40	; 0x28
 800393c:	443b      	add	r3, r7
 800393e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003942:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d012      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	0c5b      	lsrs	r3, r3, #17
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	3328      	adds	r3, #40	; 0x28
 800395a:	443b      	add	r3, r7
 800395c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003966:	fb03 f202 	mul.w	r2, r3, r2
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	e004      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003978:	fb02 f303 	mul.w	r3, r2, r3
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	623b      	str	r3, [r7, #32]
      break;
 8003982:	e002      	b.n	800398a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003986:	623b      	str	r3, [r7, #32]
      break;
 8003988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398a:	6a3b      	ldr	r3, [r7, #32]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3728      	adds	r7, #40	; 0x28
 8003990:	46bd      	mov	sp, r7
 8003992:	bc90      	pop	{r4, r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	08006abc 	.word	0x08006abc
 800399c:	40021000 	.word	0x40021000
 80039a0:	007a1200 	.word	0x007a1200
 80039a4:	003d0900 	.word	0x003d0900

080039a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ac:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	20000000 	.word	0x20000000

080039bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039c0:	f7ff fff2 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4903      	ldr	r1, [pc, #12]	; (80039e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	080070cc 	.word	0x080070cc

080039e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <RCC_Delay+0x34>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <RCC_Delay+0x38>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0a5b      	lsrs	r3, r3, #9
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a00:	bf00      	nop
  }
  while (Delay --);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1e5a      	subs	r2, r3, #1
 8003a06:	60fa      	str	r2, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f9      	bne.n	8003a00 <RCC_Delay+0x1c>
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	10624dd3 	.word	0x10624dd3

08003a20 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <HAL_SRAM_Init+0x1c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3a:	d101      	bne.n	8003a40 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e038      	b.n	8003ab2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7fd ff55 	bl	8001904 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3308      	adds	r3, #8
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f000 f829 	bl	8003abc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	f000 f88b 	bl	8003b90 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6858      	ldr	r0, [r3, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	f000 f8b6 	bl	8003bf8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	6892      	ldr	r2, [r2, #8]
 8003a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	6892      	ldr	r2, [r2, #8]
 8003aa0:	f041 0101 	orr.w	r1, r1, #1
 8003aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	f023 0101 	bic.w	r1, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d102      	bne.n	8003aec <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003ae6:	2340      	movs	r3, #64	; 0x40
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e001      	b.n	8003af0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003afc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003b02:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003b08:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003b0e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003b14:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003b1a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003b20:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003b26:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003b2c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <FSMC_NORSRAM_Init+0xd0>)
 8003b4c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b54:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003b5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	ea02 0103 	and.w	r1, r2, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4319      	orrs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	0008fb7f 	.word	0x0008fb7f

08003b90 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	051b      	lsls	r3, r3, #20
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	3b02      	subs	r3, #2
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	3201      	adds	r2, #1
 8003be4:	4319      	orrs	r1, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0c:	d11d      	bne.n	8003c4a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	6811      	ldr	r1, [r2, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	6852      	ldr	r2, [r2, #4]
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	4311      	orrs	r1, r2
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	6892      	ldr	r2, [r2, #8]
 8003c2a:	0212      	lsls	r2, r2, #8
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	6992      	ldr	r2, [r2, #24]
 8003c32:	4311      	orrs	r1, r2
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	68d2      	ldr	r2, [r2, #12]
 8003c38:	0412      	lsls	r2, r2, #16
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	ea43 0102 	orr.w	r1, r3, r2
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003c48:	e005      	b.n	8003c56 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	cff00000 	.word	0xcff00000

08003c68 <__errno>:
 8003c68:	4b01      	ldr	r3, [pc, #4]	; (8003c70 <__errno+0x8>)
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000000c 	.word	0x2000000c

08003c74 <__libc_init_array>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	2600      	movs	r6, #0
 8003c78:	4d0c      	ldr	r5, [pc, #48]	; (8003cac <__libc_init_array+0x38>)
 8003c7a:	4c0d      	ldr	r4, [pc, #52]	; (8003cb0 <__libc_init_array+0x3c>)
 8003c7c:	1b64      	subs	r4, r4, r5
 8003c7e:	10a4      	asrs	r4, r4, #2
 8003c80:	42a6      	cmp	r6, r4
 8003c82:	d109      	bne.n	8003c98 <__libc_init_array+0x24>
 8003c84:	f002 fefc 	bl	8006a80 <_init>
 8003c88:	2600      	movs	r6, #0
 8003c8a:	4d0a      	ldr	r5, [pc, #40]	; (8003cb4 <__libc_init_array+0x40>)
 8003c8c:	4c0a      	ldr	r4, [pc, #40]	; (8003cb8 <__libc_init_array+0x44>)
 8003c8e:	1b64      	subs	r4, r4, r5
 8003c90:	10a4      	asrs	r4, r4, #2
 8003c92:	42a6      	cmp	r6, r4
 8003c94:	d105      	bne.n	8003ca2 <__libc_init_array+0x2e>
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
 8003c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9c:	4798      	blx	r3
 8003c9e:	3601      	adds	r6, #1
 8003ca0:	e7ee      	b.n	8003c80 <__libc_init_array+0xc>
 8003ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca6:	4798      	blx	r3
 8003ca8:	3601      	adds	r6, #1
 8003caa:	e7f2      	b.n	8003c92 <__libc_init_array+0x1e>
 8003cac:	080074ac 	.word	0x080074ac
 8003cb0:	080074ac 	.word	0x080074ac
 8003cb4:	080074ac 	.word	0x080074ac
 8003cb8:	080074b0 	.word	0x080074b0

08003cbc <memset>:
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4402      	add	r2, r0
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d100      	bne.n	8003cc6 <memset+0xa>
 8003cc4:	4770      	bx	lr
 8003cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cca:	e7f9      	b.n	8003cc0 <memset+0x4>

08003ccc <__cvt>:
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd2:	461f      	mov	r7, r3
 8003cd4:	bfbb      	ittet	lt
 8003cd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003cda:	461f      	movlt	r7, r3
 8003cdc:	2300      	movge	r3, #0
 8003cde:	232d      	movlt	r3, #45	; 0x2d
 8003ce0:	b088      	sub	sp, #32
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ce6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003ce8:	7013      	strb	r3, [r2, #0]
 8003cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003cf0:	f023 0820 	bic.w	r8, r3, #32
 8003cf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cf8:	d005      	beq.n	8003d06 <__cvt+0x3a>
 8003cfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cfe:	d100      	bne.n	8003d02 <__cvt+0x36>
 8003d00:	3501      	adds	r5, #1
 8003d02:	2302      	movs	r3, #2
 8003d04:	e000      	b.n	8003d08 <__cvt+0x3c>
 8003d06:	2303      	movs	r3, #3
 8003d08:	aa07      	add	r2, sp, #28
 8003d0a:	9204      	str	r2, [sp, #16]
 8003d0c:	aa06      	add	r2, sp, #24
 8003d0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d12:	e9cd 3500 	strd	r3, r5, [sp]
 8003d16:	4622      	mov	r2, r4
 8003d18:	463b      	mov	r3, r7
 8003d1a:	f000 fce5 	bl	80046e8 <_dtoa_r>
 8003d1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d22:	4606      	mov	r6, r0
 8003d24:	d102      	bne.n	8003d2c <__cvt+0x60>
 8003d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d28:	07db      	lsls	r3, r3, #31
 8003d2a:	d522      	bpl.n	8003d72 <__cvt+0xa6>
 8003d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d30:	eb06 0905 	add.w	r9, r6, r5
 8003d34:	d110      	bne.n	8003d58 <__cvt+0x8c>
 8003d36:	7833      	ldrb	r3, [r6, #0]
 8003d38:	2b30      	cmp	r3, #48	; 0x30
 8003d3a:	d10a      	bne.n	8003d52 <__cvt+0x86>
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2300      	movs	r3, #0
 8003d40:	4620      	mov	r0, r4
 8003d42:	4639      	mov	r1, r7
 8003d44:	f7fc fe9c 	bl	8000a80 <__aeabi_dcmpeq>
 8003d48:	b918      	cbnz	r0, 8003d52 <__cvt+0x86>
 8003d4a:	f1c5 0501 	rsb	r5, r5, #1
 8003d4e:	f8ca 5000 	str.w	r5, [sl]
 8003d52:	f8da 3000 	ldr.w	r3, [sl]
 8003d56:	4499      	add	r9, r3
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	4639      	mov	r1, r7
 8003d60:	f7fc fe8e 	bl	8000a80 <__aeabi_dcmpeq>
 8003d64:	b108      	cbz	r0, 8003d6a <__cvt+0x9e>
 8003d66:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d6a:	2230      	movs	r2, #48	; 0x30
 8003d6c:	9b07      	ldr	r3, [sp, #28]
 8003d6e:	454b      	cmp	r3, r9
 8003d70:	d307      	bcc.n	8003d82 <__cvt+0xb6>
 8003d72:	4630      	mov	r0, r6
 8003d74:	9b07      	ldr	r3, [sp, #28]
 8003d76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d78:	1b9b      	subs	r3, r3, r6
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	b008      	add	sp, #32
 8003d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d82:	1c59      	adds	r1, r3, #1
 8003d84:	9107      	str	r1, [sp, #28]
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e7f0      	b.n	8003d6c <__cvt+0xa0>

08003d8a <__exponent>:
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d8e:	2900      	cmp	r1, #0
 8003d90:	f803 2b02 	strb.w	r2, [r3], #2
 8003d94:	bfb6      	itet	lt
 8003d96:	222d      	movlt	r2, #45	; 0x2d
 8003d98:	222b      	movge	r2, #43	; 0x2b
 8003d9a:	4249      	neglt	r1, r1
 8003d9c:	2909      	cmp	r1, #9
 8003d9e:	7042      	strb	r2, [r0, #1]
 8003da0:	dd2b      	ble.n	8003dfa <__exponent+0x70>
 8003da2:	f10d 0407 	add.w	r4, sp, #7
 8003da6:	46a4      	mov	ip, r4
 8003da8:	270a      	movs	r7, #10
 8003daa:	fb91 f6f7 	sdiv	r6, r1, r7
 8003dae:	460a      	mov	r2, r1
 8003db0:	46a6      	mov	lr, r4
 8003db2:	fb07 1516 	mls	r5, r7, r6, r1
 8003db6:	2a63      	cmp	r2, #99	; 0x63
 8003db8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003dbc:	4631      	mov	r1, r6
 8003dbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8003dc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003dc6:	dcf0      	bgt.n	8003daa <__exponent+0x20>
 8003dc8:	3130      	adds	r1, #48	; 0x30
 8003dca:	f1ae 0502 	sub.w	r5, lr, #2
 8003dce:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	1c44      	adds	r4, r0, #1
 8003dd6:	4561      	cmp	r1, ip
 8003dd8:	d30a      	bcc.n	8003df0 <__exponent+0x66>
 8003dda:	f10d 0209 	add.w	r2, sp, #9
 8003dde:	eba2 020e 	sub.w	r2, r2, lr
 8003de2:	4565      	cmp	r5, ip
 8003de4:	bf88      	it	hi
 8003de6:	2200      	movhi	r2, #0
 8003de8:	4413      	add	r3, r2
 8003dea:	1a18      	subs	r0, r3, r0
 8003dec:	b003      	add	sp, #12
 8003dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003df4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003df8:	e7ed      	b.n	8003dd6 <__exponent+0x4c>
 8003dfa:	2330      	movs	r3, #48	; 0x30
 8003dfc:	3130      	adds	r1, #48	; 0x30
 8003dfe:	7083      	strb	r3, [r0, #2]
 8003e00:	70c1      	strb	r1, [r0, #3]
 8003e02:	1d03      	adds	r3, r0, #4
 8003e04:	e7f1      	b.n	8003dea <__exponent+0x60>
	...

08003e08 <_printf_float>:
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	b091      	sub	sp, #68	; 0x44
 8003e0e:	460c      	mov	r4, r1
 8003e10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003e14:	4616      	mov	r6, r2
 8003e16:	461f      	mov	r7, r3
 8003e18:	4605      	mov	r5, r0
 8003e1a:	f001 fa53 	bl	80052c4 <_localeconv_r>
 8003e1e:	6803      	ldr	r3, [r0, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	9309      	str	r3, [sp, #36]	; 0x24
 8003e24:	f7fc fa00 	bl	8000228 <strlen>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8003e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e30:	900a      	str	r0, [sp, #40]	; 0x28
 8003e32:	3307      	adds	r3, #7
 8003e34:	f023 0307 	bic.w	r3, r3, #7
 8003e38:	f103 0208 	add.w	r2, r3, #8
 8003e3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003e40:	f8d4 b000 	ldr.w	fp, [r4]
 8003e44:	f8c8 2000 	str.w	r2, [r8]
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e50:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003e54:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5e:	4640      	mov	r0, r8
 8003e60:	4b9c      	ldr	r3, [pc, #624]	; (80040d4 <_printf_float+0x2cc>)
 8003e62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e64:	f7fc fe3e 	bl	8000ae4 <__aeabi_dcmpun>
 8003e68:	bb70      	cbnz	r0, 8003ec8 <_printf_float+0xc0>
 8003e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6e:	4640      	mov	r0, r8
 8003e70:	4b98      	ldr	r3, [pc, #608]	; (80040d4 <_printf_float+0x2cc>)
 8003e72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e74:	f7fc fe18 	bl	8000aa8 <__aeabi_dcmple>
 8003e78:	bb30      	cbnz	r0, 8003ec8 <_printf_float+0xc0>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4640      	mov	r0, r8
 8003e80:	4651      	mov	r1, sl
 8003e82:	f7fc fe07 	bl	8000a94 <__aeabi_dcmplt>
 8003e86:	b110      	cbz	r0, 8003e8e <_printf_float+0x86>
 8003e88:	232d      	movs	r3, #45	; 0x2d
 8003e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e8e:	4b92      	ldr	r3, [pc, #584]	; (80040d8 <_printf_float+0x2d0>)
 8003e90:	4892      	ldr	r0, [pc, #584]	; (80040dc <_printf_float+0x2d4>)
 8003e92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003e96:	bf94      	ite	ls
 8003e98:	4698      	movls	r8, r3
 8003e9a:	4680      	movhi	r8, r0
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	f04f 0a00 	mov.w	sl, #0
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	f02b 0304 	bic.w	r3, fp, #4
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	4633      	mov	r3, r6
 8003eac:	4621      	mov	r1, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	9700      	str	r7, [sp, #0]
 8003eb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8003eb4:	f000 f9d4 	bl	8004260 <_printf_common>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	f040 8090 	bne.w	8003fde <_printf_float+0x1d6>
 8003ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec2:	b011      	add	sp, #68	; 0x44
 8003ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec8:	4642      	mov	r2, r8
 8003eca:	4653      	mov	r3, sl
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4651      	mov	r1, sl
 8003ed0:	f7fc fe08 	bl	8000ae4 <__aeabi_dcmpun>
 8003ed4:	b148      	cbz	r0, 8003eea <_printf_float+0xe2>
 8003ed6:	f1ba 0f00 	cmp.w	sl, #0
 8003eda:	bfb8      	it	lt
 8003edc:	232d      	movlt	r3, #45	; 0x2d
 8003ede:	4880      	ldr	r0, [pc, #512]	; (80040e0 <_printf_float+0x2d8>)
 8003ee0:	bfb8      	it	lt
 8003ee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ee6:	4b7f      	ldr	r3, [pc, #508]	; (80040e4 <_printf_float+0x2dc>)
 8003ee8:	e7d3      	b.n	8003e92 <_printf_float+0x8a>
 8003eea:	6863      	ldr	r3, [r4, #4]
 8003eec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	d142      	bne.n	8003f7a <_printf_float+0x172>
 8003ef4:	2306      	movs	r3, #6
 8003ef6:	6063      	str	r3, [r4, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	9206      	str	r2, [sp, #24]
 8003efc:	aa0e      	add	r2, sp, #56	; 0x38
 8003efe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003f02:	aa0d      	add	r2, sp, #52	; 0x34
 8003f04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003f08:	9203      	str	r2, [sp, #12]
 8003f0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003f0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	6863      	ldr	r3, [r4, #4]
 8003f16:	4642      	mov	r2, r8
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	4653      	mov	r3, sl
 8003f1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003f20:	f7ff fed4 	bl	8003ccc <__cvt>
 8003f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f26:	4680      	mov	r8, r0
 8003f28:	2947      	cmp	r1, #71	; 0x47
 8003f2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f2c:	d108      	bne.n	8003f40 <_printf_float+0x138>
 8003f2e:	1cc8      	adds	r0, r1, #3
 8003f30:	db02      	blt.n	8003f38 <_printf_float+0x130>
 8003f32:	6863      	ldr	r3, [r4, #4]
 8003f34:	4299      	cmp	r1, r3
 8003f36:	dd40      	ble.n	8003fba <_printf_float+0x1b2>
 8003f38:	f1a9 0902 	sub.w	r9, r9, #2
 8003f3c:	fa5f f989 	uxtb.w	r9, r9
 8003f40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f44:	d81f      	bhi.n	8003f86 <_printf_float+0x17e>
 8003f46:	464a      	mov	r2, r9
 8003f48:	3901      	subs	r1, #1
 8003f4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f4e:	910d      	str	r1, [sp, #52]	; 0x34
 8003f50:	f7ff ff1b 	bl	8003d8a <__exponent>
 8003f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f56:	4682      	mov	sl, r0
 8003f58:	1813      	adds	r3, r2, r0
 8003f5a:	2a01      	cmp	r2, #1
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	dc02      	bgt.n	8003f66 <_printf_float+0x15e>
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	07d2      	lsls	r2, r2, #31
 8003f64:	d501      	bpl.n	8003f6a <_printf_float+0x162>
 8003f66:	3301      	adds	r3, #1
 8003f68:	6123      	str	r3, [r4, #16]
 8003f6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d09b      	beq.n	8003eaa <_printf_float+0xa2>
 8003f72:	232d      	movs	r3, #45	; 0x2d
 8003f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f78:	e797      	b.n	8003eaa <_printf_float+0xa2>
 8003f7a:	2947      	cmp	r1, #71	; 0x47
 8003f7c:	d1bc      	bne.n	8003ef8 <_printf_float+0xf0>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ba      	bne.n	8003ef8 <_printf_float+0xf0>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e7b7      	b.n	8003ef6 <_printf_float+0xee>
 8003f86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003f8a:	d118      	bne.n	8003fbe <_printf_float+0x1b6>
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	dd0b      	ble.n	8003faa <_printf_float+0x1a2>
 8003f92:	6121      	str	r1, [r4, #16]
 8003f94:	b913      	cbnz	r3, 8003f9c <_printf_float+0x194>
 8003f96:	6822      	ldr	r2, [r4, #0]
 8003f98:	07d0      	lsls	r0, r2, #31
 8003f9a:	d502      	bpl.n	8003fa2 <_printf_float+0x19a>
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	440b      	add	r3, r1
 8003fa0:	6123      	str	r3, [r4, #16]
 8003fa2:	f04f 0a00 	mov.w	sl, #0
 8003fa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003fa8:	e7df      	b.n	8003f6a <_printf_float+0x162>
 8003faa:	b913      	cbnz	r3, 8003fb2 <_printf_float+0x1aa>
 8003fac:	6822      	ldr	r2, [r4, #0]
 8003fae:	07d2      	lsls	r2, r2, #31
 8003fb0:	d501      	bpl.n	8003fb6 <_printf_float+0x1ae>
 8003fb2:	3302      	adds	r3, #2
 8003fb4:	e7f4      	b.n	8003fa0 <_printf_float+0x198>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e7f2      	b.n	8003fa0 <_printf_float+0x198>
 8003fba:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fc0:	4299      	cmp	r1, r3
 8003fc2:	db05      	blt.n	8003fd0 <_printf_float+0x1c8>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	6121      	str	r1, [r4, #16]
 8003fc8:	07d8      	lsls	r0, r3, #31
 8003fca:	d5ea      	bpl.n	8003fa2 <_printf_float+0x19a>
 8003fcc:	1c4b      	adds	r3, r1, #1
 8003fce:	e7e7      	b.n	8003fa0 <_printf_float+0x198>
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	bfcc      	ite	gt
 8003fd4:	2201      	movgt	r2, #1
 8003fd6:	f1c1 0202 	rsble	r2, r1, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	e7e0      	b.n	8003fa0 <_printf_float+0x198>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	055a      	lsls	r2, r3, #21
 8003fe2:	d407      	bmi.n	8003ff4 <_printf_float+0x1ec>
 8003fe4:	6923      	ldr	r3, [r4, #16]
 8003fe6:	4642      	mov	r2, r8
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4628      	mov	r0, r5
 8003fec:	47b8      	blx	r7
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d12b      	bne.n	800404a <_printf_float+0x242>
 8003ff2:	e764      	b.n	8003ebe <_printf_float+0xb6>
 8003ff4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ff8:	f240 80dd 	bls.w	80041b6 <_printf_float+0x3ae>
 8003ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004000:	2200      	movs	r2, #0
 8004002:	2300      	movs	r3, #0
 8004004:	f7fc fd3c 	bl	8000a80 <__aeabi_dcmpeq>
 8004008:	2800      	cmp	r0, #0
 800400a:	d033      	beq.n	8004074 <_printf_float+0x26c>
 800400c:	2301      	movs	r3, #1
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	4a35      	ldr	r2, [pc, #212]	; (80040e8 <_printf_float+0x2e0>)
 8004014:	47b8      	blx	r7
 8004016:	3001      	adds	r0, #1
 8004018:	f43f af51 	beq.w	8003ebe <_printf_float+0xb6>
 800401c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004020:	429a      	cmp	r2, r3
 8004022:	db02      	blt.n	800402a <_printf_float+0x222>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	07d8      	lsls	r0, r3, #31
 8004028:	d50f      	bpl.n	800404a <_printf_float+0x242>
 800402a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800402e:	4631      	mov	r1, r6
 8004030:	4628      	mov	r0, r5
 8004032:	47b8      	blx	r7
 8004034:	3001      	adds	r0, #1
 8004036:	f43f af42 	beq.w	8003ebe <_printf_float+0xb6>
 800403a:	f04f 0800 	mov.w	r8, #0
 800403e:	f104 091a 	add.w	r9, r4, #26
 8004042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004044:	3b01      	subs	r3, #1
 8004046:	4543      	cmp	r3, r8
 8004048:	dc09      	bgt.n	800405e <_printf_float+0x256>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	079b      	lsls	r3, r3, #30
 800404e:	f100 8102 	bmi.w	8004256 <_printf_float+0x44e>
 8004052:	68e0      	ldr	r0, [r4, #12]
 8004054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004056:	4298      	cmp	r0, r3
 8004058:	bfb8      	it	lt
 800405a:	4618      	movlt	r0, r3
 800405c:	e731      	b.n	8003ec2 <_printf_float+0xba>
 800405e:	2301      	movs	r3, #1
 8004060:	464a      	mov	r2, r9
 8004062:	4631      	mov	r1, r6
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	f43f af28 	beq.w	8003ebe <_printf_float+0xb6>
 800406e:	f108 0801 	add.w	r8, r8, #1
 8004072:	e7e6      	b.n	8004042 <_printf_float+0x23a>
 8004074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004076:	2b00      	cmp	r3, #0
 8004078:	dc38      	bgt.n	80040ec <_printf_float+0x2e4>
 800407a:	2301      	movs	r3, #1
 800407c:	4631      	mov	r1, r6
 800407e:	4628      	mov	r0, r5
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <_printf_float+0x2e0>)
 8004082:	47b8      	blx	r7
 8004084:	3001      	adds	r0, #1
 8004086:	f43f af1a 	beq.w	8003ebe <_printf_float+0xb6>
 800408a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800408e:	4313      	orrs	r3, r2
 8004090:	d102      	bne.n	8004098 <_printf_float+0x290>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	07d9      	lsls	r1, r3, #31
 8004096:	d5d8      	bpl.n	800404a <_printf_float+0x242>
 8004098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	47b8      	blx	r7
 80040a2:	3001      	adds	r0, #1
 80040a4:	f43f af0b 	beq.w	8003ebe <_printf_float+0xb6>
 80040a8:	f04f 0900 	mov.w	r9, #0
 80040ac:	f104 0a1a 	add.w	sl, r4, #26
 80040b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040b2:	425b      	negs	r3, r3
 80040b4:	454b      	cmp	r3, r9
 80040b6:	dc01      	bgt.n	80040bc <_printf_float+0x2b4>
 80040b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040ba:	e794      	b.n	8003fe6 <_printf_float+0x1de>
 80040bc:	2301      	movs	r3, #1
 80040be:	4652      	mov	r2, sl
 80040c0:	4631      	mov	r1, r6
 80040c2:	4628      	mov	r0, r5
 80040c4:	47b8      	blx	r7
 80040c6:	3001      	adds	r0, #1
 80040c8:	f43f aef9 	beq.w	8003ebe <_printf_float+0xb6>
 80040cc:	f109 0901 	add.w	r9, r9, #1
 80040d0:	e7ee      	b.n	80040b0 <_printf_float+0x2a8>
 80040d2:	bf00      	nop
 80040d4:	7fefffff 	.word	0x7fefffff
 80040d8:	080070d8 	.word	0x080070d8
 80040dc:	080070dc 	.word	0x080070dc
 80040e0:	080070e4 	.word	0x080070e4
 80040e4:	080070e0 	.word	0x080070e0
 80040e8:	080070e8 	.word	0x080070e8
 80040ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040f0:	429a      	cmp	r2, r3
 80040f2:	bfa8      	it	ge
 80040f4:	461a      	movge	r2, r3
 80040f6:	2a00      	cmp	r2, #0
 80040f8:	4691      	mov	r9, r2
 80040fa:	dc37      	bgt.n	800416c <_printf_float+0x364>
 80040fc:	f04f 0b00 	mov.w	fp, #0
 8004100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004104:	f104 021a 	add.w	r2, r4, #26
 8004108:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800410c:	ebaa 0309 	sub.w	r3, sl, r9
 8004110:	455b      	cmp	r3, fp
 8004112:	dc33      	bgt.n	800417c <_printf_float+0x374>
 8004114:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004118:	429a      	cmp	r2, r3
 800411a:	db3b      	blt.n	8004194 <_printf_float+0x38c>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	07da      	lsls	r2, r3, #31
 8004120:	d438      	bmi.n	8004194 <_printf_float+0x38c>
 8004122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004124:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004126:	eba3 020a 	sub.w	r2, r3, sl
 800412a:	eba3 0901 	sub.w	r9, r3, r1
 800412e:	4591      	cmp	r9, r2
 8004130:	bfa8      	it	ge
 8004132:	4691      	movge	r9, r2
 8004134:	f1b9 0f00 	cmp.w	r9, #0
 8004138:	dc34      	bgt.n	80041a4 <_printf_float+0x39c>
 800413a:	f04f 0800 	mov.w	r8, #0
 800413e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004142:	f104 0a1a 	add.w	sl, r4, #26
 8004146:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	eba3 0309 	sub.w	r3, r3, r9
 8004150:	4543      	cmp	r3, r8
 8004152:	f77f af7a 	ble.w	800404a <_printf_float+0x242>
 8004156:	2301      	movs	r3, #1
 8004158:	4652      	mov	r2, sl
 800415a:	4631      	mov	r1, r6
 800415c:	4628      	mov	r0, r5
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	f43f aeac 	beq.w	8003ebe <_printf_float+0xb6>
 8004166:	f108 0801 	add.w	r8, r8, #1
 800416a:	e7ec      	b.n	8004146 <_printf_float+0x33e>
 800416c:	4613      	mov	r3, r2
 800416e:	4631      	mov	r1, r6
 8004170:	4642      	mov	r2, r8
 8004172:	4628      	mov	r0, r5
 8004174:	47b8      	blx	r7
 8004176:	3001      	adds	r0, #1
 8004178:	d1c0      	bne.n	80040fc <_printf_float+0x2f4>
 800417a:	e6a0      	b.n	8003ebe <_printf_float+0xb6>
 800417c:	2301      	movs	r3, #1
 800417e:	4631      	mov	r1, r6
 8004180:	4628      	mov	r0, r5
 8004182:	920b      	str	r2, [sp, #44]	; 0x2c
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	f43f ae99 	beq.w	8003ebe <_printf_float+0xb6>
 800418c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800418e:	f10b 0b01 	add.w	fp, fp, #1
 8004192:	e7b9      	b.n	8004108 <_printf_float+0x300>
 8004194:	4631      	mov	r1, r6
 8004196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800419a:	4628      	mov	r0, r5
 800419c:	47b8      	blx	r7
 800419e:	3001      	adds	r0, #1
 80041a0:	d1bf      	bne.n	8004122 <_printf_float+0x31a>
 80041a2:	e68c      	b.n	8003ebe <_printf_float+0xb6>
 80041a4:	464b      	mov	r3, r9
 80041a6:	4631      	mov	r1, r6
 80041a8:	4628      	mov	r0, r5
 80041aa:	eb08 020a 	add.w	r2, r8, sl
 80041ae:	47b8      	blx	r7
 80041b0:	3001      	adds	r0, #1
 80041b2:	d1c2      	bne.n	800413a <_printf_float+0x332>
 80041b4:	e683      	b.n	8003ebe <_printf_float+0xb6>
 80041b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041b8:	2a01      	cmp	r2, #1
 80041ba:	dc01      	bgt.n	80041c0 <_printf_float+0x3b8>
 80041bc:	07db      	lsls	r3, r3, #31
 80041be:	d537      	bpl.n	8004230 <_printf_float+0x428>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4642      	mov	r2, r8
 80041c4:	4631      	mov	r1, r6
 80041c6:	4628      	mov	r0, r5
 80041c8:	47b8      	blx	r7
 80041ca:	3001      	adds	r0, #1
 80041cc:	f43f ae77 	beq.w	8003ebe <_printf_float+0xb6>
 80041d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041d4:	4631      	mov	r1, r6
 80041d6:	4628      	mov	r0, r5
 80041d8:	47b8      	blx	r7
 80041da:	3001      	adds	r0, #1
 80041dc:	f43f ae6f 	beq.w	8003ebe <_printf_float+0xb6>
 80041e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041e4:	2200      	movs	r2, #0
 80041e6:	2300      	movs	r3, #0
 80041e8:	f7fc fc4a 	bl	8000a80 <__aeabi_dcmpeq>
 80041ec:	b9d8      	cbnz	r0, 8004226 <_printf_float+0x41e>
 80041ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041f0:	f108 0201 	add.w	r2, r8, #1
 80041f4:	3b01      	subs	r3, #1
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	d10e      	bne.n	800421e <_printf_float+0x416>
 8004200:	e65d      	b.n	8003ebe <_printf_float+0xb6>
 8004202:	2301      	movs	r3, #1
 8004204:	464a      	mov	r2, r9
 8004206:	4631      	mov	r1, r6
 8004208:	4628      	mov	r0, r5
 800420a:	47b8      	blx	r7
 800420c:	3001      	adds	r0, #1
 800420e:	f43f ae56 	beq.w	8003ebe <_printf_float+0xb6>
 8004212:	f108 0801 	add.w	r8, r8, #1
 8004216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004218:	3b01      	subs	r3, #1
 800421a:	4543      	cmp	r3, r8
 800421c:	dcf1      	bgt.n	8004202 <_printf_float+0x3fa>
 800421e:	4653      	mov	r3, sl
 8004220:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004224:	e6e0      	b.n	8003fe8 <_printf_float+0x1e0>
 8004226:	f04f 0800 	mov.w	r8, #0
 800422a:	f104 091a 	add.w	r9, r4, #26
 800422e:	e7f2      	b.n	8004216 <_printf_float+0x40e>
 8004230:	2301      	movs	r3, #1
 8004232:	4642      	mov	r2, r8
 8004234:	e7df      	b.n	80041f6 <_printf_float+0x3ee>
 8004236:	2301      	movs	r3, #1
 8004238:	464a      	mov	r2, r9
 800423a:	4631      	mov	r1, r6
 800423c:	4628      	mov	r0, r5
 800423e:	47b8      	blx	r7
 8004240:	3001      	adds	r0, #1
 8004242:	f43f ae3c 	beq.w	8003ebe <_printf_float+0xb6>
 8004246:	f108 0801 	add.w	r8, r8, #1
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800424e:	1a5b      	subs	r3, r3, r1
 8004250:	4543      	cmp	r3, r8
 8004252:	dcf0      	bgt.n	8004236 <_printf_float+0x42e>
 8004254:	e6fd      	b.n	8004052 <_printf_float+0x24a>
 8004256:	f04f 0800 	mov.w	r8, #0
 800425a:	f104 0919 	add.w	r9, r4, #25
 800425e:	e7f4      	b.n	800424a <_printf_float+0x442>

08004260 <_printf_common>:
 8004260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004264:	4616      	mov	r6, r2
 8004266:	4699      	mov	r9, r3
 8004268:	688a      	ldr	r2, [r1, #8]
 800426a:	690b      	ldr	r3, [r1, #16]
 800426c:	4607      	mov	r7, r0
 800426e:	4293      	cmp	r3, r2
 8004270:	bfb8      	it	lt
 8004272:	4613      	movlt	r3, r2
 8004274:	6033      	str	r3, [r6, #0]
 8004276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800427a:	460c      	mov	r4, r1
 800427c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004280:	b10a      	cbz	r2, 8004286 <_printf_common+0x26>
 8004282:	3301      	adds	r3, #1
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	0699      	lsls	r1, r3, #26
 800428a:	bf42      	ittt	mi
 800428c:	6833      	ldrmi	r3, [r6, #0]
 800428e:	3302      	addmi	r3, #2
 8004290:	6033      	strmi	r3, [r6, #0]
 8004292:	6825      	ldr	r5, [r4, #0]
 8004294:	f015 0506 	ands.w	r5, r5, #6
 8004298:	d106      	bne.n	80042a8 <_printf_common+0x48>
 800429a:	f104 0a19 	add.w	sl, r4, #25
 800429e:	68e3      	ldr	r3, [r4, #12]
 80042a0:	6832      	ldr	r2, [r6, #0]
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	42ab      	cmp	r3, r5
 80042a6:	dc28      	bgt.n	80042fa <_printf_common+0x9a>
 80042a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042ac:	1e13      	subs	r3, r2, #0
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	bf18      	it	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	0692      	lsls	r2, r2, #26
 80042b6:	d42d      	bmi.n	8004314 <_printf_common+0xb4>
 80042b8:	4649      	mov	r1, r9
 80042ba:	4638      	mov	r0, r7
 80042bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042c0:	47c0      	blx	r8
 80042c2:	3001      	adds	r0, #1
 80042c4:	d020      	beq.n	8004308 <_printf_common+0xa8>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	68e5      	ldr	r5, [r4, #12]
 80042ca:	f003 0306 	and.w	r3, r3, #6
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	bf18      	it	ne
 80042d2:	2500      	movne	r5, #0
 80042d4:	6832      	ldr	r2, [r6, #0]
 80042d6:	f04f 0600 	mov.w	r6, #0
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	bf08      	it	eq
 80042de:	1aad      	subeq	r5, r5, r2
 80042e0:	6922      	ldr	r2, [r4, #16]
 80042e2:	bf08      	it	eq
 80042e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bfc4      	itt	gt
 80042ec:	1a9b      	subgt	r3, r3, r2
 80042ee:	18ed      	addgt	r5, r5, r3
 80042f0:	341a      	adds	r4, #26
 80042f2:	42b5      	cmp	r5, r6
 80042f4:	d11a      	bne.n	800432c <_printf_common+0xcc>
 80042f6:	2000      	movs	r0, #0
 80042f8:	e008      	b.n	800430c <_printf_common+0xac>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4652      	mov	r2, sl
 80042fe:	4649      	mov	r1, r9
 8004300:	4638      	mov	r0, r7
 8004302:	47c0      	blx	r8
 8004304:	3001      	adds	r0, #1
 8004306:	d103      	bne.n	8004310 <_printf_common+0xb0>
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004310:	3501      	adds	r5, #1
 8004312:	e7c4      	b.n	800429e <_printf_common+0x3e>
 8004314:	2030      	movs	r0, #48	; 0x30
 8004316:	18e1      	adds	r1, r4, r3
 8004318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004322:	4422      	add	r2, r4
 8004324:	3302      	adds	r3, #2
 8004326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800432a:	e7c5      	b.n	80042b8 <_printf_common+0x58>
 800432c:	2301      	movs	r3, #1
 800432e:	4622      	mov	r2, r4
 8004330:	4649      	mov	r1, r9
 8004332:	4638      	mov	r0, r7
 8004334:	47c0      	blx	r8
 8004336:	3001      	adds	r0, #1
 8004338:	d0e6      	beq.n	8004308 <_printf_common+0xa8>
 800433a:	3601      	adds	r6, #1
 800433c:	e7d9      	b.n	80042f2 <_printf_common+0x92>
	...

08004340 <_printf_i>:
 8004340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	7e0f      	ldrb	r7, [r1, #24]
 8004346:	4691      	mov	r9, r2
 8004348:	2f78      	cmp	r7, #120	; 0x78
 800434a:	4680      	mov	r8, r0
 800434c:	460c      	mov	r4, r1
 800434e:	469a      	mov	sl, r3
 8004350:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004356:	d807      	bhi.n	8004368 <_printf_i+0x28>
 8004358:	2f62      	cmp	r7, #98	; 0x62
 800435a:	d80a      	bhi.n	8004372 <_printf_i+0x32>
 800435c:	2f00      	cmp	r7, #0
 800435e:	f000 80d9 	beq.w	8004514 <_printf_i+0x1d4>
 8004362:	2f58      	cmp	r7, #88	; 0x58
 8004364:	f000 80a4 	beq.w	80044b0 <_printf_i+0x170>
 8004368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800436c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004370:	e03a      	b.n	80043e8 <_printf_i+0xa8>
 8004372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004376:	2b15      	cmp	r3, #21
 8004378:	d8f6      	bhi.n	8004368 <_printf_i+0x28>
 800437a:	a101      	add	r1, pc, #4	; (adr r1, 8004380 <_printf_i+0x40>)
 800437c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004380:	080043d9 	.word	0x080043d9
 8004384:	080043ed 	.word	0x080043ed
 8004388:	08004369 	.word	0x08004369
 800438c:	08004369 	.word	0x08004369
 8004390:	08004369 	.word	0x08004369
 8004394:	08004369 	.word	0x08004369
 8004398:	080043ed 	.word	0x080043ed
 800439c:	08004369 	.word	0x08004369
 80043a0:	08004369 	.word	0x08004369
 80043a4:	08004369 	.word	0x08004369
 80043a8:	08004369 	.word	0x08004369
 80043ac:	080044fb 	.word	0x080044fb
 80043b0:	0800441d 	.word	0x0800441d
 80043b4:	080044dd 	.word	0x080044dd
 80043b8:	08004369 	.word	0x08004369
 80043bc:	08004369 	.word	0x08004369
 80043c0:	0800451d 	.word	0x0800451d
 80043c4:	08004369 	.word	0x08004369
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	08004369 	.word	0x08004369
 80043d0:	08004369 	.word	0x08004369
 80043d4:	080044e5 	.word	0x080044e5
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	1d1a      	adds	r2, r3, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	602a      	str	r2, [r5, #0]
 80043e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0a4      	b.n	8004536 <_printf_i+0x1f6>
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	6829      	ldr	r1, [r5, #0]
 80043f0:	0606      	lsls	r6, r0, #24
 80043f2:	f101 0304 	add.w	r3, r1, #4
 80043f6:	d50a      	bpl.n	800440e <_printf_i+0xce>
 80043f8:	680e      	ldr	r6, [r1, #0]
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	2e00      	cmp	r6, #0
 80043fe:	da03      	bge.n	8004408 <_printf_i+0xc8>
 8004400:	232d      	movs	r3, #45	; 0x2d
 8004402:	4276      	negs	r6, r6
 8004404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004408:	230a      	movs	r3, #10
 800440a:	485e      	ldr	r0, [pc, #376]	; (8004584 <_printf_i+0x244>)
 800440c:	e019      	b.n	8004442 <_printf_i+0x102>
 800440e:	680e      	ldr	r6, [r1, #0]
 8004410:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004414:	602b      	str	r3, [r5, #0]
 8004416:	bf18      	it	ne
 8004418:	b236      	sxthne	r6, r6
 800441a:	e7ef      	b.n	80043fc <_printf_i+0xbc>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	1d19      	adds	r1, r3, #4
 8004422:	6029      	str	r1, [r5, #0]
 8004424:	0601      	lsls	r1, r0, #24
 8004426:	d501      	bpl.n	800442c <_printf_i+0xec>
 8004428:	681e      	ldr	r6, [r3, #0]
 800442a:	e002      	b.n	8004432 <_printf_i+0xf2>
 800442c:	0646      	lsls	r6, r0, #25
 800442e:	d5fb      	bpl.n	8004428 <_printf_i+0xe8>
 8004430:	881e      	ldrh	r6, [r3, #0]
 8004432:	2f6f      	cmp	r7, #111	; 0x6f
 8004434:	bf0c      	ite	eq
 8004436:	2308      	moveq	r3, #8
 8004438:	230a      	movne	r3, #10
 800443a:	4852      	ldr	r0, [pc, #328]	; (8004584 <_printf_i+0x244>)
 800443c:	2100      	movs	r1, #0
 800443e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004442:	6865      	ldr	r5, [r4, #4]
 8004444:	2d00      	cmp	r5, #0
 8004446:	bfa8      	it	ge
 8004448:	6821      	ldrge	r1, [r4, #0]
 800444a:	60a5      	str	r5, [r4, #8]
 800444c:	bfa4      	itt	ge
 800444e:	f021 0104 	bicge.w	r1, r1, #4
 8004452:	6021      	strge	r1, [r4, #0]
 8004454:	b90e      	cbnz	r6, 800445a <_printf_i+0x11a>
 8004456:	2d00      	cmp	r5, #0
 8004458:	d04d      	beq.n	80044f6 <_printf_i+0x1b6>
 800445a:	4615      	mov	r5, r2
 800445c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004460:	fb03 6711 	mls	r7, r3, r1, r6
 8004464:	5dc7      	ldrb	r7, [r0, r7]
 8004466:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800446a:	4637      	mov	r7, r6
 800446c:	42bb      	cmp	r3, r7
 800446e:	460e      	mov	r6, r1
 8004470:	d9f4      	bls.n	800445c <_printf_i+0x11c>
 8004472:	2b08      	cmp	r3, #8
 8004474:	d10b      	bne.n	800448e <_printf_i+0x14e>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	07de      	lsls	r6, r3, #31
 800447a:	d508      	bpl.n	800448e <_printf_i+0x14e>
 800447c:	6923      	ldr	r3, [r4, #16]
 800447e:	6861      	ldr	r1, [r4, #4]
 8004480:	4299      	cmp	r1, r3
 8004482:	bfde      	ittt	le
 8004484:	2330      	movle	r3, #48	; 0x30
 8004486:	f805 3c01 	strble.w	r3, [r5, #-1]
 800448a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800448e:	1b52      	subs	r2, r2, r5
 8004490:	6122      	str	r2, [r4, #16]
 8004492:	464b      	mov	r3, r9
 8004494:	4621      	mov	r1, r4
 8004496:	4640      	mov	r0, r8
 8004498:	f8cd a000 	str.w	sl, [sp]
 800449c:	aa03      	add	r2, sp, #12
 800449e:	f7ff fedf 	bl	8004260 <_printf_common>
 80044a2:	3001      	adds	r0, #1
 80044a4:	d14c      	bne.n	8004540 <_printf_i+0x200>
 80044a6:	f04f 30ff 	mov.w	r0, #4294967295
 80044aa:	b004      	add	sp, #16
 80044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b0:	4834      	ldr	r0, [pc, #208]	; (8004584 <_printf_i+0x244>)
 80044b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044b6:	6829      	ldr	r1, [r5, #0]
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80044be:	6029      	str	r1, [r5, #0]
 80044c0:	061d      	lsls	r5, r3, #24
 80044c2:	d514      	bpl.n	80044ee <_printf_i+0x1ae>
 80044c4:	07df      	lsls	r7, r3, #31
 80044c6:	bf44      	itt	mi
 80044c8:	f043 0320 	orrmi.w	r3, r3, #32
 80044cc:	6023      	strmi	r3, [r4, #0]
 80044ce:	b91e      	cbnz	r6, 80044d8 <_printf_i+0x198>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f023 0320 	bic.w	r3, r3, #32
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	2310      	movs	r3, #16
 80044da:	e7af      	b.n	800443c <_printf_i+0xfc>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	f043 0320 	orr.w	r3, r3, #32
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	2378      	movs	r3, #120	; 0x78
 80044e6:	4828      	ldr	r0, [pc, #160]	; (8004588 <_printf_i+0x248>)
 80044e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ec:	e7e3      	b.n	80044b6 <_printf_i+0x176>
 80044ee:	0659      	lsls	r1, r3, #25
 80044f0:	bf48      	it	mi
 80044f2:	b2b6      	uxthmi	r6, r6
 80044f4:	e7e6      	b.n	80044c4 <_printf_i+0x184>
 80044f6:	4615      	mov	r5, r2
 80044f8:	e7bb      	b.n	8004472 <_printf_i+0x132>
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	6826      	ldr	r6, [r4, #0]
 80044fe:	1d18      	adds	r0, r3, #4
 8004500:	6961      	ldr	r1, [r4, #20]
 8004502:	6028      	str	r0, [r5, #0]
 8004504:	0635      	lsls	r5, r6, #24
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	d501      	bpl.n	800450e <_printf_i+0x1ce>
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	e002      	b.n	8004514 <_printf_i+0x1d4>
 800450e:	0670      	lsls	r0, r6, #25
 8004510:	d5fb      	bpl.n	800450a <_printf_i+0x1ca>
 8004512:	8019      	strh	r1, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	4615      	mov	r5, r2
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	e7ba      	b.n	8004492 <_printf_i+0x152>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	602a      	str	r2, [r5, #0]
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	6862      	ldr	r2, [r4, #4]
 8004528:	4628      	mov	r0, r5
 800452a:	f000 fed7 	bl	80052dc <memchr>
 800452e:	b108      	cbz	r0, 8004534 <_printf_i+0x1f4>
 8004530:	1b40      	subs	r0, r0, r5
 8004532:	6060      	str	r0, [r4, #4]
 8004534:	6863      	ldr	r3, [r4, #4]
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	2300      	movs	r3, #0
 800453a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453e:	e7a8      	b.n	8004492 <_printf_i+0x152>
 8004540:	462a      	mov	r2, r5
 8004542:	4649      	mov	r1, r9
 8004544:	4640      	mov	r0, r8
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	47d0      	blx	sl
 800454a:	3001      	adds	r0, #1
 800454c:	d0ab      	beq.n	80044a6 <_printf_i+0x166>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	079b      	lsls	r3, r3, #30
 8004552:	d413      	bmi.n	800457c <_printf_i+0x23c>
 8004554:	68e0      	ldr	r0, [r4, #12]
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	4298      	cmp	r0, r3
 800455a:	bfb8      	it	lt
 800455c:	4618      	movlt	r0, r3
 800455e:	e7a4      	b.n	80044aa <_printf_i+0x16a>
 8004560:	2301      	movs	r3, #1
 8004562:	4632      	mov	r2, r6
 8004564:	4649      	mov	r1, r9
 8004566:	4640      	mov	r0, r8
 8004568:	47d0      	blx	sl
 800456a:	3001      	adds	r0, #1
 800456c:	d09b      	beq.n	80044a6 <_printf_i+0x166>
 800456e:	3501      	adds	r5, #1
 8004570:	68e3      	ldr	r3, [r4, #12]
 8004572:	9903      	ldr	r1, [sp, #12]
 8004574:	1a5b      	subs	r3, r3, r1
 8004576:	42ab      	cmp	r3, r5
 8004578:	dcf2      	bgt.n	8004560 <_printf_i+0x220>
 800457a:	e7eb      	b.n	8004554 <_printf_i+0x214>
 800457c:	2500      	movs	r5, #0
 800457e:	f104 0619 	add.w	r6, r4, #25
 8004582:	e7f5      	b.n	8004570 <_printf_i+0x230>
 8004584:	080070ea 	.word	0x080070ea
 8004588:	080070fb 	.word	0x080070fb

0800458c <siprintf>:
 800458c:	b40e      	push	{r1, r2, r3}
 800458e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004592:	b500      	push	{lr}
 8004594:	b09c      	sub	sp, #112	; 0x70
 8004596:	ab1d      	add	r3, sp, #116	; 0x74
 8004598:	9002      	str	r0, [sp, #8]
 800459a:	9006      	str	r0, [sp, #24]
 800459c:	9107      	str	r1, [sp, #28]
 800459e:	9104      	str	r1, [sp, #16]
 80045a0:	4808      	ldr	r0, [pc, #32]	; (80045c4 <siprintf+0x38>)
 80045a2:	4909      	ldr	r1, [pc, #36]	; (80045c8 <siprintf+0x3c>)
 80045a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a8:	9105      	str	r1, [sp, #20]
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	a902      	add	r1, sp, #8
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	f001 fb7e 	bl	8005cb0 <_svfiprintf_r>
 80045b4:	2200      	movs	r2, #0
 80045b6:	9b02      	ldr	r3, [sp, #8]
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	b01c      	add	sp, #112	; 0x70
 80045bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045c0:	b003      	add	sp, #12
 80045c2:	4770      	bx	lr
 80045c4:	2000000c 	.word	0x2000000c
 80045c8:	ffff0208 	.word	0xffff0208

080045cc <quorem>:
 80045cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	6903      	ldr	r3, [r0, #16]
 80045d2:	690c      	ldr	r4, [r1, #16]
 80045d4:	4607      	mov	r7, r0
 80045d6:	42a3      	cmp	r3, r4
 80045d8:	f2c0 8082 	blt.w	80046e0 <quorem+0x114>
 80045dc:	3c01      	subs	r4, #1
 80045de:	f100 0514 	add.w	r5, r0, #20
 80045e2:	f101 0814 	add.w	r8, r1, #20
 80045e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045ea:	9301      	str	r3, [sp, #4]
 80045ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045f4:	3301      	adds	r3, #1
 80045f6:	429a      	cmp	r2, r3
 80045f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80045fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004604:	d331      	bcc.n	800466a <quorem+0x9e>
 8004606:	f04f 0e00 	mov.w	lr, #0
 800460a:	4640      	mov	r0, r8
 800460c:	46ac      	mov	ip, r5
 800460e:	46f2      	mov	sl, lr
 8004610:	f850 2b04 	ldr.w	r2, [r0], #4
 8004614:	b293      	uxth	r3, r2
 8004616:	fb06 e303 	mla	r3, r6, r3, lr
 800461a:	0c12      	lsrs	r2, r2, #16
 800461c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004620:	b29b      	uxth	r3, r3
 8004622:	fb06 e202 	mla	r2, r6, r2, lr
 8004626:	ebaa 0303 	sub.w	r3, sl, r3
 800462a:	f8dc a000 	ldr.w	sl, [ip]
 800462e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004632:	fa1f fa8a 	uxth.w	sl, sl
 8004636:	4453      	add	r3, sl
 8004638:	f8dc a000 	ldr.w	sl, [ip]
 800463c:	b292      	uxth	r2, r2
 800463e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004642:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004646:	b29b      	uxth	r3, r3
 8004648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800464c:	4581      	cmp	r9, r0
 800464e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004652:	f84c 3b04 	str.w	r3, [ip], #4
 8004656:	d2db      	bcs.n	8004610 <quorem+0x44>
 8004658:	f855 300b 	ldr.w	r3, [r5, fp]
 800465c:	b92b      	cbnz	r3, 800466a <quorem+0x9e>
 800465e:	9b01      	ldr	r3, [sp, #4]
 8004660:	3b04      	subs	r3, #4
 8004662:	429d      	cmp	r5, r3
 8004664:	461a      	mov	r2, r3
 8004666:	d32f      	bcc.n	80046c8 <quorem+0xfc>
 8004668:	613c      	str	r4, [r7, #16]
 800466a:	4638      	mov	r0, r7
 800466c:	f001 f8d0 	bl	8005810 <__mcmp>
 8004670:	2800      	cmp	r0, #0
 8004672:	db25      	blt.n	80046c0 <quorem+0xf4>
 8004674:	4628      	mov	r0, r5
 8004676:	f04f 0c00 	mov.w	ip, #0
 800467a:	3601      	adds	r6, #1
 800467c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004680:	f8d0 e000 	ldr.w	lr, [r0]
 8004684:	b28b      	uxth	r3, r1
 8004686:	ebac 0303 	sub.w	r3, ip, r3
 800468a:	fa1f f28e 	uxth.w	r2, lr
 800468e:	4413      	add	r3, r2
 8004690:	0c0a      	lsrs	r2, r1, #16
 8004692:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004696:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800469a:	b29b      	uxth	r3, r3
 800469c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046a0:	45c1      	cmp	r9, r8
 80046a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80046a6:	f840 3b04 	str.w	r3, [r0], #4
 80046aa:	d2e7      	bcs.n	800467c <quorem+0xb0>
 80046ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046b4:	b922      	cbnz	r2, 80046c0 <quorem+0xf4>
 80046b6:	3b04      	subs	r3, #4
 80046b8:	429d      	cmp	r5, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	d30a      	bcc.n	80046d4 <quorem+0x108>
 80046be:	613c      	str	r4, [r7, #16]
 80046c0:	4630      	mov	r0, r6
 80046c2:	b003      	add	sp, #12
 80046c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	3b04      	subs	r3, #4
 80046cc:	2a00      	cmp	r2, #0
 80046ce:	d1cb      	bne.n	8004668 <quorem+0x9c>
 80046d0:	3c01      	subs	r4, #1
 80046d2:	e7c6      	b.n	8004662 <quorem+0x96>
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	3b04      	subs	r3, #4
 80046d8:	2a00      	cmp	r2, #0
 80046da:	d1f0      	bne.n	80046be <quorem+0xf2>
 80046dc:	3c01      	subs	r4, #1
 80046de:	e7eb      	b.n	80046b8 <quorem+0xec>
 80046e0:	2000      	movs	r0, #0
 80046e2:	e7ee      	b.n	80046c2 <quorem+0xf6>
 80046e4:	0000      	movs	r0, r0
	...

080046e8 <_dtoa_r>:
 80046e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ec:	4616      	mov	r6, r2
 80046ee:	461f      	mov	r7, r3
 80046f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80046f2:	b099      	sub	sp, #100	; 0x64
 80046f4:	4605      	mov	r5, r0
 80046f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80046fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80046fe:	b974      	cbnz	r4, 800471e <_dtoa_r+0x36>
 8004700:	2010      	movs	r0, #16
 8004702:	f000 fde3 	bl	80052cc <malloc>
 8004706:	4602      	mov	r2, r0
 8004708:	6268      	str	r0, [r5, #36]	; 0x24
 800470a:	b920      	cbnz	r0, 8004716 <_dtoa_r+0x2e>
 800470c:	21ea      	movs	r1, #234	; 0xea
 800470e:	4ba8      	ldr	r3, [pc, #672]	; (80049b0 <_dtoa_r+0x2c8>)
 8004710:	48a8      	ldr	r0, [pc, #672]	; (80049b4 <_dtoa_r+0x2cc>)
 8004712:	f001 fbdd 	bl	8005ed0 <__assert_func>
 8004716:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800471a:	6004      	str	r4, [r0, #0]
 800471c:	60c4      	str	r4, [r0, #12]
 800471e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	b151      	cbz	r1, 800473a <_dtoa_r+0x52>
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	2301      	movs	r3, #1
 8004728:	4093      	lsls	r3, r2
 800472a:	604a      	str	r2, [r1, #4]
 800472c:	608b      	str	r3, [r1, #8]
 800472e:	4628      	mov	r0, r5
 8004730:	f000 fe30 	bl	8005394 <_Bfree>
 8004734:	2200      	movs	r2, #0
 8004736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	1e3b      	subs	r3, r7, #0
 800473c:	bfaf      	iteee	ge
 800473e:	2300      	movge	r3, #0
 8004740:	2201      	movlt	r2, #1
 8004742:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004746:	9305      	strlt	r3, [sp, #20]
 8004748:	bfa8      	it	ge
 800474a:	f8c8 3000 	strge.w	r3, [r8]
 800474e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004752:	4b99      	ldr	r3, [pc, #612]	; (80049b8 <_dtoa_r+0x2d0>)
 8004754:	bfb8      	it	lt
 8004756:	f8c8 2000 	strlt.w	r2, [r8]
 800475a:	ea33 0309 	bics.w	r3, r3, r9
 800475e:	d119      	bne.n	8004794 <_dtoa_r+0xac>
 8004760:	f242 730f 	movw	r3, #9999	; 0x270f
 8004764:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800476c:	4333      	orrs	r3, r6
 800476e:	f000 857f 	beq.w	8005270 <_dtoa_r+0xb88>
 8004772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004774:	b953      	cbnz	r3, 800478c <_dtoa_r+0xa4>
 8004776:	4b91      	ldr	r3, [pc, #580]	; (80049bc <_dtoa_r+0x2d4>)
 8004778:	e022      	b.n	80047c0 <_dtoa_r+0xd8>
 800477a:	4b91      	ldr	r3, [pc, #580]	; (80049c0 <_dtoa_r+0x2d8>)
 800477c:	9303      	str	r3, [sp, #12]
 800477e:	3308      	adds	r3, #8
 8004780:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	9803      	ldr	r0, [sp, #12]
 8004786:	b019      	add	sp, #100	; 0x64
 8004788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478c:	4b8b      	ldr	r3, [pc, #556]	; (80049bc <_dtoa_r+0x2d4>)
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	3303      	adds	r3, #3
 8004792:	e7f5      	b.n	8004780 <_dtoa_r+0x98>
 8004794:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004798:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800479c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047a0:	2200      	movs	r2, #0
 80047a2:	2300      	movs	r3, #0
 80047a4:	f7fc f96c 	bl	8000a80 <__aeabi_dcmpeq>
 80047a8:	4680      	mov	r8, r0
 80047aa:	b158      	cbz	r0, 80047c4 <_dtoa_r+0xdc>
 80047ac:	2301      	movs	r3, #1
 80047ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8558 	beq.w	800526a <_dtoa_r+0xb82>
 80047ba:	4882      	ldr	r0, [pc, #520]	; (80049c4 <_dtoa_r+0x2dc>)
 80047bc:	6018      	str	r0, [r3, #0]
 80047be:	1e43      	subs	r3, r0, #1
 80047c0:	9303      	str	r3, [sp, #12]
 80047c2:	e7df      	b.n	8004784 <_dtoa_r+0x9c>
 80047c4:	ab16      	add	r3, sp, #88	; 0x58
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	ab17      	add	r3, sp, #92	; 0x5c
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	4628      	mov	r0, r5
 80047ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047d2:	f001 f8c5 	bl	8005960 <__d2b>
 80047d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80047da:	4683      	mov	fp, r0
 80047dc:	2c00      	cmp	r4, #0
 80047de:	d07f      	beq.n	80048e0 <_dtoa_r+0x1f8>
 80047e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80047ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80047f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80047f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80047fa:	2200      	movs	r2, #0
 80047fc:	4b72      	ldr	r3, [pc, #456]	; (80049c8 <_dtoa_r+0x2e0>)
 80047fe:	f7fb fd1f 	bl	8000240 <__aeabi_dsub>
 8004802:	a365      	add	r3, pc, #404	; (adr r3, 8004998 <_dtoa_r+0x2b0>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f7fb fed2 	bl	80005b0 <__aeabi_dmul>
 800480c:	a364      	add	r3, pc, #400	; (adr r3, 80049a0 <_dtoa_r+0x2b8>)
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f7fb fd17 	bl	8000244 <__adddf3>
 8004816:	4606      	mov	r6, r0
 8004818:	4620      	mov	r0, r4
 800481a:	460f      	mov	r7, r1
 800481c:	f7fb fe5e 	bl	80004dc <__aeabi_i2d>
 8004820:	a361      	add	r3, pc, #388	; (adr r3, 80049a8 <_dtoa_r+0x2c0>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f7fb fec3 	bl	80005b0 <__aeabi_dmul>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4630      	mov	r0, r6
 8004830:	4639      	mov	r1, r7
 8004832:	f7fb fd07 	bl	8000244 <__adddf3>
 8004836:	4606      	mov	r6, r0
 8004838:	460f      	mov	r7, r1
 800483a:	f7fc f969 	bl	8000b10 <__aeabi_d2iz>
 800483e:	2200      	movs	r2, #0
 8004840:	4682      	mov	sl, r0
 8004842:	2300      	movs	r3, #0
 8004844:	4630      	mov	r0, r6
 8004846:	4639      	mov	r1, r7
 8004848:	f7fc f924 	bl	8000a94 <__aeabi_dcmplt>
 800484c:	b148      	cbz	r0, 8004862 <_dtoa_r+0x17a>
 800484e:	4650      	mov	r0, sl
 8004850:	f7fb fe44 	bl	80004dc <__aeabi_i2d>
 8004854:	4632      	mov	r2, r6
 8004856:	463b      	mov	r3, r7
 8004858:	f7fc f912 	bl	8000a80 <__aeabi_dcmpeq>
 800485c:	b908      	cbnz	r0, 8004862 <_dtoa_r+0x17a>
 800485e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004862:	f1ba 0f16 	cmp.w	sl, #22
 8004866:	d858      	bhi.n	800491a <_dtoa_r+0x232>
 8004868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800486c:	4b57      	ldr	r3, [pc, #348]	; (80049cc <_dtoa_r+0x2e4>)
 800486e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fc f90d 	bl	8000a94 <__aeabi_dcmplt>
 800487a:	2800      	cmp	r0, #0
 800487c:	d04f      	beq.n	800491e <_dtoa_r+0x236>
 800487e:	2300      	movs	r3, #0
 8004880:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004884:	930f      	str	r3, [sp, #60]	; 0x3c
 8004886:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004888:	1b1c      	subs	r4, r3, r4
 800488a:	1e63      	subs	r3, r4, #1
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
 800488e:	bf49      	itett	mi
 8004890:	f1c4 0301 	rsbmi	r3, r4, #1
 8004894:	2300      	movpl	r3, #0
 8004896:	9306      	strmi	r3, [sp, #24]
 8004898:	2300      	movmi	r3, #0
 800489a:	bf54      	ite	pl
 800489c:	9306      	strpl	r3, [sp, #24]
 800489e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80048a0:	f1ba 0f00 	cmp.w	sl, #0
 80048a4:	db3d      	blt.n	8004922 <_dtoa_r+0x23a>
 80048a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80048ac:	4453      	add	r3, sl
 80048ae:	9309      	str	r3, [sp, #36]	; 0x24
 80048b0:	2300      	movs	r3, #0
 80048b2:	930a      	str	r3, [sp, #40]	; 0x28
 80048b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048b6:	2b09      	cmp	r3, #9
 80048b8:	f200 808c 	bhi.w	80049d4 <_dtoa_r+0x2ec>
 80048bc:	2b05      	cmp	r3, #5
 80048be:	bfc4      	itt	gt
 80048c0:	3b04      	subgt	r3, #4
 80048c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80048c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048c6:	bfc8      	it	gt
 80048c8:	2400      	movgt	r4, #0
 80048ca:	f1a3 0302 	sub.w	r3, r3, #2
 80048ce:	bfd8      	it	le
 80048d0:	2401      	movle	r4, #1
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	f200 808a 	bhi.w	80049ec <_dtoa_r+0x304>
 80048d8:	e8df f003 	tbb	[pc, r3]
 80048dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80048e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80048e4:	441c      	add	r4, r3
 80048e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	bfc3      	ittte	gt
 80048ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80048f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80048f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80048fa:	f1c3 0320 	rsble	r3, r3, #32
 80048fe:	bfc6      	itte	gt
 8004900:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004904:	4318      	orrgt	r0, r3
 8004906:	fa06 f003 	lslle.w	r0, r6, r3
 800490a:	f7fb fdd7 	bl	80004bc <__aeabi_ui2d>
 800490e:	2301      	movs	r3, #1
 8004910:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004914:	3c01      	subs	r4, #1
 8004916:	9313      	str	r3, [sp, #76]	; 0x4c
 8004918:	e76f      	b.n	80047fa <_dtoa_r+0x112>
 800491a:	2301      	movs	r3, #1
 800491c:	e7b2      	b.n	8004884 <_dtoa_r+0x19c>
 800491e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004920:	e7b1      	b.n	8004886 <_dtoa_r+0x19e>
 8004922:	9b06      	ldr	r3, [sp, #24]
 8004924:	eba3 030a 	sub.w	r3, r3, sl
 8004928:	9306      	str	r3, [sp, #24]
 800492a:	f1ca 0300 	rsb	r3, sl, #0
 800492e:	930a      	str	r3, [sp, #40]	; 0x28
 8004930:	2300      	movs	r3, #0
 8004932:	930e      	str	r3, [sp, #56]	; 0x38
 8004934:	e7be      	b.n	80048b4 <_dtoa_r+0x1cc>
 8004936:	2300      	movs	r3, #0
 8004938:	930b      	str	r3, [sp, #44]	; 0x2c
 800493a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800493c:	2b00      	cmp	r3, #0
 800493e:	dc58      	bgt.n	80049f2 <_dtoa_r+0x30a>
 8004940:	f04f 0901 	mov.w	r9, #1
 8004944:	464b      	mov	r3, r9
 8004946:	f8cd 9020 	str.w	r9, [sp, #32]
 800494a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800494e:	2200      	movs	r2, #0
 8004950:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004952:	6042      	str	r2, [r0, #4]
 8004954:	2204      	movs	r2, #4
 8004956:	f102 0614 	add.w	r6, r2, #20
 800495a:	429e      	cmp	r6, r3
 800495c:	6841      	ldr	r1, [r0, #4]
 800495e:	d94e      	bls.n	80049fe <_dtoa_r+0x316>
 8004960:	4628      	mov	r0, r5
 8004962:	f000 fcd7 	bl	8005314 <_Balloc>
 8004966:	9003      	str	r0, [sp, #12]
 8004968:	2800      	cmp	r0, #0
 800496a:	d14c      	bne.n	8004a06 <_dtoa_r+0x31e>
 800496c:	4602      	mov	r2, r0
 800496e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004972:	4b17      	ldr	r3, [pc, #92]	; (80049d0 <_dtoa_r+0x2e8>)
 8004974:	e6cc      	b.n	8004710 <_dtoa_r+0x28>
 8004976:	2301      	movs	r3, #1
 8004978:	e7de      	b.n	8004938 <_dtoa_r+0x250>
 800497a:	2300      	movs	r3, #0
 800497c:	930b      	str	r3, [sp, #44]	; 0x2c
 800497e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004980:	eb0a 0903 	add.w	r9, sl, r3
 8004984:	f109 0301 	add.w	r3, r9, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	9308      	str	r3, [sp, #32]
 800498c:	bfb8      	it	lt
 800498e:	2301      	movlt	r3, #1
 8004990:	e7dd      	b.n	800494e <_dtoa_r+0x266>
 8004992:	2301      	movs	r3, #1
 8004994:	e7f2      	b.n	800497c <_dtoa_r+0x294>
 8004996:	bf00      	nop
 8004998:	636f4361 	.word	0x636f4361
 800499c:	3fd287a7 	.word	0x3fd287a7
 80049a0:	8b60c8b3 	.word	0x8b60c8b3
 80049a4:	3fc68a28 	.word	0x3fc68a28
 80049a8:	509f79fb 	.word	0x509f79fb
 80049ac:	3fd34413 	.word	0x3fd34413
 80049b0:	08007119 	.word	0x08007119
 80049b4:	08007130 	.word	0x08007130
 80049b8:	7ff00000 	.word	0x7ff00000
 80049bc:	08007115 	.word	0x08007115
 80049c0:	0800710c 	.word	0x0800710c
 80049c4:	080070e9 	.word	0x080070e9
 80049c8:	3ff80000 	.word	0x3ff80000
 80049cc:	08007220 	.word	0x08007220
 80049d0:	0800718b 	.word	0x0800718b
 80049d4:	2401      	movs	r4, #1
 80049d6:	2300      	movs	r3, #0
 80049d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80049da:	9322      	str	r3, [sp, #136]	; 0x88
 80049dc:	f04f 39ff 	mov.w	r9, #4294967295
 80049e0:	2200      	movs	r2, #0
 80049e2:	2312      	movs	r3, #18
 80049e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80049e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80049ea:	e7b0      	b.n	800494e <_dtoa_r+0x266>
 80049ec:	2301      	movs	r3, #1
 80049ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80049f0:	e7f4      	b.n	80049dc <_dtoa_r+0x2f4>
 80049f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80049f6:	464b      	mov	r3, r9
 80049f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80049fc:	e7a7      	b.n	800494e <_dtoa_r+0x266>
 80049fe:	3101      	adds	r1, #1
 8004a00:	6041      	str	r1, [r0, #4]
 8004a02:	0052      	lsls	r2, r2, #1
 8004a04:	e7a7      	b.n	8004956 <_dtoa_r+0x26e>
 8004a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a08:	9a03      	ldr	r2, [sp, #12]
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	9b08      	ldr	r3, [sp, #32]
 8004a0e:	2b0e      	cmp	r3, #14
 8004a10:	f200 80a8 	bhi.w	8004b64 <_dtoa_r+0x47c>
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	f000 80a5 	beq.w	8004b64 <_dtoa_r+0x47c>
 8004a1a:	f1ba 0f00 	cmp.w	sl, #0
 8004a1e:	dd34      	ble.n	8004a8a <_dtoa_r+0x3a2>
 8004a20:	4a9a      	ldr	r2, [pc, #616]	; (8004c8c <_dtoa_r+0x5a4>)
 8004a22:	f00a 030f 	and.w	r3, sl, #15
 8004a26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004a2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004a3a:	d016      	beq.n	8004a6a <_dtoa_r+0x382>
 8004a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a40:	4b93      	ldr	r3, [pc, #588]	; (8004c90 <_dtoa_r+0x5a8>)
 8004a42:	2703      	movs	r7, #3
 8004a44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a48:	f7fb fedc 	bl	8000804 <__aeabi_ddiv>
 8004a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a50:	f004 040f 	and.w	r4, r4, #15
 8004a54:	4e8e      	ldr	r6, [pc, #568]	; (8004c90 <_dtoa_r+0x5a8>)
 8004a56:	b954      	cbnz	r4, 8004a6e <_dtoa_r+0x386>
 8004a58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a60:	f7fb fed0 	bl	8000804 <__aeabi_ddiv>
 8004a64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a68:	e029      	b.n	8004abe <_dtoa_r+0x3d6>
 8004a6a:	2702      	movs	r7, #2
 8004a6c:	e7f2      	b.n	8004a54 <_dtoa_r+0x36c>
 8004a6e:	07e1      	lsls	r1, r4, #31
 8004a70:	d508      	bpl.n	8004a84 <_dtoa_r+0x39c>
 8004a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a7a:	f7fb fd99 	bl	80005b0 <__aeabi_dmul>
 8004a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a82:	3701      	adds	r7, #1
 8004a84:	1064      	asrs	r4, r4, #1
 8004a86:	3608      	adds	r6, #8
 8004a88:	e7e5      	b.n	8004a56 <_dtoa_r+0x36e>
 8004a8a:	f000 80a5 	beq.w	8004bd8 <_dtoa_r+0x4f0>
 8004a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a92:	f1ca 0400 	rsb	r4, sl, #0
 8004a96:	4b7d      	ldr	r3, [pc, #500]	; (8004c8c <_dtoa_r+0x5a4>)
 8004a98:	f004 020f 	and.w	r2, r4, #15
 8004a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f7fb fd84 	bl	80005b0 <__aeabi_dmul>
 8004aa8:	2702      	movs	r7, #2
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ab0:	4e77      	ldr	r6, [pc, #476]	; (8004c90 <_dtoa_r+0x5a8>)
 8004ab2:	1124      	asrs	r4, r4, #4
 8004ab4:	2c00      	cmp	r4, #0
 8004ab6:	f040 8084 	bne.w	8004bc2 <_dtoa_r+0x4da>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1d2      	bne.n	8004a64 <_dtoa_r+0x37c>
 8004abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 808b 	beq.w	8004bdc <_dtoa_r+0x4f4>
 8004ac6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004aca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ace:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <_dtoa_r+0x5ac>)
 8004ad6:	f7fb ffdd 	bl	8000a94 <__aeabi_dcmplt>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d07e      	beq.n	8004bdc <_dtoa_r+0x4f4>
 8004ade:	9b08      	ldr	r3, [sp, #32]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d07b      	beq.n	8004bdc <_dtoa_r+0x4f4>
 8004ae4:	f1b9 0f00 	cmp.w	r9, #0
 8004ae8:	dd38      	ble.n	8004b5c <_dtoa_r+0x474>
 8004aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004aee:	2200      	movs	r2, #0
 8004af0:	4b69      	ldr	r3, [pc, #420]	; (8004c98 <_dtoa_r+0x5b0>)
 8004af2:	f7fb fd5d 	bl	80005b0 <__aeabi_dmul>
 8004af6:	464c      	mov	r4, r9
 8004af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004afc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004b00:	3701      	adds	r7, #1
 8004b02:	4638      	mov	r0, r7
 8004b04:	f7fb fcea 	bl	80004dc <__aeabi_i2d>
 8004b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b0c:	f7fb fd50 	bl	80005b0 <__aeabi_dmul>
 8004b10:	2200      	movs	r2, #0
 8004b12:	4b62      	ldr	r3, [pc, #392]	; (8004c9c <_dtoa_r+0x5b4>)
 8004b14:	f7fb fb96 	bl	8000244 <__adddf3>
 8004b18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004b1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b20:	9611      	str	r6, [sp, #68]	; 0x44
 8004b22:	2c00      	cmp	r4, #0
 8004b24:	d15d      	bne.n	8004be2 <_dtoa_r+0x4fa>
 8004b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4b5c      	ldr	r3, [pc, #368]	; (8004ca0 <_dtoa_r+0x5b8>)
 8004b2e:	f7fb fb87 	bl	8000240 <__aeabi_dsub>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b3a:	4633      	mov	r3, r6
 8004b3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b3e:	f7fb ffc7 	bl	8000ad0 <__aeabi_dcmpgt>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f040 829c 	bne.w	8005080 <_dtoa_r+0x998>
 8004b48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b52:	f7fb ff9f 	bl	8000a94 <__aeabi_dcmplt>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	f040 8290 	bne.w	800507c <_dtoa_r+0x994>
 8004b5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004b60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f2c0 8152 	blt.w	8004e10 <_dtoa_r+0x728>
 8004b6c:	f1ba 0f0e 	cmp.w	sl, #14
 8004b70:	f300 814e 	bgt.w	8004e10 <_dtoa_r+0x728>
 8004b74:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <_dtoa_r+0x5a4>)
 8004b76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004b82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f280 80db 	bge.w	8004d40 <_dtoa_r+0x658>
 8004b8a:	9b08      	ldr	r3, [sp, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f300 80d7 	bgt.w	8004d40 <_dtoa_r+0x658>
 8004b92:	f040 8272 	bne.w	800507a <_dtoa_r+0x992>
 8004b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4b40      	ldr	r3, [pc, #256]	; (8004ca0 <_dtoa_r+0x5b8>)
 8004b9e:	f7fb fd07 	bl	80005b0 <__aeabi_dmul>
 8004ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba6:	f7fb ff89 	bl	8000abc <__aeabi_dcmpge>
 8004baa:	9c08      	ldr	r4, [sp, #32]
 8004bac:	4626      	mov	r6, r4
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f040 8248 	bne.w	8005044 <_dtoa_r+0x95c>
 8004bb4:	2331      	movs	r3, #49	; 0x31
 8004bb6:	9f03      	ldr	r7, [sp, #12]
 8004bb8:	f10a 0a01 	add.w	sl, sl, #1
 8004bbc:	f807 3b01 	strb.w	r3, [r7], #1
 8004bc0:	e244      	b.n	800504c <_dtoa_r+0x964>
 8004bc2:	07e2      	lsls	r2, r4, #31
 8004bc4:	d505      	bpl.n	8004bd2 <_dtoa_r+0x4ea>
 8004bc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004bca:	f7fb fcf1 	bl	80005b0 <__aeabi_dmul>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	3701      	adds	r7, #1
 8004bd2:	1064      	asrs	r4, r4, #1
 8004bd4:	3608      	adds	r6, #8
 8004bd6:	e76d      	b.n	8004ab4 <_dtoa_r+0x3cc>
 8004bd8:	2702      	movs	r7, #2
 8004bda:	e770      	b.n	8004abe <_dtoa_r+0x3d6>
 8004bdc:	46d0      	mov	r8, sl
 8004bde:	9c08      	ldr	r4, [sp, #32]
 8004be0:	e78f      	b.n	8004b02 <_dtoa_r+0x41a>
 8004be2:	9903      	ldr	r1, [sp, #12]
 8004be4:	4b29      	ldr	r3, [pc, #164]	; (8004c8c <_dtoa_r+0x5a4>)
 8004be6:	4421      	add	r1, r4
 8004be8:	9112      	str	r1, [sp, #72]	; 0x48
 8004bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bf0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004bf4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	d055      	beq.n	8004ca8 <_dtoa_r+0x5c0>
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	4929      	ldr	r1, [pc, #164]	; (8004ca4 <_dtoa_r+0x5bc>)
 8004c00:	f7fb fe00 	bl	8000804 <__aeabi_ddiv>
 8004c04:	463b      	mov	r3, r7
 8004c06:	4632      	mov	r2, r6
 8004c08:	f7fb fb1a 	bl	8000240 <__aeabi_dsub>
 8004c0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c10:	9f03      	ldr	r7, [sp, #12]
 8004c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c16:	f7fb ff7b 	bl	8000b10 <__aeabi_d2iz>
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	f7fb fc5e 	bl	80004dc <__aeabi_i2d>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c28:	f7fb fb0a 	bl	8000240 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	3430      	adds	r4, #48	; 0x30
 8004c32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c3a:	f807 4b01 	strb.w	r4, [r7], #1
 8004c3e:	f7fb ff29 	bl	8000a94 <__aeabi_dcmplt>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d174      	bne.n	8004d30 <_dtoa_r+0x648>
 8004c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	4911      	ldr	r1, [pc, #68]	; (8004c94 <_dtoa_r+0x5ac>)
 8004c4e:	f7fb faf7 	bl	8000240 <__aeabi_dsub>
 8004c52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c56:	f7fb ff1d 	bl	8000a94 <__aeabi_dcmplt>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	f040 80b7 	bne.w	8004dce <_dtoa_r+0x6e6>
 8004c60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c62:	429f      	cmp	r7, r3
 8004c64:	f43f af7a 	beq.w	8004b5c <_dtoa_r+0x474>
 8004c68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <_dtoa_r+0x5b0>)
 8004c70:	f7fb fc9e 	bl	80005b0 <__aeabi_dmul>
 8004c74:	2200      	movs	r2, #0
 8004c76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <_dtoa_r+0x5b0>)
 8004c80:	f7fb fc96 	bl	80005b0 <__aeabi_dmul>
 8004c84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c88:	e7c3      	b.n	8004c12 <_dtoa_r+0x52a>
 8004c8a:	bf00      	nop
 8004c8c:	08007220 	.word	0x08007220
 8004c90:	080071f8 	.word	0x080071f8
 8004c94:	3ff00000 	.word	0x3ff00000
 8004c98:	40240000 	.word	0x40240000
 8004c9c:	401c0000 	.word	0x401c0000
 8004ca0:	40140000 	.word	0x40140000
 8004ca4:	3fe00000 	.word	0x3fe00000
 8004ca8:	4630      	mov	r0, r6
 8004caa:	4639      	mov	r1, r7
 8004cac:	f7fb fc80 	bl	80005b0 <__aeabi_dmul>
 8004cb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cb6:	9c03      	ldr	r4, [sp, #12]
 8004cb8:	9314      	str	r3, [sp, #80]	; 0x50
 8004cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cbe:	f7fb ff27 	bl	8000b10 <__aeabi_d2iz>
 8004cc2:	9015      	str	r0, [sp, #84]	; 0x54
 8004cc4:	f7fb fc0a 	bl	80004dc <__aeabi_i2d>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd0:	f7fb fab6 	bl	8000240 <__aeabi_dsub>
 8004cd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	3330      	adds	r3, #48	; 0x30
 8004cda:	f804 3b01 	strb.w	r3, [r4], #1
 8004cde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ce0:	460f      	mov	r7, r1
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	d124      	bne.n	8004d34 <_dtoa_r+0x64c>
 8004cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cee:	4bb0      	ldr	r3, [pc, #704]	; (8004fb0 <_dtoa_r+0x8c8>)
 8004cf0:	f7fb faa8 	bl	8000244 <__adddf3>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	f7fb fee8 	bl	8000ad0 <__aeabi_dcmpgt>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d163      	bne.n	8004dcc <_dtoa_r+0x6e4>
 8004d04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d08:	2000      	movs	r0, #0
 8004d0a:	49a9      	ldr	r1, [pc, #676]	; (8004fb0 <_dtoa_r+0x8c8>)
 8004d0c:	f7fb fa98 	bl	8000240 <__aeabi_dsub>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4630      	mov	r0, r6
 8004d16:	4639      	mov	r1, r7
 8004d18:	f7fb febc 	bl	8000a94 <__aeabi_dcmplt>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f43f af1d 	beq.w	8004b5c <_dtoa_r+0x474>
 8004d22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d24:	1e7b      	subs	r3, r7, #1
 8004d26:	9314      	str	r3, [sp, #80]	; 0x50
 8004d28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004d2c:	2b30      	cmp	r3, #48	; 0x30
 8004d2e:	d0f8      	beq.n	8004d22 <_dtoa_r+0x63a>
 8004d30:	46c2      	mov	sl, r8
 8004d32:	e03b      	b.n	8004dac <_dtoa_r+0x6c4>
 8004d34:	4b9f      	ldr	r3, [pc, #636]	; (8004fb4 <_dtoa_r+0x8cc>)
 8004d36:	f7fb fc3b 	bl	80005b0 <__aeabi_dmul>
 8004d3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d3e:	e7bc      	b.n	8004cba <_dtoa_r+0x5d2>
 8004d40:	9f03      	ldr	r7, [sp, #12]
 8004d42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004d46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	f7fb fd59 	bl	8000804 <__aeabi_ddiv>
 8004d52:	f7fb fedd 	bl	8000b10 <__aeabi_d2iz>
 8004d56:	4604      	mov	r4, r0
 8004d58:	f7fb fbc0 	bl	80004dc <__aeabi_i2d>
 8004d5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d60:	f7fb fc26 	bl	80005b0 <__aeabi_dmul>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f7fb fa68 	bl	8000240 <__aeabi_dsub>
 8004d70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004d74:	f807 6b01 	strb.w	r6, [r7], #1
 8004d78:	9e03      	ldr	r6, [sp, #12]
 8004d7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004d7e:	1bbe      	subs	r6, r7, r6
 8004d80:	45b4      	cmp	ip, r6
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	d136      	bne.n	8004df6 <_dtoa_r+0x70e>
 8004d88:	f7fb fa5c 	bl	8000244 <__adddf3>
 8004d8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d90:	4680      	mov	r8, r0
 8004d92:	4689      	mov	r9, r1
 8004d94:	f7fb fe9c 	bl	8000ad0 <__aeabi_dcmpgt>
 8004d98:	bb58      	cbnz	r0, 8004df2 <_dtoa_r+0x70a>
 8004d9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d9e:	4640      	mov	r0, r8
 8004da0:	4649      	mov	r1, r9
 8004da2:	f7fb fe6d 	bl	8000a80 <__aeabi_dcmpeq>
 8004da6:	b108      	cbz	r0, 8004dac <_dtoa_r+0x6c4>
 8004da8:	07e1      	lsls	r1, r4, #31
 8004daa:	d422      	bmi.n	8004df2 <_dtoa_r+0x70a>
 8004dac:	4628      	mov	r0, r5
 8004dae:	4659      	mov	r1, fp
 8004db0:	f000 faf0 	bl	8005394 <_Bfree>
 8004db4:	2300      	movs	r3, #0
 8004db6:	703b      	strb	r3, [r7, #0]
 8004db8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004dba:	f10a 0001 	add.w	r0, sl, #1
 8004dbe:	6018      	str	r0, [r3, #0]
 8004dc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f43f acde 	beq.w	8004784 <_dtoa_r+0x9c>
 8004dc8:	601f      	str	r7, [r3, #0]
 8004dca:	e4db      	b.n	8004784 <_dtoa_r+0x9c>
 8004dcc:	4627      	mov	r7, r4
 8004dce:	463b      	mov	r3, r7
 8004dd0:	461f      	mov	r7, r3
 8004dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dd6:	2a39      	cmp	r2, #57	; 0x39
 8004dd8:	d107      	bne.n	8004dea <_dtoa_r+0x702>
 8004dda:	9a03      	ldr	r2, [sp, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d1f7      	bne.n	8004dd0 <_dtoa_r+0x6e8>
 8004de0:	2230      	movs	r2, #48	; 0x30
 8004de2:	9903      	ldr	r1, [sp, #12]
 8004de4:	f108 0801 	add.w	r8, r8, #1
 8004de8:	700a      	strb	r2, [r1, #0]
 8004dea:	781a      	ldrb	r2, [r3, #0]
 8004dec:	3201      	adds	r2, #1
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	e79e      	b.n	8004d30 <_dtoa_r+0x648>
 8004df2:	46d0      	mov	r8, sl
 8004df4:	e7eb      	b.n	8004dce <_dtoa_r+0x6e6>
 8004df6:	2200      	movs	r2, #0
 8004df8:	4b6e      	ldr	r3, [pc, #440]	; (8004fb4 <_dtoa_r+0x8cc>)
 8004dfa:	f7fb fbd9 	bl	80005b0 <__aeabi_dmul>
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2300      	movs	r3, #0
 8004e02:	4680      	mov	r8, r0
 8004e04:	4689      	mov	r9, r1
 8004e06:	f7fb fe3b 	bl	8000a80 <__aeabi_dcmpeq>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	d09b      	beq.n	8004d46 <_dtoa_r+0x65e>
 8004e0e:	e7cd      	b.n	8004dac <_dtoa_r+0x6c4>
 8004e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	f000 80d0 	beq.w	8004fb8 <_dtoa_r+0x8d0>
 8004e18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004e1a:	2a01      	cmp	r2, #1
 8004e1c:	f300 80ae 	bgt.w	8004f7c <_dtoa_r+0x894>
 8004e20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e22:	2a00      	cmp	r2, #0
 8004e24:	f000 80a6 	beq.w	8004f74 <_dtoa_r+0x88c>
 8004e28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e2e:	9f06      	ldr	r7, [sp, #24]
 8004e30:	9a06      	ldr	r2, [sp, #24]
 8004e32:	2101      	movs	r1, #1
 8004e34:	441a      	add	r2, r3
 8004e36:	9206      	str	r2, [sp, #24]
 8004e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	441a      	add	r2, r3
 8004e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e40:	f000 fb5e 	bl	8005500 <__i2b>
 8004e44:	4606      	mov	r6, r0
 8004e46:	2f00      	cmp	r7, #0
 8004e48:	dd0c      	ble.n	8004e64 <_dtoa_r+0x77c>
 8004e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dd09      	ble.n	8004e64 <_dtoa_r+0x77c>
 8004e50:	42bb      	cmp	r3, r7
 8004e52:	bfa8      	it	ge
 8004e54:	463b      	movge	r3, r7
 8004e56:	9a06      	ldr	r2, [sp, #24]
 8004e58:	1aff      	subs	r7, r7, r3
 8004e5a:	1ad2      	subs	r2, r2, r3
 8004e5c:	9206      	str	r2, [sp, #24]
 8004e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	9309      	str	r3, [sp, #36]	; 0x24
 8004e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e66:	b1f3      	cbz	r3, 8004ea6 <_dtoa_r+0x7be>
 8004e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80a8 	beq.w	8004fc0 <_dtoa_r+0x8d8>
 8004e70:	2c00      	cmp	r4, #0
 8004e72:	dd10      	ble.n	8004e96 <_dtoa_r+0x7ae>
 8004e74:	4631      	mov	r1, r6
 8004e76:	4622      	mov	r2, r4
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 fbff 	bl	800567c <__pow5mult>
 8004e7e:	465a      	mov	r2, fp
 8004e80:	4601      	mov	r1, r0
 8004e82:	4606      	mov	r6, r0
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 fb51 	bl	800552c <__multiply>
 8004e8a:	4680      	mov	r8, r0
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fa80 	bl	8005394 <_Bfree>
 8004e94:	46c3      	mov	fp, r8
 8004e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e98:	1b1a      	subs	r2, r3, r4
 8004e9a:	d004      	beq.n	8004ea6 <_dtoa_r+0x7be>
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f000 fbec 	bl	800567c <__pow5mult>
 8004ea4:	4683      	mov	fp, r0
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f000 fb29 	bl	8005500 <__i2b>
 8004eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f340 8086 	ble.w	8004fc4 <_dtoa_r+0x8dc>
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4601      	mov	r1, r0
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f000 fbdd 	bl	800567c <__pow5mult>
 8004ec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	dd7f      	ble.n	8004fca <_dtoa_r+0x8e2>
 8004eca:	f04f 0800 	mov.w	r8, #0
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ed4:	6918      	ldr	r0, [r3, #16]
 8004ed6:	f000 fac5 	bl	8005464 <__hi0bits>
 8004eda:	f1c0 0020 	rsb	r0, r0, #32
 8004ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee0:	4418      	add	r0, r3
 8004ee2:	f010 001f 	ands.w	r0, r0, #31
 8004ee6:	f000 8092 	beq.w	800500e <_dtoa_r+0x926>
 8004eea:	f1c0 0320 	rsb	r3, r0, #32
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	f340 808a 	ble.w	8005008 <_dtoa_r+0x920>
 8004ef4:	f1c0 001c 	rsb	r0, r0, #28
 8004ef8:	9b06      	ldr	r3, [sp, #24]
 8004efa:	4407      	add	r7, r0
 8004efc:	4403      	add	r3, r0
 8004efe:	9306      	str	r3, [sp, #24]
 8004f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f02:	4403      	add	r3, r0
 8004f04:	9309      	str	r3, [sp, #36]	; 0x24
 8004f06:	9b06      	ldr	r3, [sp, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	dd05      	ble.n	8004f18 <_dtoa_r+0x830>
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4628      	mov	r0, r5
 8004f12:	f000 fc0d 	bl	8005730 <__lshift>
 8004f16:	4683      	mov	fp, r0
 8004f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	dd05      	ble.n	8004f2a <_dtoa_r+0x842>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	461a      	mov	r2, r3
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 fc04 	bl	8005730 <__lshift>
 8004f28:	4604      	mov	r4, r0
 8004f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d070      	beq.n	8005012 <_dtoa_r+0x92a>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4658      	mov	r0, fp
 8004f34:	f000 fc6c 	bl	8005810 <__mcmp>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	da6a      	bge.n	8005012 <_dtoa_r+0x92a>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4659      	mov	r1, fp
 8004f40:	220a      	movs	r2, #10
 8004f42:	4628      	mov	r0, r5
 8004f44:	f000 fa48 	bl	80053d8 <__multadd>
 8004f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f4a:	4683      	mov	fp, r0
 8004f4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8194 	beq.w	800527e <_dtoa_r+0xb96>
 8004f56:	4631      	mov	r1, r6
 8004f58:	2300      	movs	r3, #0
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 fa3b 	bl	80053d8 <__multadd>
 8004f62:	f1b9 0f00 	cmp.w	r9, #0
 8004f66:	4606      	mov	r6, r0
 8004f68:	f300 8093 	bgt.w	8005092 <_dtoa_r+0x9aa>
 8004f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	dc57      	bgt.n	8005022 <_dtoa_r+0x93a>
 8004f72:	e08e      	b.n	8005092 <_dtoa_r+0x9aa>
 8004f74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f7a:	e757      	b.n	8004e2c <_dtoa_r+0x744>
 8004f7c:	9b08      	ldr	r3, [sp, #32]
 8004f7e:	1e5c      	subs	r4, r3, #1
 8004f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	bfb7      	itett	lt
 8004f86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004f88:	1b1c      	subge	r4, r3, r4
 8004f8a:	1ae2      	sublt	r2, r4, r3
 8004f8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004f8e:	bfbe      	ittt	lt
 8004f90:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004f92:	189b      	addlt	r3, r3, r2
 8004f94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004f96:	9b08      	ldr	r3, [sp, #32]
 8004f98:	bfb8      	it	lt
 8004f9a:	2400      	movlt	r4, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bfbb      	ittet	lt
 8004fa0:	9b06      	ldrlt	r3, [sp, #24]
 8004fa2:	9a08      	ldrlt	r2, [sp, #32]
 8004fa4:	9f06      	ldrge	r7, [sp, #24]
 8004fa6:	1a9f      	sublt	r7, r3, r2
 8004fa8:	bfac      	ite	ge
 8004faa:	9b08      	ldrge	r3, [sp, #32]
 8004fac:	2300      	movlt	r3, #0
 8004fae:	e73f      	b.n	8004e30 <_dtoa_r+0x748>
 8004fb0:	3fe00000 	.word	0x3fe00000
 8004fb4:	40240000 	.word	0x40240000
 8004fb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004fba:	9f06      	ldr	r7, [sp, #24]
 8004fbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004fbe:	e742      	b.n	8004e46 <_dtoa_r+0x75e>
 8004fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fc2:	e76b      	b.n	8004e9c <_dtoa_r+0x7b4>
 8004fc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	dc19      	bgt.n	8004ffe <_dtoa_r+0x916>
 8004fca:	9b04      	ldr	r3, [sp, #16]
 8004fcc:	b9bb      	cbnz	r3, 8004ffe <_dtoa_r+0x916>
 8004fce:	9b05      	ldr	r3, [sp, #20]
 8004fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fd4:	b99b      	cbnz	r3, 8004ffe <_dtoa_r+0x916>
 8004fd6:	9b05      	ldr	r3, [sp, #20]
 8004fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fdc:	0d1b      	lsrs	r3, r3, #20
 8004fde:	051b      	lsls	r3, r3, #20
 8004fe0:	b183      	cbz	r3, 8005004 <_dtoa_r+0x91c>
 8004fe2:	f04f 0801 	mov.w	r8, #1
 8004fe6:	9b06      	ldr	r3, [sp, #24]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	9306      	str	r3, [sp, #24]
 8004fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f47f af6a 	bne.w	8004ece <_dtoa_r+0x7e6>
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	e76f      	b.n	8004ede <_dtoa_r+0x7f6>
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	e7f6      	b.n	8004ff2 <_dtoa_r+0x90a>
 8005004:	4698      	mov	r8, r3
 8005006:	e7f4      	b.n	8004ff2 <_dtoa_r+0x90a>
 8005008:	f43f af7d 	beq.w	8004f06 <_dtoa_r+0x81e>
 800500c:	4618      	mov	r0, r3
 800500e:	301c      	adds	r0, #28
 8005010:	e772      	b.n	8004ef8 <_dtoa_r+0x810>
 8005012:	9b08      	ldr	r3, [sp, #32]
 8005014:	2b00      	cmp	r3, #0
 8005016:	dc36      	bgt.n	8005086 <_dtoa_r+0x99e>
 8005018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800501a:	2b02      	cmp	r3, #2
 800501c:	dd33      	ble.n	8005086 <_dtoa_r+0x99e>
 800501e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005022:	f1b9 0f00 	cmp.w	r9, #0
 8005026:	d10d      	bne.n	8005044 <_dtoa_r+0x95c>
 8005028:	4621      	mov	r1, r4
 800502a:	464b      	mov	r3, r9
 800502c:	2205      	movs	r2, #5
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f9d2 	bl	80053d8 <__multadd>
 8005034:	4601      	mov	r1, r0
 8005036:	4604      	mov	r4, r0
 8005038:	4658      	mov	r0, fp
 800503a:	f000 fbe9 	bl	8005810 <__mcmp>
 800503e:	2800      	cmp	r0, #0
 8005040:	f73f adb8 	bgt.w	8004bb4 <_dtoa_r+0x4cc>
 8005044:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005046:	9f03      	ldr	r7, [sp, #12]
 8005048:	ea6f 0a03 	mvn.w	sl, r3
 800504c:	f04f 0800 	mov.w	r8, #0
 8005050:	4621      	mov	r1, r4
 8005052:	4628      	mov	r0, r5
 8005054:	f000 f99e 	bl	8005394 <_Bfree>
 8005058:	2e00      	cmp	r6, #0
 800505a:	f43f aea7 	beq.w	8004dac <_dtoa_r+0x6c4>
 800505e:	f1b8 0f00 	cmp.w	r8, #0
 8005062:	d005      	beq.n	8005070 <_dtoa_r+0x988>
 8005064:	45b0      	cmp	r8, r6
 8005066:	d003      	beq.n	8005070 <_dtoa_r+0x988>
 8005068:	4641      	mov	r1, r8
 800506a:	4628      	mov	r0, r5
 800506c:	f000 f992 	bl	8005394 <_Bfree>
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	f000 f98e 	bl	8005394 <_Bfree>
 8005078:	e698      	b.n	8004dac <_dtoa_r+0x6c4>
 800507a:	2400      	movs	r4, #0
 800507c:	4626      	mov	r6, r4
 800507e:	e7e1      	b.n	8005044 <_dtoa_r+0x95c>
 8005080:	46c2      	mov	sl, r8
 8005082:	4626      	mov	r6, r4
 8005084:	e596      	b.n	8004bb4 <_dtoa_r+0x4cc>
 8005086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80fd 	beq.w	800528c <_dtoa_r+0xba4>
 8005092:	2f00      	cmp	r7, #0
 8005094:	dd05      	ble.n	80050a2 <_dtoa_r+0x9ba>
 8005096:	4631      	mov	r1, r6
 8005098:	463a      	mov	r2, r7
 800509a:	4628      	mov	r0, r5
 800509c:	f000 fb48 	bl	8005730 <__lshift>
 80050a0:	4606      	mov	r6, r0
 80050a2:	f1b8 0f00 	cmp.w	r8, #0
 80050a6:	d05c      	beq.n	8005162 <_dtoa_r+0xa7a>
 80050a8:	4628      	mov	r0, r5
 80050aa:	6871      	ldr	r1, [r6, #4]
 80050ac:	f000 f932 	bl	8005314 <_Balloc>
 80050b0:	4607      	mov	r7, r0
 80050b2:	b928      	cbnz	r0, 80050c0 <_dtoa_r+0x9d8>
 80050b4:	4602      	mov	r2, r0
 80050b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80050ba:	4b7f      	ldr	r3, [pc, #508]	; (80052b8 <_dtoa_r+0xbd0>)
 80050bc:	f7ff bb28 	b.w	8004710 <_dtoa_r+0x28>
 80050c0:	6932      	ldr	r2, [r6, #16]
 80050c2:	f106 010c 	add.w	r1, r6, #12
 80050c6:	3202      	adds	r2, #2
 80050c8:	0092      	lsls	r2, r2, #2
 80050ca:	300c      	adds	r0, #12
 80050cc:	f000 f914 	bl	80052f8 <memcpy>
 80050d0:	2201      	movs	r2, #1
 80050d2:	4639      	mov	r1, r7
 80050d4:	4628      	mov	r0, r5
 80050d6:	f000 fb2b 	bl	8005730 <__lshift>
 80050da:	46b0      	mov	r8, r6
 80050dc:	4606      	mov	r6, r0
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	3301      	adds	r3, #1
 80050e2:	9308      	str	r3, [sp, #32]
 80050e4:	9b03      	ldr	r3, [sp, #12]
 80050e6:	444b      	add	r3, r9
 80050e8:	930a      	str	r3, [sp, #40]	; 0x28
 80050ea:	9b04      	ldr	r3, [sp, #16]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	9309      	str	r3, [sp, #36]	; 0x24
 80050f2:	9b08      	ldr	r3, [sp, #32]
 80050f4:	4621      	mov	r1, r4
 80050f6:	3b01      	subs	r3, #1
 80050f8:	4658      	mov	r0, fp
 80050fa:	9304      	str	r3, [sp, #16]
 80050fc:	f7ff fa66 	bl	80045cc <quorem>
 8005100:	4603      	mov	r3, r0
 8005102:	4641      	mov	r1, r8
 8005104:	3330      	adds	r3, #48	; 0x30
 8005106:	9006      	str	r0, [sp, #24]
 8005108:	4658      	mov	r0, fp
 800510a:	930b      	str	r3, [sp, #44]	; 0x2c
 800510c:	f000 fb80 	bl	8005810 <__mcmp>
 8005110:	4632      	mov	r2, r6
 8005112:	4681      	mov	r9, r0
 8005114:	4621      	mov	r1, r4
 8005116:	4628      	mov	r0, r5
 8005118:	f000 fb96 	bl	8005848 <__mdiff>
 800511c:	68c2      	ldr	r2, [r0, #12]
 800511e:	4607      	mov	r7, r0
 8005120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005122:	bb02      	cbnz	r2, 8005166 <_dtoa_r+0xa7e>
 8005124:	4601      	mov	r1, r0
 8005126:	4658      	mov	r0, fp
 8005128:	f000 fb72 	bl	8005810 <__mcmp>
 800512c:	4602      	mov	r2, r0
 800512e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005130:	4639      	mov	r1, r7
 8005132:	4628      	mov	r0, r5
 8005134:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005138:	f000 f92c 	bl	8005394 <_Bfree>
 800513c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800513e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005140:	9f08      	ldr	r7, [sp, #32]
 8005142:	ea43 0102 	orr.w	r1, r3, r2
 8005146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005148:	430b      	orrs	r3, r1
 800514a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800514c:	d10d      	bne.n	800516a <_dtoa_r+0xa82>
 800514e:	2b39      	cmp	r3, #57	; 0x39
 8005150:	d029      	beq.n	80051a6 <_dtoa_r+0xabe>
 8005152:	f1b9 0f00 	cmp.w	r9, #0
 8005156:	dd01      	ble.n	800515c <_dtoa_r+0xa74>
 8005158:	9b06      	ldr	r3, [sp, #24]
 800515a:	3331      	adds	r3, #49	; 0x31
 800515c:	9a04      	ldr	r2, [sp, #16]
 800515e:	7013      	strb	r3, [r2, #0]
 8005160:	e776      	b.n	8005050 <_dtoa_r+0x968>
 8005162:	4630      	mov	r0, r6
 8005164:	e7b9      	b.n	80050da <_dtoa_r+0x9f2>
 8005166:	2201      	movs	r2, #1
 8005168:	e7e2      	b.n	8005130 <_dtoa_r+0xa48>
 800516a:	f1b9 0f00 	cmp.w	r9, #0
 800516e:	db06      	blt.n	800517e <_dtoa_r+0xa96>
 8005170:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005172:	ea41 0909 	orr.w	r9, r1, r9
 8005176:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005178:	ea59 0101 	orrs.w	r1, r9, r1
 800517c:	d120      	bne.n	80051c0 <_dtoa_r+0xad8>
 800517e:	2a00      	cmp	r2, #0
 8005180:	ddec      	ble.n	800515c <_dtoa_r+0xa74>
 8005182:	4659      	mov	r1, fp
 8005184:	2201      	movs	r2, #1
 8005186:	4628      	mov	r0, r5
 8005188:	9308      	str	r3, [sp, #32]
 800518a:	f000 fad1 	bl	8005730 <__lshift>
 800518e:	4621      	mov	r1, r4
 8005190:	4683      	mov	fp, r0
 8005192:	f000 fb3d 	bl	8005810 <__mcmp>
 8005196:	2800      	cmp	r0, #0
 8005198:	9b08      	ldr	r3, [sp, #32]
 800519a:	dc02      	bgt.n	80051a2 <_dtoa_r+0xaba>
 800519c:	d1de      	bne.n	800515c <_dtoa_r+0xa74>
 800519e:	07da      	lsls	r2, r3, #31
 80051a0:	d5dc      	bpl.n	800515c <_dtoa_r+0xa74>
 80051a2:	2b39      	cmp	r3, #57	; 0x39
 80051a4:	d1d8      	bne.n	8005158 <_dtoa_r+0xa70>
 80051a6:	2339      	movs	r3, #57	; 0x39
 80051a8:	9a04      	ldr	r2, [sp, #16]
 80051aa:	7013      	strb	r3, [r2, #0]
 80051ac:	463b      	mov	r3, r7
 80051ae:	461f      	mov	r7, r3
 80051b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	2a39      	cmp	r2, #57	; 0x39
 80051b8:	d050      	beq.n	800525c <_dtoa_r+0xb74>
 80051ba:	3201      	adds	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e747      	b.n	8005050 <_dtoa_r+0x968>
 80051c0:	2a00      	cmp	r2, #0
 80051c2:	dd03      	ble.n	80051cc <_dtoa_r+0xae4>
 80051c4:	2b39      	cmp	r3, #57	; 0x39
 80051c6:	d0ee      	beq.n	80051a6 <_dtoa_r+0xabe>
 80051c8:	3301      	adds	r3, #1
 80051ca:	e7c7      	b.n	800515c <_dtoa_r+0xa74>
 80051cc:	9a08      	ldr	r2, [sp, #32]
 80051ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80051d4:	428a      	cmp	r2, r1
 80051d6:	d02a      	beq.n	800522e <_dtoa_r+0xb46>
 80051d8:	4659      	mov	r1, fp
 80051da:	2300      	movs	r3, #0
 80051dc:	220a      	movs	r2, #10
 80051de:	4628      	mov	r0, r5
 80051e0:	f000 f8fa 	bl	80053d8 <__multadd>
 80051e4:	45b0      	cmp	r8, r6
 80051e6:	4683      	mov	fp, r0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	f04f 020a 	mov.w	r2, #10
 80051f0:	4641      	mov	r1, r8
 80051f2:	4628      	mov	r0, r5
 80051f4:	d107      	bne.n	8005206 <_dtoa_r+0xb1e>
 80051f6:	f000 f8ef 	bl	80053d8 <__multadd>
 80051fa:	4680      	mov	r8, r0
 80051fc:	4606      	mov	r6, r0
 80051fe:	9b08      	ldr	r3, [sp, #32]
 8005200:	3301      	adds	r3, #1
 8005202:	9308      	str	r3, [sp, #32]
 8005204:	e775      	b.n	80050f2 <_dtoa_r+0xa0a>
 8005206:	f000 f8e7 	bl	80053d8 <__multadd>
 800520a:	4631      	mov	r1, r6
 800520c:	4680      	mov	r8, r0
 800520e:	2300      	movs	r3, #0
 8005210:	220a      	movs	r2, #10
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f8e0 	bl	80053d8 <__multadd>
 8005218:	4606      	mov	r6, r0
 800521a:	e7f0      	b.n	80051fe <_dtoa_r+0xb16>
 800521c:	f1b9 0f00 	cmp.w	r9, #0
 8005220:	bfcc      	ite	gt
 8005222:	464f      	movgt	r7, r9
 8005224:	2701      	movle	r7, #1
 8005226:	f04f 0800 	mov.w	r8, #0
 800522a:	9a03      	ldr	r2, [sp, #12]
 800522c:	4417      	add	r7, r2
 800522e:	4659      	mov	r1, fp
 8005230:	2201      	movs	r2, #1
 8005232:	4628      	mov	r0, r5
 8005234:	9308      	str	r3, [sp, #32]
 8005236:	f000 fa7b 	bl	8005730 <__lshift>
 800523a:	4621      	mov	r1, r4
 800523c:	4683      	mov	fp, r0
 800523e:	f000 fae7 	bl	8005810 <__mcmp>
 8005242:	2800      	cmp	r0, #0
 8005244:	dcb2      	bgt.n	80051ac <_dtoa_r+0xac4>
 8005246:	d102      	bne.n	800524e <_dtoa_r+0xb66>
 8005248:	9b08      	ldr	r3, [sp, #32]
 800524a:	07db      	lsls	r3, r3, #31
 800524c:	d4ae      	bmi.n	80051ac <_dtoa_r+0xac4>
 800524e:	463b      	mov	r3, r7
 8005250:	461f      	mov	r7, r3
 8005252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005256:	2a30      	cmp	r2, #48	; 0x30
 8005258:	d0fa      	beq.n	8005250 <_dtoa_r+0xb68>
 800525a:	e6f9      	b.n	8005050 <_dtoa_r+0x968>
 800525c:	9a03      	ldr	r2, [sp, #12]
 800525e:	429a      	cmp	r2, r3
 8005260:	d1a5      	bne.n	80051ae <_dtoa_r+0xac6>
 8005262:	2331      	movs	r3, #49	; 0x31
 8005264:	f10a 0a01 	add.w	sl, sl, #1
 8005268:	e779      	b.n	800515e <_dtoa_r+0xa76>
 800526a:	4b14      	ldr	r3, [pc, #80]	; (80052bc <_dtoa_r+0xbd4>)
 800526c:	f7ff baa8 	b.w	80047c0 <_dtoa_r+0xd8>
 8005270:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005272:	2b00      	cmp	r3, #0
 8005274:	f47f aa81 	bne.w	800477a <_dtoa_r+0x92>
 8005278:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <_dtoa_r+0xbd8>)
 800527a:	f7ff baa1 	b.w	80047c0 <_dtoa_r+0xd8>
 800527e:	f1b9 0f00 	cmp.w	r9, #0
 8005282:	dc03      	bgt.n	800528c <_dtoa_r+0xba4>
 8005284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005286:	2b02      	cmp	r3, #2
 8005288:	f73f aecb 	bgt.w	8005022 <_dtoa_r+0x93a>
 800528c:	9f03      	ldr	r7, [sp, #12]
 800528e:	4621      	mov	r1, r4
 8005290:	4658      	mov	r0, fp
 8005292:	f7ff f99b 	bl	80045cc <quorem>
 8005296:	9a03      	ldr	r2, [sp, #12]
 8005298:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800529c:	f807 3b01 	strb.w	r3, [r7], #1
 80052a0:	1aba      	subs	r2, r7, r2
 80052a2:	4591      	cmp	r9, r2
 80052a4:	ddba      	ble.n	800521c <_dtoa_r+0xb34>
 80052a6:	4659      	mov	r1, fp
 80052a8:	2300      	movs	r3, #0
 80052aa:	220a      	movs	r2, #10
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 f893 	bl	80053d8 <__multadd>
 80052b2:	4683      	mov	fp, r0
 80052b4:	e7eb      	b.n	800528e <_dtoa_r+0xba6>
 80052b6:	bf00      	nop
 80052b8:	0800718b 	.word	0x0800718b
 80052bc:	080070e8 	.word	0x080070e8
 80052c0:	0800710c 	.word	0x0800710c

080052c4 <_localeconv_r>:
 80052c4:	4800      	ldr	r0, [pc, #0]	; (80052c8 <_localeconv_r+0x4>)
 80052c6:	4770      	bx	lr
 80052c8:	20000160 	.word	0x20000160

080052cc <malloc>:
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <malloc+0xc>)
 80052ce:	4601      	mov	r1, r0
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	f000 bc1d 	b.w	8005b10 <_malloc_r>
 80052d6:	bf00      	nop
 80052d8:	2000000c 	.word	0x2000000c

080052dc <memchr>:
 80052dc:	4603      	mov	r3, r0
 80052de:	b510      	push	{r4, lr}
 80052e0:	b2c9      	uxtb	r1, r1
 80052e2:	4402      	add	r2, r0
 80052e4:	4293      	cmp	r3, r2
 80052e6:	4618      	mov	r0, r3
 80052e8:	d101      	bne.n	80052ee <memchr+0x12>
 80052ea:	2000      	movs	r0, #0
 80052ec:	e003      	b.n	80052f6 <memchr+0x1a>
 80052ee:	7804      	ldrb	r4, [r0, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	428c      	cmp	r4, r1
 80052f4:	d1f6      	bne.n	80052e4 <memchr+0x8>
 80052f6:	bd10      	pop	{r4, pc}

080052f8 <memcpy>:
 80052f8:	440a      	add	r2, r1
 80052fa:	4291      	cmp	r1, r2
 80052fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005300:	d100      	bne.n	8005304 <memcpy+0xc>
 8005302:	4770      	bx	lr
 8005304:	b510      	push	{r4, lr}
 8005306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800530a:	4291      	cmp	r1, r2
 800530c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005310:	d1f9      	bne.n	8005306 <memcpy+0xe>
 8005312:	bd10      	pop	{r4, pc}

08005314 <_Balloc>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005318:	4604      	mov	r4, r0
 800531a:	460d      	mov	r5, r1
 800531c:	b976      	cbnz	r6, 800533c <_Balloc+0x28>
 800531e:	2010      	movs	r0, #16
 8005320:	f7ff ffd4 	bl	80052cc <malloc>
 8005324:	4602      	mov	r2, r0
 8005326:	6260      	str	r0, [r4, #36]	; 0x24
 8005328:	b920      	cbnz	r0, 8005334 <_Balloc+0x20>
 800532a:	2166      	movs	r1, #102	; 0x66
 800532c:	4b17      	ldr	r3, [pc, #92]	; (800538c <_Balloc+0x78>)
 800532e:	4818      	ldr	r0, [pc, #96]	; (8005390 <_Balloc+0x7c>)
 8005330:	f000 fdce 	bl	8005ed0 <__assert_func>
 8005334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005338:	6006      	str	r6, [r0, #0]
 800533a:	60c6      	str	r6, [r0, #12]
 800533c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800533e:	68f3      	ldr	r3, [r6, #12]
 8005340:	b183      	cbz	r3, 8005364 <_Balloc+0x50>
 8005342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800534a:	b9b8      	cbnz	r0, 800537c <_Balloc+0x68>
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f605 	lsl.w	r6, r1, r5
 8005352:	1d72      	adds	r2, r6, #5
 8005354:	4620      	mov	r0, r4
 8005356:	0092      	lsls	r2, r2, #2
 8005358:	f000 fb5e 	bl	8005a18 <_calloc_r>
 800535c:	b160      	cbz	r0, 8005378 <_Balloc+0x64>
 800535e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005362:	e00e      	b.n	8005382 <_Balloc+0x6e>
 8005364:	2221      	movs	r2, #33	; 0x21
 8005366:	2104      	movs	r1, #4
 8005368:	4620      	mov	r0, r4
 800536a:	f000 fb55 	bl	8005a18 <_calloc_r>
 800536e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005370:	60f0      	str	r0, [r6, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e4      	bne.n	8005342 <_Balloc+0x2e>
 8005378:	2000      	movs	r0, #0
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	6802      	ldr	r2, [r0, #0]
 800537e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005382:	2300      	movs	r3, #0
 8005384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005388:	e7f7      	b.n	800537a <_Balloc+0x66>
 800538a:	bf00      	nop
 800538c:	08007119 	.word	0x08007119
 8005390:	0800719c 	.word	0x0800719c

08005394 <_Bfree>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005398:	4605      	mov	r5, r0
 800539a:	460c      	mov	r4, r1
 800539c:	b976      	cbnz	r6, 80053bc <_Bfree+0x28>
 800539e:	2010      	movs	r0, #16
 80053a0:	f7ff ff94 	bl	80052cc <malloc>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6268      	str	r0, [r5, #36]	; 0x24
 80053a8:	b920      	cbnz	r0, 80053b4 <_Bfree+0x20>
 80053aa:	218a      	movs	r1, #138	; 0x8a
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <_Bfree+0x3c>)
 80053ae:	4809      	ldr	r0, [pc, #36]	; (80053d4 <_Bfree+0x40>)
 80053b0:	f000 fd8e 	bl	8005ed0 <__assert_func>
 80053b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053b8:	6006      	str	r6, [r0, #0]
 80053ba:	60c6      	str	r6, [r0, #12]
 80053bc:	b13c      	cbz	r4, 80053ce <_Bfree+0x3a>
 80053be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053c0:	6862      	ldr	r2, [r4, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053c8:	6021      	str	r1, [r4, #0]
 80053ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	08007119 	.word	0x08007119
 80053d4:	0800719c 	.word	0x0800719c

080053d8 <__multadd>:
 80053d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053dc:	4607      	mov	r7, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	461e      	mov	r6, r3
 80053e2:	2000      	movs	r0, #0
 80053e4:	690d      	ldr	r5, [r1, #16]
 80053e6:	f101 0c14 	add.w	ip, r1, #20
 80053ea:	f8dc 3000 	ldr.w	r3, [ip]
 80053ee:	3001      	adds	r0, #1
 80053f0:	b299      	uxth	r1, r3
 80053f2:	fb02 6101 	mla	r1, r2, r1, r6
 80053f6:	0c1e      	lsrs	r6, r3, #16
 80053f8:	0c0b      	lsrs	r3, r1, #16
 80053fa:	fb02 3306 	mla	r3, r2, r6, r3
 80053fe:	b289      	uxth	r1, r1
 8005400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005404:	4285      	cmp	r5, r0
 8005406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800540a:	f84c 1b04 	str.w	r1, [ip], #4
 800540e:	dcec      	bgt.n	80053ea <__multadd+0x12>
 8005410:	b30e      	cbz	r6, 8005456 <__multadd+0x7e>
 8005412:	68a3      	ldr	r3, [r4, #8]
 8005414:	42ab      	cmp	r3, r5
 8005416:	dc19      	bgt.n	800544c <__multadd+0x74>
 8005418:	6861      	ldr	r1, [r4, #4]
 800541a:	4638      	mov	r0, r7
 800541c:	3101      	adds	r1, #1
 800541e:	f7ff ff79 	bl	8005314 <_Balloc>
 8005422:	4680      	mov	r8, r0
 8005424:	b928      	cbnz	r0, 8005432 <__multadd+0x5a>
 8005426:	4602      	mov	r2, r0
 8005428:	21b5      	movs	r1, #181	; 0xb5
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <__multadd+0x84>)
 800542c:	480c      	ldr	r0, [pc, #48]	; (8005460 <__multadd+0x88>)
 800542e:	f000 fd4f 	bl	8005ed0 <__assert_func>
 8005432:	6922      	ldr	r2, [r4, #16]
 8005434:	f104 010c 	add.w	r1, r4, #12
 8005438:	3202      	adds	r2, #2
 800543a:	0092      	lsls	r2, r2, #2
 800543c:	300c      	adds	r0, #12
 800543e:	f7ff ff5b 	bl	80052f8 <memcpy>
 8005442:	4621      	mov	r1, r4
 8005444:	4638      	mov	r0, r7
 8005446:	f7ff ffa5 	bl	8005394 <_Bfree>
 800544a:	4644      	mov	r4, r8
 800544c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005450:	3501      	adds	r5, #1
 8005452:	615e      	str	r6, [r3, #20]
 8005454:	6125      	str	r5, [r4, #16]
 8005456:	4620      	mov	r0, r4
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545c:	0800718b 	.word	0x0800718b
 8005460:	0800719c 	.word	0x0800719c

08005464 <__hi0bits>:
 8005464:	0c02      	lsrs	r2, r0, #16
 8005466:	0412      	lsls	r2, r2, #16
 8005468:	4603      	mov	r3, r0
 800546a:	b9ca      	cbnz	r2, 80054a0 <__hi0bits+0x3c>
 800546c:	0403      	lsls	r3, r0, #16
 800546e:	2010      	movs	r0, #16
 8005470:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005474:	bf04      	itt	eq
 8005476:	021b      	lsleq	r3, r3, #8
 8005478:	3008      	addeq	r0, #8
 800547a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800547e:	bf04      	itt	eq
 8005480:	011b      	lsleq	r3, r3, #4
 8005482:	3004      	addeq	r0, #4
 8005484:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005488:	bf04      	itt	eq
 800548a:	009b      	lsleq	r3, r3, #2
 800548c:	3002      	addeq	r0, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	db05      	blt.n	800549e <__hi0bits+0x3a>
 8005492:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005496:	f100 0001 	add.w	r0, r0, #1
 800549a:	bf08      	it	eq
 800549c:	2020      	moveq	r0, #32
 800549e:	4770      	bx	lr
 80054a0:	2000      	movs	r0, #0
 80054a2:	e7e5      	b.n	8005470 <__hi0bits+0xc>

080054a4 <__lo0bits>:
 80054a4:	6803      	ldr	r3, [r0, #0]
 80054a6:	4602      	mov	r2, r0
 80054a8:	f013 0007 	ands.w	r0, r3, #7
 80054ac:	d00b      	beq.n	80054c6 <__lo0bits+0x22>
 80054ae:	07d9      	lsls	r1, r3, #31
 80054b0:	d421      	bmi.n	80054f6 <__lo0bits+0x52>
 80054b2:	0798      	lsls	r0, r3, #30
 80054b4:	bf49      	itett	mi
 80054b6:	085b      	lsrmi	r3, r3, #1
 80054b8:	089b      	lsrpl	r3, r3, #2
 80054ba:	2001      	movmi	r0, #1
 80054bc:	6013      	strmi	r3, [r2, #0]
 80054be:	bf5c      	itt	pl
 80054c0:	2002      	movpl	r0, #2
 80054c2:	6013      	strpl	r3, [r2, #0]
 80054c4:	4770      	bx	lr
 80054c6:	b299      	uxth	r1, r3
 80054c8:	b909      	cbnz	r1, 80054ce <__lo0bits+0x2a>
 80054ca:	2010      	movs	r0, #16
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	b2d9      	uxtb	r1, r3
 80054d0:	b909      	cbnz	r1, 80054d6 <__lo0bits+0x32>
 80054d2:	3008      	adds	r0, #8
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	0719      	lsls	r1, r3, #28
 80054d8:	bf04      	itt	eq
 80054da:	091b      	lsreq	r3, r3, #4
 80054dc:	3004      	addeq	r0, #4
 80054de:	0799      	lsls	r1, r3, #30
 80054e0:	bf04      	itt	eq
 80054e2:	089b      	lsreq	r3, r3, #2
 80054e4:	3002      	addeq	r0, #2
 80054e6:	07d9      	lsls	r1, r3, #31
 80054e8:	d403      	bmi.n	80054f2 <__lo0bits+0x4e>
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	f100 0001 	add.w	r0, r0, #1
 80054f0:	d003      	beq.n	80054fa <__lo0bits+0x56>
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	4770      	bx	lr
 80054f6:	2000      	movs	r0, #0
 80054f8:	4770      	bx	lr
 80054fa:	2020      	movs	r0, #32
 80054fc:	4770      	bx	lr
	...

08005500 <__i2b>:
 8005500:	b510      	push	{r4, lr}
 8005502:	460c      	mov	r4, r1
 8005504:	2101      	movs	r1, #1
 8005506:	f7ff ff05 	bl	8005314 <_Balloc>
 800550a:	4602      	mov	r2, r0
 800550c:	b928      	cbnz	r0, 800551a <__i2b+0x1a>
 800550e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <__i2b+0x24>)
 8005514:	4804      	ldr	r0, [pc, #16]	; (8005528 <__i2b+0x28>)
 8005516:	f000 fcdb 	bl	8005ed0 <__assert_func>
 800551a:	2301      	movs	r3, #1
 800551c:	6144      	str	r4, [r0, #20]
 800551e:	6103      	str	r3, [r0, #16]
 8005520:	bd10      	pop	{r4, pc}
 8005522:	bf00      	nop
 8005524:	0800718b 	.word	0x0800718b
 8005528:	0800719c 	.word	0x0800719c

0800552c <__multiply>:
 800552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	4691      	mov	r9, r2
 8005532:	690a      	ldr	r2, [r1, #16]
 8005534:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005538:	460c      	mov	r4, r1
 800553a:	429a      	cmp	r2, r3
 800553c:	bfbe      	ittt	lt
 800553e:	460b      	movlt	r3, r1
 8005540:	464c      	movlt	r4, r9
 8005542:	4699      	movlt	r9, r3
 8005544:	6927      	ldr	r7, [r4, #16]
 8005546:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800554a:	68a3      	ldr	r3, [r4, #8]
 800554c:	6861      	ldr	r1, [r4, #4]
 800554e:	eb07 060a 	add.w	r6, r7, sl
 8005552:	42b3      	cmp	r3, r6
 8005554:	b085      	sub	sp, #20
 8005556:	bfb8      	it	lt
 8005558:	3101      	addlt	r1, #1
 800555a:	f7ff fedb 	bl	8005314 <_Balloc>
 800555e:	b930      	cbnz	r0, 800556e <__multiply+0x42>
 8005560:	4602      	mov	r2, r0
 8005562:	f240 115d 	movw	r1, #349	; 0x15d
 8005566:	4b43      	ldr	r3, [pc, #268]	; (8005674 <__multiply+0x148>)
 8005568:	4843      	ldr	r0, [pc, #268]	; (8005678 <__multiply+0x14c>)
 800556a:	f000 fcb1 	bl	8005ed0 <__assert_func>
 800556e:	f100 0514 	add.w	r5, r0, #20
 8005572:	462b      	mov	r3, r5
 8005574:	2200      	movs	r2, #0
 8005576:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800557a:	4543      	cmp	r3, r8
 800557c:	d321      	bcc.n	80055c2 <__multiply+0x96>
 800557e:	f104 0314 	add.w	r3, r4, #20
 8005582:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005586:	f109 0314 	add.w	r3, r9, #20
 800558a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800558e:	9202      	str	r2, [sp, #8]
 8005590:	1b3a      	subs	r2, r7, r4
 8005592:	3a15      	subs	r2, #21
 8005594:	f022 0203 	bic.w	r2, r2, #3
 8005598:	3204      	adds	r2, #4
 800559a:	f104 0115 	add.w	r1, r4, #21
 800559e:	428f      	cmp	r7, r1
 80055a0:	bf38      	it	cc
 80055a2:	2204      	movcc	r2, #4
 80055a4:	9201      	str	r2, [sp, #4]
 80055a6:	9a02      	ldr	r2, [sp, #8]
 80055a8:	9303      	str	r3, [sp, #12]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d80c      	bhi.n	80055c8 <__multiply+0x9c>
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	dd03      	ble.n	80055ba <__multiply+0x8e>
 80055b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d059      	beq.n	800566e <__multiply+0x142>
 80055ba:	6106      	str	r6, [r0, #16]
 80055bc:	b005      	add	sp, #20
 80055be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c2:	f843 2b04 	str.w	r2, [r3], #4
 80055c6:	e7d8      	b.n	800557a <__multiply+0x4e>
 80055c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80055cc:	f1ba 0f00 	cmp.w	sl, #0
 80055d0:	d023      	beq.n	800561a <__multiply+0xee>
 80055d2:	46a9      	mov	r9, r5
 80055d4:	f04f 0c00 	mov.w	ip, #0
 80055d8:	f104 0e14 	add.w	lr, r4, #20
 80055dc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80055e0:	f8d9 1000 	ldr.w	r1, [r9]
 80055e4:	fa1f fb82 	uxth.w	fp, r2
 80055e8:	b289      	uxth	r1, r1
 80055ea:	fb0a 110b 	mla	r1, sl, fp, r1
 80055ee:	4461      	add	r1, ip
 80055f0:	f8d9 c000 	ldr.w	ip, [r9]
 80055f4:	0c12      	lsrs	r2, r2, #16
 80055f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80055fa:	fb0a c202 	mla	r2, sl, r2, ip
 80055fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005602:	b289      	uxth	r1, r1
 8005604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005608:	4577      	cmp	r7, lr
 800560a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800560e:	f849 1b04 	str.w	r1, [r9], #4
 8005612:	d8e3      	bhi.n	80055dc <__multiply+0xb0>
 8005614:	9a01      	ldr	r2, [sp, #4]
 8005616:	f845 c002 	str.w	ip, [r5, r2]
 800561a:	9a03      	ldr	r2, [sp, #12]
 800561c:	3304      	adds	r3, #4
 800561e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005622:	f1b9 0f00 	cmp.w	r9, #0
 8005626:	d020      	beq.n	800566a <__multiply+0x13e>
 8005628:	46ae      	mov	lr, r5
 800562a:	f04f 0a00 	mov.w	sl, #0
 800562e:	6829      	ldr	r1, [r5, #0]
 8005630:	f104 0c14 	add.w	ip, r4, #20
 8005634:	f8bc b000 	ldrh.w	fp, [ip]
 8005638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800563c:	b289      	uxth	r1, r1
 800563e:	fb09 220b 	mla	r2, r9, fp, r2
 8005642:	4492      	add	sl, r2
 8005644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005648:	f84e 1b04 	str.w	r1, [lr], #4
 800564c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005650:	f8be 1000 	ldrh.w	r1, [lr]
 8005654:	0c12      	lsrs	r2, r2, #16
 8005656:	fb09 1102 	mla	r1, r9, r2, r1
 800565a:	4567      	cmp	r7, ip
 800565c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005664:	d8e6      	bhi.n	8005634 <__multiply+0x108>
 8005666:	9a01      	ldr	r2, [sp, #4]
 8005668:	50a9      	str	r1, [r5, r2]
 800566a:	3504      	adds	r5, #4
 800566c:	e79b      	b.n	80055a6 <__multiply+0x7a>
 800566e:	3e01      	subs	r6, #1
 8005670:	e79d      	b.n	80055ae <__multiply+0x82>
 8005672:	bf00      	nop
 8005674:	0800718b 	.word	0x0800718b
 8005678:	0800719c 	.word	0x0800719c

0800567c <__pow5mult>:
 800567c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005680:	4615      	mov	r5, r2
 8005682:	f012 0203 	ands.w	r2, r2, #3
 8005686:	4606      	mov	r6, r0
 8005688:	460f      	mov	r7, r1
 800568a:	d007      	beq.n	800569c <__pow5mult+0x20>
 800568c:	4c25      	ldr	r4, [pc, #148]	; (8005724 <__pow5mult+0xa8>)
 800568e:	3a01      	subs	r2, #1
 8005690:	2300      	movs	r3, #0
 8005692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005696:	f7ff fe9f 	bl	80053d8 <__multadd>
 800569a:	4607      	mov	r7, r0
 800569c:	10ad      	asrs	r5, r5, #2
 800569e:	d03d      	beq.n	800571c <__pow5mult+0xa0>
 80056a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80056a2:	b97c      	cbnz	r4, 80056c4 <__pow5mult+0x48>
 80056a4:	2010      	movs	r0, #16
 80056a6:	f7ff fe11 	bl	80052cc <malloc>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6270      	str	r0, [r6, #36]	; 0x24
 80056ae:	b928      	cbnz	r0, 80056bc <__pow5mult+0x40>
 80056b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80056b4:	4b1c      	ldr	r3, [pc, #112]	; (8005728 <__pow5mult+0xac>)
 80056b6:	481d      	ldr	r0, [pc, #116]	; (800572c <__pow5mult+0xb0>)
 80056b8:	f000 fc0a 	bl	8005ed0 <__assert_func>
 80056bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056c0:	6004      	str	r4, [r0, #0]
 80056c2:	60c4      	str	r4, [r0, #12]
 80056c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80056c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80056cc:	b94c      	cbnz	r4, 80056e2 <__pow5mult+0x66>
 80056ce:	f240 2171 	movw	r1, #625	; 0x271
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff ff14 	bl	8005500 <__i2b>
 80056d8:	2300      	movs	r3, #0
 80056da:	4604      	mov	r4, r0
 80056dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80056e0:	6003      	str	r3, [r0, #0]
 80056e2:	f04f 0900 	mov.w	r9, #0
 80056e6:	07eb      	lsls	r3, r5, #31
 80056e8:	d50a      	bpl.n	8005700 <__pow5mult+0x84>
 80056ea:	4639      	mov	r1, r7
 80056ec:	4622      	mov	r2, r4
 80056ee:	4630      	mov	r0, r6
 80056f0:	f7ff ff1c 	bl	800552c <__multiply>
 80056f4:	4680      	mov	r8, r0
 80056f6:	4639      	mov	r1, r7
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7ff fe4b 	bl	8005394 <_Bfree>
 80056fe:	4647      	mov	r7, r8
 8005700:	106d      	asrs	r5, r5, #1
 8005702:	d00b      	beq.n	800571c <__pow5mult+0xa0>
 8005704:	6820      	ldr	r0, [r4, #0]
 8005706:	b938      	cbnz	r0, 8005718 <__pow5mult+0x9c>
 8005708:	4622      	mov	r2, r4
 800570a:	4621      	mov	r1, r4
 800570c:	4630      	mov	r0, r6
 800570e:	f7ff ff0d 	bl	800552c <__multiply>
 8005712:	6020      	str	r0, [r4, #0]
 8005714:	f8c0 9000 	str.w	r9, [r0]
 8005718:	4604      	mov	r4, r0
 800571a:	e7e4      	b.n	80056e6 <__pow5mult+0x6a>
 800571c:	4638      	mov	r0, r7
 800571e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005722:	bf00      	nop
 8005724:	080072e8 	.word	0x080072e8
 8005728:	08007119 	.word	0x08007119
 800572c:	0800719c 	.word	0x0800719c

08005730 <__lshift>:
 8005730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	460c      	mov	r4, r1
 8005736:	4607      	mov	r7, r0
 8005738:	4691      	mov	r9, r2
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	6849      	ldr	r1, [r1, #4]
 800573e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005742:	68a3      	ldr	r3, [r4, #8]
 8005744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005748:	f108 0601 	add.w	r6, r8, #1
 800574c:	42b3      	cmp	r3, r6
 800574e:	db0b      	blt.n	8005768 <__lshift+0x38>
 8005750:	4638      	mov	r0, r7
 8005752:	f7ff fddf 	bl	8005314 <_Balloc>
 8005756:	4605      	mov	r5, r0
 8005758:	b948      	cbnz	r0, 800576e <__lshift+0x3e>
 800575a:	4602      	mov	r2, r0
 800575c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005760:	4b29      	ldr	r3, [pc, #164]	; (8005808 <__lshift+0xd8>)
 8005762:	482a      	ldr	r0, [pc, #168]	; (800580c <__lshift+0xdc>)
 8005764:	f000 fbb4 	bl	8005ed0 <__assert_func>
 8005768:	3101      	adds	r1, #1
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	e7ee      	b.n	800574c <__lshift+0x1c>
 800576e:	2300      	movs	r3, #0
 8005770:	f100 0114 	add.w	r1, r0, #20
 8005774:	f100 0210 	add.w	r2, r0, #16
 8005778:	4618      	mov	r0, r3
 800577a:	4553      	cmp	r3, sl
 800577c:	db37      	blt.n	80057ee <__lshift+0xbe>
 800577e:	6920      	ldr	r0, [r4, #16]
 8005780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005784:	f104 0314 	add.w	r3, r4, #20
 8005788:	f019 091f 	ands.w	r9, r9, #31
 800578c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005794:	d02f      	beq.n	80057f6 <__lshift+0xc6>
 8005796:	468a      	mov	sl, r1
 8005798:	f04f 0c00 	mov.w	ip, #0
 800579c:	f1c9 0e20 	rsb	lr, r9, #32
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	fa02 f209 	lsl.w	r2, r2, r9
 80057a6:	ea42 020c 	orr.w	r2, r2, ip
 80057aa:	f84a 2b04 	str.w	r2, [sl], #4
 80057ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b2:	4298      	cmp	r0, r3
 80057b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80057b8:	d8f2      	bhi.n	80057a0 <__lshift+0x70>
 80057ba:	1b03      	subs	r3, r0, r4
 80057bc:	3b15      	subs	r3, #21
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	3304      	adds	r3, #4
 80057c4:	f104 0215 	add.w	r2, r4, #21
 80057c8:	4290      	cmp	r0, r2
 80057ca:	bf38      	it	cc
 80057cc:	2304      	movcc	r3, #4
 80057ce:	f841 c003 	str.w	ip, [r1, r3]
 80057d2:	f1bc 0f00 	cmp.w	ip, #0
 80057d6:	d001      	beq.n	80057dc <__lshift+0xac>
 80057d8:	f108 0602 	add.w	r6, r8, #2
 80057dc:	3e01      	subs	r6, #1
 80057de:	4638      	mov	r0, r7
 80057e0:	4621      	mov	r1, r4
 80057e2:	612e      	str	r6, [r5, #16]
 80057e4:	f7ff fdd6 	bl	8005394 <_Bfree>
 80057e8:	4628      	mov	r0, r5
 80057ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80057f2:	3301      	adds	r3, #1
 80057f4:	e7c1      	b.n	800577a <__lshift+0x4a>
 80057f6:	3904      	subs	r1, #4
 80057f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057fc:	4298      	cmp	r0, r3
 80057fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005802:	d8f9      	bhi.n	80057f8 <__lshift+0xc8>
 8005804:	e7ea      	b.n	80057dc <__lshift+0xac>
 8005806:	bf00      	nop
 8005808:	0800718b 	.word	0x0800718b
 800580c:	0800719c 	.word	0x0800719c

08005810 <__mcmp>:
 8005810:	4603      	mov	r3, r0
 8005812:	690a      	ldr	r2, [r1, #16]
 8005814:	6900      	ldr	r0, [r0, #16]
 8005816:	b530      	push	{r4, r5, lr}
 8005818:	1a80      	subs	r0, r0, r2
 800581a:	d10d      	bne.n	8005838 <__mcmp+0x28>
 800581c:	3314      	adds	r3, #20
 800581e:	3114      	adds	r1, #20
 8005820:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005824:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005828:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800582c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005830:	4295      	cmp	r5, r2
 8005832:	d002      	beq.n	800583a <__mcmp+0x2a>
 8005834:	d304      	bcc.n	8005840 <__mcmp+0x30>
 8005836:	2001      	movs	r0, #1
 8005838:	bd30      	pop	{r4, r5, pc}
 800583a:	42a3      	cmp	r3, r4
 800583c:	d3f4      	bcc.n	8005828 <__mcmp+0x18>
 800583e:	e7fb      	b.n	8005838 <__mcmp+0x28>
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	e7f8      	b.n	8005838 <__mcmp+0x28>
	...

08005848 <__mdiff>:
 8005848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584c:	460d      	mov	r5, r1
 800584e:	4607      	mov	r7, r0
 8005850:	4611      	mov	r1, r2
 8005852:	4628      	mov	r0, r5
 8005854:	4614      	mov	r4, r2
 8005856:	f7ff ffdb 	bl	8005810 <__mcmp>
 800585a:	1e06      	subs	r6, r0, #0
 800585c:	d111      	bne.n	8005882 <__mdiff+0x3a>
 800585e:	4631      	mov	r1, r6
 8005860:	4638      	mov	r0, r7
 8005862:	f7ff fd57 	bl	8005314 <_Balloc>
 8005866:	4602      	mov	r2, r0
 8005868:	b928      	cbnz	r0, 8005876 <__mdiff+0x2e>
 800586a:	f240 2132 	movw	r1, #562	; 0x232
 800586e:	4b3a      	ldr	r3, [pc, #232]	; (8005958 <__mdiff+0x110>)
 8005870:	483a      	ldr	r0, [pc, #232]	; (800595c <__mdiff+0x114>)
 8005872:	f000 fb2d 	bl	8005ed0 <__assert_func>
 8005876:	2301      	movs	r3, #1
 8005878:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800587c:	4610      	mov	r0, r2
 800587e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005882:	bfa4      	itt	ge
 8005884:	4623      	movge	r3, r4
 8005886:	462c      	movge	r4, r5
 8005888:	4638      	mov	r0, r7
 800588a:	6861      	ldr	r1, [r4, #4]
 800588c:	bfa6      	itte	ge
 800588e:	461d      	movge	r5, r3
 8005890:	2600      	movge	r6, #0
 8005892:	2601      	movlt	r6, #1
 8005894:	f7ff fd3e 	bl	8005314 <_Balloc>
 8005898:	4602      	mov	r2, r0
 800589a:	b918      	cbnz	r0, 80058a4 <__mdiff+0x5c>
 800589c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80058a0:	4b2d      	ldr	r3, [pc, #180]	; (8005958 <__mdiff+0x110>)
 80058a2:	e7e5      	b.n	8005870 <__mdiff+0x28>
 80058a4:	f102 0814 	add.w	r8, r2, #20
 80058a8:	46c2      	mov	sl, r8
 80058aa:	f04f 0c00 	mov.w	ip, #0
 80058ae:	6927      	ldr	r7, [r4, #16]
 80058b0:	60c6      	str	r6, [r0, #12]
 80058b2:	692e      	ldr	r6, [r5, #16]
 80058b4:	f104 0014 	add.w	r0, r4, #20
 80058b8:	f105 0914 	add.w	r9, r5, #20
 80058bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80058c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80058c4:	3410      	adds	r4, #16
 80058c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80058ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80058ce:	fa1f f18b 	uxth.w	r1, fp
 80058d2:	448c      	add	ip, r1
 80058d4:	b299      	uxth	r1, r3
 80058d6:	0c1b      	lsrs	r3, r3, #16
 80058d8:	ebac 0101 	sub.w	r1, ip, r1
 80058dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80058e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80058e4:	b289      	uxth	r1, r1
 80058e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80058ea:	454e      	cmp	r6, r9
 80058ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80058f0:	f84a 3b04 	str.w	r3, [sl], #4
 80058f4:	d8e7      	bhi.n	80058c6 <__mdiff+0x7e>
 80058f6:	1b73      	subs	r3, r6, r5
 80058f8:	3b15      	subs	r3, #21
 80058fa:	f023 0303 	bic.w	r3, r3, #3
 80058fe:	3515      	adds	r5, #21
 8005900:	3304      	adds	r3, #4
 8005902:	42ae      	cmp	r6, r5
 8005904:	bf38      	it	cc
 8005906:	2304      	movcc	r3, #4
 8005908:	4418      	add	r0, r3
 800590a:	4443      	add	r3, r8
 800590c:	461e      	mov	r6, r3
 800590e:	4605      	mov	r5, r0
 8005910:	4575      	cmp	r5, lr
 8005912:	d30e      	bcc.n	8005932 <__mdiff+0xea>
 8005914:	f10e 0103 	add.w	r1, lr, #3
 8005918:	1a09      	subs	r1, r1, r0
 800591a:	f021 0103 	bic.w	r1, r1, #3
 800591e:	3803      	subs	r0, #3
 8005920:	4586      	cmp	lr, r0
 8005922:	bf38      	it	cc
 8005924:	2100      	movcc	r1, #0
 8005926:	4419      	add	r1, r3
 8005928:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800592c:	b18b      	cbz	r3, 8005952 <__mdiff+0x10a>
 800592e:	6117      	str	r7, [r2, #16]
 8005930:	e7a4      	b.n	800587c <__mdiff+0x34>
 8005932:	f855 8b04 	ldr.w	r8, [r5], #4
 8005936:	fa1f f188 	uxth.w	r1, r8
 800593a:	4461      	add	r1, ip
 800593c:	140c      	asrs	r4, r1, #16
 800593e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005942:	b289      	uxth	r1, r1
 8005944:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005948:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800594c:	f846 1b04 	str.w	r1, [r6], #4
 8005950:	e7de      	b.n	8005910 <__mdiff+0xc8>
 8005952:	3f01      	subs	r7, #1
 8005954:	e7e8      	b.n	8005928 <__mdiff+0xe0>
 8005956:	bf00      	nop
 8005958:	0800718b 	.word	0x0800718b
 800595c:	0800719c 	.word	0x0800719c

08005960 <__d2b>:
 8005960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005964:	2101      	movs	r1, #1
 8005966:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800596a:	4690      	mov	r8, r2
 800596c:	461d      	mov	r5, r3
 800596e:	f7ff fcd1 	bl	8005314 <_Balloc>
 8005972:	4604      	mov	r4, r0
 8005974:	b930      	cbnz	r0, 8005984 <__d2b+0x24>
 8005976:	4602      	mov	r2, r0
 8005978:	f240 310a 	movw	r1, #778	; 0x30a
 800597c:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <__d2b+0xb0>)
 800597e:	4825      	ldr	r0, [pc, #148]	; (8005a14 <__d2b+0xb4>)
 8005980:	f000 faa6 	bl	8005ed0 <__assert_func>
 8005984:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005988:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800598c:	bb2d      	cbnz	r5, 80059da <__d2b+0x7a>
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	f1b8 0300 	subs.w	r3, r8, #0
 8005994:	d026      	beq.n	80059e4 <__d2b+0x84>
 8005996:	4668      	mov	r0, sp
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	f7ff fd83 	bl	80054a4 <__lo0bits>
 800599e:	9900      	ldr	r1, [sp, #0]
 80059a0:	b1f0      	cbz	r0, 80059e0 <__d2b+0x80>
 80059a2:	9a01      	ldr	r2, [sp, #4]
 80059a4:	f1c0 0320 	rsb	r3, r0, #32
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	430b      	orrs	r3, r1
 80059ae:	40c2      	lsrs	r2, r0
 80059b0:	6163      	str	r3, [r4, #20]
 80059b2:	9201      	str	r2, [sp, #4]
 80059b4:	9b01      	ldr	r3, [sp, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bf14      	ite	ne
 80059ba:	2102      	movne	r1, #2
 80059bc:	2101      	moveq	r1, #1
 80059be:	61a3      	str	r3, [r4, #24]
 80059c0:	6121      	str	r1, [r4, #16]
 80059c2:	b1c5      	cbz	r5, 80059f6 <__d2b+0x96>
 80059c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80059c8:	4405      	add	r5, r0
 80059ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80059ce:	603d      	str	r5, [r7, #0]
 80059d0:	6030      	str	r0, [r6, #0]
 80059d2:	4620      	mov	r0, r4
 80059d4:	b002      	add	sp, #8
 80059d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059de:	e7d6      	b.n	800598e <__d2b+0x2e>
 80059e0:	6161      	str	r1, [r4, #20]
 80059e2:	e7e7      	b.n	80059b4 <__d2b+0x54>
 80059e4:	a801      	add	r0, sp, #4
 80059e6:	f7ff fd5d 	bl	80054a4 <__lo0bits>
 80059ea:	2101      	movs	r1, #1
 80059ec:	9b01      	ldr	r3, [sp, #4]
 80059ee:	6121      	str	r1, [r4, #16]
 80059f0:	6163      	str	r3, [r4, #20]
 80059f2:	3020      	adds	r0, #32
 80059f4:	e7e5      	b.n	80059c2 <__d2b+0x62>
 80059f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80059fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80059fe:	6038      	str	r0, [r7, #0]
 8005a00:	6918      	ldr	r0, [r3, #16]
 8005a02:	f7ff fd2f 	bl	8005464 <__hi0bits>
 8005a06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005a0a:	6031      	str	r1, [r6, #0]
 8005a0c:	e7e1      	b.n	80059d2 <__d2b+0x72>
 8005a0e:	bf00      	nop
 8005a10:	0800718b 	.word	0x0800718b
 8005a14:	0800719c 	.word	0x0800719c

08005a18 <_calloc_r>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	fba1 5402 	umull	r5, r4, r1, r2
 8005a1e:	b934      	cbnz	r4, 8005a2e <_calloc_r+0x16>
 8005a20:	4629      	mov	r1, r5
 8005a22:	f000 f875 	bl	8005b10 <_malloc_r>
 8005a26:	4606      	mov	r6, r0
 8005a28:	b928      	cbnz	r0, 8005a36 <_calloc_r+0x1e>
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
 8005a2e:	220c      	movs	r2, #12
 8005a30:	2600      	movs	r6, #0
 8005a32:	6002      	str	r2, [r0, #0]
 8005a34:	e7f9      	b.n	8005a2a <_calloc_r+0x12>
 8005a36:	462a      	mov	r2, r5
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f7fe f93f 	bl	8003cbc <memset>
 8005a3e:	e7f4      	b.n	8005a2a <_calloc_r+0x12>

08005a40 <_free_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4605      	mov	r5, r0
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d040      	beq.n	8005aca <_free_r+0x8a>
 8005a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a4c:	1f0c      	subs	r4, r1, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bfb8      	it	lt
 8005a52:	18e4      	addlt	r4, r4, r3
 8005a54:	f000 fa98 	bl	8005f88 <__malloc_lock>
 8005a58:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <_free_r+0x8c>)
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	b933      	cbnz	r3, 8005a6c <_free_r+0x2c>
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	6014      	str	r4, [r2, #0]
 8005a62:	4628      	mov	r0, r5
 8005a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a68:	f000 ba94 	b.w	8005f94 <__malloc_unlock>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d908      	bls.n	8005a82 <_free_r+0x42>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	1821      	adds	r1, r4, r0
 8005a74:	428b      	cmp	r3, r1
 8005a76:	bf01      	itttt	eq
 8005a78:	6819      	ldreq	r1, [r3, #0]
 8005a7a:	685b      	ldreq	r3, [r3, #4]
 8005a7c:	1809      	addeq	r1, r1, r0
 8005a7e:	6021      	streq	r1, [r4, #0]
 8005a80:	e7ed      	b.n	8005a5e <_free_r+0x1e>
 8005a82:	461a      	mov	r2, r3
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b10b      	cbz	r3, 8005a8c <_free_r+0x4c>
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d9fa      	bls.n	8005a82 <_free_r+0x42>
 8005a8c:	6811      	ldr	r1, [r2, #0]
 8005a8e:	1850      	adds	r0, r2, r1
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d10b      	bne.n	8005aac <_free_r+0x6c>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	4401      	add	r1, r0
 8005a98:	1850      	adds	r0, r2, r1
 8005a9a:	4283      	cmp	r3, r0
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	d1e0      	bne.n	8005a62 <_free_r+0x22>
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4401      	add	r1, r0
 8005aa6:	6011      	str	r1, [r2, #0]
 8005aa8:	6053      	str	r3, [r2, #4]
 8005aaa:	e7da      	b.n	8005a62 <_free_r+0x22>
 8005aac:	d902      	bls.n	8005ab4 <_free_r+0x74>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	e7d6      	b.n	8005a62 <_free_r+0x22>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	1821      	adds	r1, r4, r0
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	bf01      	itttt	eq
 8005abc:	6819      	ldreq	r1, [r3, #0]
 8005abe:	685b      	ldreq	r3, [r3, #4]
 8005ac0:	1809      	addeq	r1, r1, r0
 8005ac2:	6021      	streq	r1, [r4, #0]
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	6054      	str	r4, [r2, #4]
 8005ac8:	e7cb      	b.n	8005a62 <_free_r+0x22>
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	200002a0 	.word	0x200002a0

08005ad0 <sbrk_aligned>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4e0e      	ldr	r6, [pc, #56]	; (8005b0c <sbrk_aligned+0x3c>)
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	6831      	ldr	r1, [r6, #0]
 8005ad8:	4605      	mov	r5, r0
 8005ada:	b911      	cbnz	r1, 8005ae2 <sbrk_aligned+0x12>
 8005adc:	f000 f9e8 	bl	8005eb0 <_sbrk_r>
 8005ae0:	6030      	str	r0, [r6, #0]
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 f9e3 	bl	8005eb0 <_sbrk_r>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d00a      	beq.n	8005b04 <sbrk_aligned+0x34>
 8005aee:	1cc4      	adds	r4, r0, #3
 8005af0:	f024 0403 	bic.w	r4, r4, #3
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d007      	beq.n	8005b08 <sbrk_aligned+0x38>
 8005af8:	1a21      	subs	r1, r4, r0
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f9d8 	bl	8005eb0 <_sbrk_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d101      	bne.n	8005b08 <sbrk_aligned+0x38>
 8005b04:	f04f 34ff 	mov.w	r4, #4294967295
 8005b08:	4620      	mov	r0, r4
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	200002a4 	.word	0x200002a4

08005b10 <_malloc_r>:
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b14:	1ccd      	adds	r5, r1, #3
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	4607      	mov	r7, r0
 8005b26:	db01      	blt.n	8005b2c <_malloc_r+0x1c>
 8005b28:	42a9      	cmp	r1, r5
 8005b2a:	d905      	bls.n	8005b38 <_malloc_r+0x28>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	2600      	movs	r6, #0
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4630      	mov	r0, r6
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b38:	4e2e      	ldr	r6, [pc, #184]	; (8005bf4 <_malloc_r+0xe4>)
 8005b3a:	f000 fa25 	bl	8005f88 <__malloc_lock>
 8005b3e:	6833      	ldr	r3, [r6, #0]
 8005b40:	461c      	mov	r4, r3
 8005b42:	bb34      	cbnz	r4, 8005b92 <_malloc_r+0x82>
 8005b44:	4629      	mov	r1, r5
 8005b46:	4638      	mov	r0, r7
 8005b48:	f7ff ffc2 	bl	8005ad0 <sbrk_aligned>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	4604      	mov	r4, r0
 8005b50:	d14d      	bne.n	8005bee <_malloc_r+0xde>
 8005b52:	6834      	ldr	r4, [r6, #0]
 8005b54:	4626      	mov	r6, r4
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	d140      	bne.n	8005bdc <_malloc_r+0xcc>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4638      	mov	r0, r7
 8005b60:	eb04 0803 	add.w	r8, r4, r3
 8005b64:	f000 f9a4 	bl	8005eb0 <_sbrk_r>
 8005b68:	4580      	cmp	r8, r0
 8005b6a:	d13a      	bne.n	8005be2 <_malloc_r+0xd2>
 8005b6c:	6821      	ldr	r1, [r4, #0]
 8005b6e:	3503      	adds	r5, #3
 8005b70:	1a6d      	subs	r5, r5, r1
 8005b72:	f025 0503 	bic.w	r5, r5, #3
 8005b76:	3508      	adds	r5, #8
 8005b78:	2d0c      	cmp	r5, #12
 8005b7a:	bf38      	it	cc
 8005b7c:	250c      	movcc	r5, #12
 8005b7e:	4638      	mov	r0, r7
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7ff ffa5 	bl	8005ad0 <sbrk_aligned>
 8005b86:	3001      	adds	r0, #1
 8005b88:	d02b      	beq.n	8005be2 <_malloc_r+0xd2>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	442b      	add	r3, r5
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	e00e      	b.n	8005bb0 <_malloc_r+0xa0>
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	1b52      	subs	r2, r2, r5
 8005b96:	d41e      	bmi.n	8005bd6 <_malloc_r+0xc6>
 8005b98:	2a0b      	cmp	r2, #11
 8005b9a:	d916      	bls.n	8005bca <_malloc_r+0xba>
 8005b9c:	1961      	adds	r1, r4, r5
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	6025      	str	r5, [r4, #0]
 8005ba2:	bf18      	it	ne
 8005ba4:	6059      	strne	r1, [r3, #4]
 8005ba6:	6863      	ldr	r3, [r4, #4]
 8005ba8:	bf08      	it	eq
 8005baa:	6031      	streq	r1, [r6, #0]
 8005bac:	5162      	str	r2, [r4, r5]
 8005bae:	604b      	str	r3, [r1, #4]
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f104 060b 	add.w	r6, r4, #11
 8005bb6:	f000 f9ed 	bl	8005f94 <__malloc_unlock>
 8005bba:	f026 0607 	bic.w	r6, r6, #7
 8005bbe:	1d23      	adds	r3, r4, #4
 8005bc0:	1af2      	subs	r2, r6, r3
 8005bc2:	d0b6      	beq.n	8005b32 <_malloc_r+0x22>
 8005bc4:	1b9b      	subs	r3, r3, r6
 8005bc6:	50a3      	str	r3, [r4, r2]
 8005bc8:	e7b3      	b.n	8005b32 <_malloc_r+0x22>
 8005bca:	6862      	ldr	r2, [r4, #4]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	bf0c      	ite	eq
 8005bd0:	6032      	streq	r2, [r6, #0]
 8005bd2:	605a      	strne	r2, [r3, #4]
 8005bd4:	e7ec      	b.n	8005bb0 <_malloc_r+0xa0>
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	6864      	ldr	r4, [r4, #4]
 8005bda:	e7b2      	b.n	8005b42 <_malloc_r+0x32>
 8005bdc:	4634      	mov	r4, r6
 8005bde:	6876      	ldr	r6, [r6, #4]
 8005be0:	e7b9      	b.n	8005b56 <_malloc_r+0x46>
 8005be2:	230c      	movs	r3, #12
 8005be4:	4638      	mov	r0, r7
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	f000 f9d4 	bl	8005f94 <__malloc_unlock>
 8005bec:	e7a1      	b.n	8005b32 <_malloc_r+0x22>
 8005bee:	6025      	str	r5, [r4, #0]
 8005bf0:	e7de      	b.n	8005bb0 <_malloc_r+0xa0>
 8005bf2:	bf00      	nop
 8005bf4:	200002a0 	.word	0x200002a0

08005bf8 <__ssputs_r>:
 8005bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	688e      	ldr	r6, [r1, #8]
 8005bfe:	4682      	mov	sl, r0
 8005c00:	429e      	cmp	r6, r3
 8005c02:	460c      	mov	r4, r1
 8005c04:	4690      	mov	r8, r2
 8005c06:	461f      	mov	r7, r3
 8005c08:	d838      	bhi.n	8005c7c <__ssputs_r+0x84>
 8005c0a:	898a      	ldrh	r2, [r1, #12]
 8005c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c10:	d032      	beq.n	8005c78 <__ssputs_r+0x80>
 8005c12:	6825      	ldr	r5, [r4, #0]
 8005c14:	6909      	ldr	r1, [r1, #16]
 8005c16:	3301      	adds	r3, #1
 8005c18:	eba5 0901 	sub.w	r9, r5, r1
 8005c1c:	6965      	ldr	r5, [r4, #20]
 8005c1e:	444b      	add	r3, r9
 8005c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c28:	106d      	asrs	r5, r5, #1
 8005c2a:	429d      	cmp	r5, r3
 8005c2c:	bf38      	it	cc
 8005c2e:	461d      	movcc	r5, r3
 8005c30:	0553      	lsls	r3, r2, #21
 8005c32:	d531      	bpl.n	8005c98 <__ssputs_r+0xa0>
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7ff ff6b 	bl	8005b10 <_malloc_r>
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	b950      	cbnz	r0, 8005c54 <__ssputs_r+0x5c>
 8005c3e:	230c      	movs	r3, #12
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	f8ca 3000 	str.w	r3, [sl]
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	464a      	mov	r2, r9
 8005c56:	6921      	ldr	r1, [r4, #16]
 8005c58:	f7ff fb4e 	bl	80052f8 <memcpy>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	6126      	str	r6, [r4, #16]
 8005c6a:	444e      	add	r6, r9
 8005c6c:	6026      	str	r6, [r4, #0]
 8005c6e:	463e      	mov	r6, r7
 8005c70:	6165      	str	r5, [r4, #20]
 8005c72:	eba5 0509 	sub.w	r5, r5, r9
 8005c76:	60a5      	str	r5, [r4, #8]
 8005c78:	42be      	cmp	r6, r7
 8005c7a:	d900      	bls.n	8005c7e <__ssputs_r+0x86>
 8005c7c:	463e      	mov	r6, r7
 8005c7e:	4632      	mov	r2, r6
 8005c80:	4641      	mov	r1, r8
 8005c82:	6820      	ldr	r0, [r4, #0]
 8005c84:	f000 f966 	bl	8005f54 <memmove>
 8005c88:	68a3      	ldr	r3, [r4, #8]
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	1b9b      	subs	r3, r3, r6
 8005c8e:	60a3      	str	r3, [r4, #8]
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	4433      	add	r3, r6
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	e7db      	b.n	8005c50 <__ssputs_r+0x58>
 8005c98:	462a      	mov	r2, r5
 8005c9a:	f000 f981 	bl	8005fa0 <_realloc_r>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d1e1      	bne.n	8005c68 <__ssputs_r+0x70>
 8005ca4:	4650      	mov	r0, sl
 8005ca6:	6921      	ldr	r1, [r4, #16]
 8005ca8:	f7ff feca 	bl	8005a40 <_free_r>
 8005cac:	e7c7      	b.n	8005c3e <__ssputs_r+0x46>
	...

08005cb0 <_svfiprintf_r>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	4698      	mov	r8, r3
 8005cb6:	898b      	ldrh	r3, [r1, #12]
 8005cb8:	4607      	mov	r7, r0
 8005cba:	061b      	lsls	r3, r3, #24
 8005cbc:	460d      	mov	r5, r1
 8005cbe:	4614      	mov	r4, r2
 8005cc0:	b09d      	sub	sp, #116	; 0x74
 8005cc2:	d50e      	bpl.n	8005ce2 <_svfiprintf_r+0x32>
 8005cc4:	690b      	ldr	r3, [r1, #16]
 8005cc6:	b963      	cbnz	r3, 8005ce2 <_svfiprintf_r+0x32>
 8005cc8:	2140      	movs	r1, #64	; 0x40
 8005cca:	f7ff ff21 	bl	8005b10 <_malloc_r>
 8005cce:	6028      	str	r0, [r5, #0]
 8005cd0:	6128      	str	r0, [r5, #16]
 8005cd2:	b920      	cbnz	r0, 8005cde <_svfiprintf_r+0x2e>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	e0d1      	b.n	8005e82 <_svfiprintf_r+0x1d2>
 8005cde:	2340      	movs	r3, #64	; 0x40
 8005ce0:	616b      	str	r3, [r5, #20]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce6:	2320      	movs	r3, #32
 8005ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cec:	2330      	movs	r3, #48	; 0x30
 8005cee:	f04f 0901 	mov.w	r9, #1
 8005cf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cf6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e9c <_svfiprintf_r+0x1ec>
 8005cfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cfe:	4623      	mov	r3, r4
 8005d00:	469a      	mov	sl, r3
 8005d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d06:	b10a      	cbz	r2, 8005d0c <_svfiprintf_r+0x5c>
 8005d08:	2a25      	cmp	r2, #37	; 0x25
 8005d0a:	d1f9      	bne.n	8005d00 <_svfiprintf_r+0x50>
 8005d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d10:	d00b      	beq.n	8005d2a <_svfiprintf_r+0x7a>
 8005d12:	465b      	mov	r3, fp
 8005d14:	4622      	mov	r2, r4
 8005d16:	4629      	mov	r1, r5
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7ff ff6d 	bl	8005bf8 <__ssputs_r>
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f000 80aa 	beq.w	8005e78 <_svfiprintf_r+0x1c8>
 8005d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d26:	445a      	add	r2, fp
 8005d28:	9209      	str	r2, [sp, #36]	; 0x24
 8005d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 80a2 	beq.w	8005e78 <_svfiprintf_r+0x1c8>
 8005d34:	2300      	movs	r3, #0
 8005d36:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d3e:	f10a 0a01 	add.w	sl, sl, #1
 8005d42:	9304      	str	r3, [sp, #16]
 8005d44:	9307      	str	r3, [sp, #28]
 8005d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005d4c:	4654      	mov	r4, sl
 8005d4e:	2205      	movs	r2, #5
 8005d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d54:	4851      	ldr	r0, [pc, #324]	; (8005e9c <_svfiprintf_r+0x1ec>)
 8005d56:	f7ff fac1 	bl	80052dc <memchr>
 8005d5a:	9a04      	ldr	r2, [sp, #16]
 8005d5c:	b9d8      	cbnz	r0, 8005d96 <_svfiprintf_r+0xe6>
 8005d5e:	06d0      	lsls	r0, r2, #27
 8005d60:	bf44      	itt	mi
 8005d62:	2320      	movmi	r3, #32
 8005d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d68:	0711      	lsls	r1, r2, #28
 8005d6a:	bf44      	itt	mi
 8005d6c:	232b      	movmi	r3, #43	; 0x2b
 8005d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d72:	f89a 3000 	ldrb.w	r3, [sl]
 8005d76:	2b2a      	cmp	r3, #42	; 0x2a
 8005d78:	d015      	beq.n	8005da6 <_svfiprintf_r+0xf6>
 8005d7a:	4654      	mov	r4, sl
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f04f 0c0a 	mov.w	ip, #10
 8005d82:	9a07      	ldr	r2, [sp, #28]
 8005d84:	4621      	mov	r1, r4
 8005d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d8a:	3b30      	subs	r3, #48	; 0x30
 8005d8c:	2b09      	cmp	r3, #9
 8005d8e:	d94e      	bls.n	8005e2e <_svfiprintf_r+0x17e>
 8005d90:	b1b0      	cbz	r0, 8005dc0 <_svfiprintf_r+0x110>
 8005d92:	9207      	str	r2, [sp, #28]
 8005d94:	e014      	b.n	8005dc0 <_svfiprintf_r+0x110>
 8005d96:	eba0 0308 	sub.w	r3, r0, r8
 8005d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	46a2      	mov	sl, r4
 8005da2:	9304      	str	r3, [sp, #16]
 8005da4:	e7d2      	b.n	8005d4c <_svfiprintf_r+0x9c>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	1d19      	adds	r1, r3, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	9103      	str	r1, [sp, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bfbb      	ittet	lt
 8005db2:	425b      	neglt	r3, r3
 8005db4:	f042 0202 	orrlt.w	r2, r2, #2
 8005db8:	9307      	strge	r3, [sp, #28]
 8005dba:	9307      	strlt	r3, [sp, #28]
 8005dbc:	bfb8      	it	lt
 8005dbe:	9204      	strlt	r2, [sp, #16]
 8005dc0:	7823      	ldrb	r3, [r4, #0]
 8005dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8005dc4:	d10c      	bne.n	8005de0 <_svfiprintf_r+0x130>
 8005dc6:	7863      	ldrb	r3, [r4, #1]
 8005dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dca:	d135      	bne.n	8005e38 <_svfiprintf_r+0x188>
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	3402      	adds	r4, #2
 8005dd0:	1d1a      	adds	r2, r3, #4
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	9203      	str	r2, [sp, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	bfb8      	it	lt
 8005dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dde:	9305      	str	r3, [sp, #20]
 8005de0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005ea0 <_svfiprintf_r+0x1f0>
 8005de4:	2203      	movs	r2, #3
 8005de6:	4650      	mov	r0, sl
 8005de8:	7821      	ldrb	r1, [r4, #0]
 8005dea:	f7ff fa77 	bl	80052dc <memchr>
 8005dee:	b140      	cbz	r0, 8005e02 <_svfiprintf_r+0x152>
 8005df0:	2340      	movs	r3, #64	; 0x40
 8005df2:	eba0 000a 	sub.w	r0, r0, sl
 8005df6:	fa03 f000 	lsl.w	r0, r3, r0
 8005dfa:	9b04      	ldr	r3, [sp, #16]
 8005dfc:	3401      	adds	r4, #1
 8005dfe:	4303      	orrs	r3, r0
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e06:	2206      	movs	r2, #6
 8005e08:	4826      	ldr	r0, [pc, #152]	; (8005ea4 <_svfiprintf_r+0x1f4>)
 8005e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e0e:	f7ff fa65 	bl	80052dc <memchr>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d038      	beq.n	8005e88 <_svfiprintf_r+0x1d8>
 8005e16:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <_svfiprintf_r+0x1f8>)
 8005e18:	bb1b      	cbnz	r3, 8005e62 <_svfiprintf_r+0x1b2>
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	3307      	adds	r3, #7
 8005e1e:	f023 0307 	bic.w	r3, r3, #7
 8005e22:	3308      	adds	r3, #8
 8005e24:	9303      	str	r3, [sp, #12]
 8005e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e28:	4433      	add	r3, r6
 8005e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2c:	e767      	b.n	8005cfe <_svfiprintf_r+0x4e>
 8005e2e:	460c      	mov	r4, r1
 8005e30:	2001      	movs	r0, #1
 8005e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e36:	e7a5      	b.n	8005d84 <_svfiprintf_r+0xd4>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f04f 0c0a 	mov.w	ip, #10
 8005e3e:	4619      	mov	r1, r3
 8005e40:	3401      	adds	r4, #1
 8005e42:	9305      	str	r3, [sp, #20]
 8005e44:	4620      	mov	r0, r4
 8005e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e4a:	3a30      	subs	r2, #48	; 0x30
 8005e4c:	2a09      	cmp	r2, #9
 8005e4e:	d903      	bls.n	8005e58 <_svfiprintf_r+0x1a8>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0c5      	beq.n	8005de0 <_svfiprintf_r+0x130>
 8005e54:	9105      	str	r1, [sp, #20]
 8005e56:	e7c3      	b.n	8005de0 <_svfiprintf_r+0x130>
 8005e58:	4604      	mov	r4, r0
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e60:	e7f0      	b.n	8005e44 <_svfiprintf_r+0x194>
 8005e62:	ab03      	add	r3, sp, #12
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	462a      	mov	r2, r5
 8005e68:	4638      	mov	r0, r7
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <_svfiprintf_r+0x1fc>)
 8005e6c:	a904      	add	r1, sp, #16
 8005e6e:	f7fd ffcb 	bl	8003e08 <_printf_float>
 8005e72:	1c42      	adds	r2, r0, #1
 8005e74:	4606      	mov	r6, r0
 8005e76:	d1d6      	bne.n	8005e26 <_svfiprintf_r+0x176>
 8005e78:	89ab      	ldrh	r3, [r5, #12]
 8005e7a:	065b      	lsls	r3, r3, #25
 8005e7c:	f53f af2c 	bmi.w	8005cd8 <_svfiprintf_r+0x28>
 8005e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e82:	b01d      	add	sp, #116	; 0x74
 8005e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	462a      	mov	r2, r5
 8005e8e:	4638      	mov	r0, r7
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <_svfiprintf_r+0x1fc>)
 8005e92:	a904      	add	r1, sp, #16
 8005e94:	f7fe fa54 	bl	8004340 <_printf_i>
 8005e98:	e7eb      	b.n	8005e72 <_svfiprintf_r+0x1c2>
 8005e9a:	bf00      	nop
 8005e9c:	080072f4 	.word	0x080072f4
 8005ea0:	080072fa 	.word	0x080072fa
 8005ea4:	080072fe 	.word	0x080072fe
 8005ea8:	08003e09 	.word	0x08003e09
 8005eac:	08005bf9 	.word	0x08005bf9

08005eb0 <_sbrk_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4d05      	ldr	r5, [pc, #20]	; (8005ecc <_sbrk_r+0x1c>)
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fb fde6 	bl	8001a8c <_sbrk>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_sbrk_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_sbrk_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200002a8 	.word	0x200002a8

08005ed0 <__assert_func>:
 8005ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ed2:	4614      	mov	r4, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <__assert_func+0x2c>)
 8005ed8:	4605      	mov	r5, r0
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68d8      	ldr	r0, [r3, #12]
 8005ede:	b14c      	cbz	r4, 8005ef4 <__assert_func+0x24>
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <__assert_func+0x30>)
 8005ee2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ee6:	9100      	str	r1, [sp, #0]
 8005ee8:	462b      	mov	r3, r5
 8005eea:	4906      	ldr	r1, [pc, #24]	; (8005f04 <__assert_func+0x34>)
 8005eec:	f000 f80e 	bl	8005f0c <fiprintf>
 8005ef0:	f000 faaa 	bl	8006448 <abort>
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <__assert_func+0x38>)
 8005ef6:	461c      	mov	r4, r3
 8005ef8:	e7f3      	b.n	8005ee2 <__assert_func+0x12>
 8005efa:	bf00      	nop
 8005efc:	2000000c 	.word	0x2000000c
 8005f00:	08007305 	.word	0x08007305
 8005f04:	08007312 	.word	0x08007312
 8005f08:	08007340 	.word	0x08007340

08005f0c <fiprintf>:
 8005f0c:	b40e      	push	{r1, r2, r3}
 8005f0e:	b503      	push	{r0, r1, lr}
 8005f10:	4601      	mov	r1, r0
 8005f12:	ab03      	add	r3, sp, #12
 8005f14:	4805      	ldr	r0, [pc, #20]	; (8005f2c <fiprintf+0x20>)
 8005f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	9301      	str	r3, [sp, #4]
 8005f1e:	f000 f895 	bl	800604c <_vfiprintf_r>
 8005f22:	b002      	add	sp, #8
 8005f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f28:	b003      	add	sp, #12
 8005f2a:	4770      	bx	lr
 8005f2c:	2000000c 	.word	0x2000000c

08005f30 <__ascii_mbtowc>:
 8005f30:	b082      	sub	sp, #8
 8005f32:	b901      	cbnz	r1, 8005f36 <__ascii_mbtowc+0x6>
 8005f34:	a901      	add	r1, sp, #4
 8005f36:	b142      	cbz	r2, 8005f4a <__ascii_mbtowc+0x1a>
 8005f38:	b14b      	cbz	r3, 8005f4e <__ascii_mbtowc+0x1e>
 8005f3a:	7813      	ldrb	r3, [r2, #0]
 8005f3c:	600b      	str	r3, [r1, #0]
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	1e10      	subs	r0, r2, #0
 8005f42:	bf18      	it	ne
 8005f44:	2001      	movne	r0, #1
 8005f46:	b002      	add	sp, #8
 8005f48:	4770      	bx	lr
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	e7fb      	b.n	8005f46 <__ascii_mbtowc+0x16>
 8005f4e:	f06f 0001 	mvn.w	r0, #1
 8005f52:	e7f8      	b.n	8005f46 <__ascii_mbtowc+0x16>

08005f54 <memmove>:
 8005f54:	4288      	cmp	r0, r1
 8005f56:	b510      	push	{r4, lr}
 8005f58:	eb01 0402 	add.w	r4, r1, r2
 8005f5c:	d902      	bls.n	8005f64 <memmove+0x10>
 8005f5e:	4284      	cmp	r4, r0
 8005f60:	4623      	mov	r3, r4
 8005f62:	d807      	bhi.n	8005f74 <memmove+0x20>
 8005f64:	1e43      	subs	r3, r0, #1
 8005f66:	42a1      	cmp	r1, r4
 8005f68:	d008      	beq.n	8005f7c <memmove+0x28>
 8005f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f72:	e7f8      	b.n	8005f66 <memmove+0x12>
 8005f74:	4601      	mov	r1, r0
 8005f76:	4402      	add	r2, r0
 8005f78:	428a      	cmp	r2, r1
 8005f7a:	d100      	bne.n	8005f7e <memmove+0x2a>
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f86:	e7f7      	b.n	8005f78 <memmove+0x24>

08005f88 <__malloc_lock>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__malloc_lock+0x8>)
 8005f8a:	f000 bc19 	b.w	80067c0 <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	200002ac 	.word	0x200002ac

08005f94 <__malloc_unlock>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__malloc_unlock+0x8>)
 8005f96:	f000 bc14 	b.w	80067c2 <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	200002ac 	.word	0x200002ac

08005fa0 <_realloc_r>:
 8005fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	460e      	mov	r6, r1
 8005faa:	b921      	cbnz	r1, 8005fb6 <_realloc_r+0x16>
 8005fac:	4611      	mov	r1, r2
 8005fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb2:	f7ff bdad 	b.w	8005b10 <_malloc_r>
 8005fb6:	b92a      	cbnz	r2, 8005fc4 <_realloc_r+0x24>
 8005fb8:	f7ff fd42 	bl	8005a40 <_free_r>
 8005fbc:	4625      	mov	r5, r4
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc4:	f000 fc64 	bl	8006890 <_malloc_usable_size_r>
 8005fc8:	4284      	cmp	r4, r0
 8005fca:	4607      	mov	r7, r0
 8005fcc:	d802      	bhi.n	8005fd4 <_realloc_r+0x34>
 8005fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fd2:	d812      	bhi.n	8005ffa <_realloc_r+0x5a>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	f7ff fd9a 	bl	8005b10 <_malloc_r>
 8005fdc:	4605      	mov	r5, r0
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d0ed      	beq.n	8005fbe <_realloc_r+0x1e>
 8005fe2:	42bc      	cmp	r4, r7
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	bf28      	it	cs
 8005fea:	463a      	movcs	r2, r7
 8005fec:	f7ff f984 	bl	80052f8 <memcpy>
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	f7ff fd24 	bl	8005a40 <_free_r>
 8005ff8:	e7e1      	b.n	8005fbe <_realloc_r+0x1e>
 8005ffa:	4635      	mov	r5, r6
 8005ffc:	e7df      	b.n	8005fbe <_realloc_r+0x1e>

08005ffe <__sfputc_r>:
 8005ffe:	6893      	ldr	r3, [r2, #8]
 8006000:	b410      	push	{r4}
 8006002:	3b01      	subs	r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	6093      	str	r3, [r2, #8]
 8006008:	da07      	bge.n	800601a <__sfputc_r+0x1c>
 800600a:	6994      	ldr	r4, [r2, #24]
 800600c:	42a3      	cmp	r3, r4
 800600e:	db01      	blt.n	8006014 <__sfputc_r+0x16>
 8006010:	290a      	cmp	r1, #10
 8006012:	d102      	bne.n	800601a <__sfputc_r+0x1c>
 8006014:	bc10      	pop	{r4}
 8006016:	f000 b949 	b.w	80062ac <__swbuf_r>
 800601a:	6813      	ldr	r3, [r2, #0]
 800601c:	1c58      	adds	r0, r3, #1
 800601e:	6010      	str	r0, [r2, #0]
 8006020:	7019      	strb	r1, [r3, #0]
 8006022:	4608      	mov	r0, r1
 8006024:	bc10      	pop	{r4}
 8006026:	4770      	bx	lr

08006028 <__sfputs_r>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	4606      	mov	r6, r0
 800602c:	460f      	mov	r7, r1
 800602e:	4614      	mov	r4, r2
 8006030:	18d5      	adds	r5, r2, r3
 8006032:	42ac      	cmp	r4, r5
 8006034:	d101      	bne.n	800603a <__sfputs_r+0x12>
 8006036:	2000      	movs	r0, #0
 8006038:	e007      	b.n	800604a <__sfputs_r+0x22>
 800603a:	463a      	mov	r2, r7
 800603c:	4630      	mov	r0, r6
 800603e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006042:	f7ff ffdc 	bl	8005ffe <__sfputc_r>
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d1f3      	bne.n	8006032 <__sfputs_r+0xa>
 800604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800604c <_vfiprintf_r>:
 800604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006050:	460d      	mov	r5, r1
 8006052:	4614      	mov	r4, r2
 8006054:	4698      	mov	r8, r3
 8006056:	4606      	mov	r6, r0
 8006058:	b09d      	sub	sp, #116	; 0x74
 800605a:	b118      	cbz	r0, 8006064 <_vfiprintf_r+0x18>
 800605c:	6983      	ldr	r3, [r0, #24]
 800605e:	b90b      	cbnz	r3, 8006064 <_vfiprintf_r+0x18>
 8006060:	f000 fb10 	bl	8006684 <__sinit>
 8006064:	4b89      	ldr	r3, [pc, #548]	; (800628c <_vfiprintf_r+0x240>)
 8006066:	429d      	cmp	r5, r3
 8006068:	d11b      	bne.n	80060a2 <_vfiprintf_r+0x56>
 800606a:	6875      	ldr	r5, [r6, #4]
 800606c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800606e:	07d9      	lsls	r1, r3, #31
 8006070:	d405      	bmi.n	800607e <_vfiprintf_r+0x32>
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	059a      	lsls	r2, r3, #22
 8006076:	d402      	bmi.n	800607e <_vfiprintf_r+0x32>
 8006078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800607a:	f000 fba1 	bl	80067c0 <__retarget_lock_acquire_recursive>
 800607e:	89ab      	ldrh	r3, [r5, #12]
 8006080:	071b      	lsls	r3, r3, #28
 8006082:	d501      	bpl.n	8006088 <_vfiprintf_r+0x3c>
 8006084:	692b      	ldr	r3, [r5, #16]
 8006086:	b9eb      	cbnz	r3, 80060c4 <_vfiprintf_r+0x78>
 8006088:	4629      	mov	r1, r5
 800608a:	4630      	mov	r0, r6
 800608c:	f000 f96e 	bl	800636c <__swsetup_r>
 8006090:	b1c0      	cbz	r0, 80060c4 <_vfiprintf_r+0x78>
 8006092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006094:	07dc      	lsls	r4, r3, #31
 8006096:	d50e      	bpl.n	80060b6 <_vfiprintf_r+0x6a>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	b01d      	add	sp, #116	; 0x74
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	4b7b      	ldr	r3, [pc, #492]	; (8006290 <_vfiprintf_r+0x244>)
 80060a4:	429d      	cmp	r5, r3
 80060a6:	d101      	bne.n	80060ac <_vfiprintf_r+0x60>
 80060a8:	68b5      	ldr	r5, [r6, #8]
 80060aa:	e7df      	b.n	800606c <_vfiprintf_r+0x20>
 80060ac:	4b79      	ldr	r3, [pc, #484]	; (8006294 <_vfiprintf_r+0x248>)
 80060ae:	429d      	cmp	r5, r3
 80060b0:	bf08      	it	eq
 80060b2:	68f5      	ldreq	r5, [r6, #12]
 80060b4:	e7da      	b.n	800606c <_vfiprintf_r+0x20>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	0598      	lsls	r0, r3, #22
 80060ba:	d4ed      	bmi.n	8006098 <_vfiprintf_r+0x4c>
 80060bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060be:	f000 fb80 	bl	80067c2 <__retarget_lock_release_recursive>
 80060c2:	e7e9      	b.n	8006098 <_vfiprintf_r+0x4c>
 80060c4:	2300      	movs	r3, #0
 80060c6:	9309      	str	r3, [sp, #36]	; 0x24
 80060c8:	2320      	movs	r3, #32
 80060ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ce:	2330      	movs	r3, #48	; 0x30
 80060d0:	f04f 0901 	mov.w	r9, #1
 80060d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006298 <_vfiprintf_r+0x24c>
 80060dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060e0:	4623      	mov	r3, r4
 80060e2:	469a      	mov	sl, r3
 80060e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e8:	b10a      	cbz	r2, 80060ee <_vfiprintf_r+0xa2>
 80060ea:	2a25      	cmp	r2, #37	; 0x25
 80060ec:	d1f9      	bne.n	80060e2 <_vfiprintf_r+0x96>
 80060ee:	ebba 0b04 	subs.w	fp, sl, r4
 80060f2:	d00b      	beq.n	800610c <_vfiprintf_r+0xc0>
 80060f4:	465b      	mov	r3, fp
 80060f6:	4622      	mov	r2, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	4630      	mov	r0, r6
 80060fc:	f7ff ff94 	bl	8006028 <__sfputs_r>
 8006100:	3001      	adds	r0, #1
 8006102:	f000 80aa 	beq.w	800625a <_vfiprintf_r+0x20e>
 8006106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006108:	445a      	add	r2, fp
 800610a:	9209      	str	r2, [sp, #36]	; 0x24
 800610c:	f89a 3000 	ldrb.w	r3, [sl]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a2 	beq.w	800625a <_vfiprintf_r+0x20e>
 8006116:	2300      	movs	r3, #0
 8006118:	f04f 32ff 	mov.w	r2, #4294967295
 800611c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006120:	f10a 0a01 	add.w	sl, sl, #1
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800612c:	931a      	str	r3, [sp, #104]	; 0x68
 800612e:	4654      	mov	r4, sl
 8006130:	2205      	movs	r2, #5
 8006132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006136:	4858      	ldr	r0, [pc, #352]	; (8006298 <_vfiprintf_r+0x24c>)
 8006138:	f7ff f8d0 	bl	80052dc <memchr>
 800613c:	9a04      	ldr	r2, [sp, #16]
 800613e:	b9d8      	cbnz	r0, 8006178 <_vfiprintf_r+0x12c>
 8006140:	06d1      	lsls	r1, r2, #27
 8006142:	bf44      	itt	mi
 8006144:	2320      	movmi	r3, #32
 8006146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800614a:	0713      	lsls	r3, r2, #28
 800614c:	bf44      	itt	mi
 800614e:	232b      	movmi	r3, #43	; 0x2b
 8006150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006154:	f89a 3000 	ldrb.w	r3, [sl]
 8006158:	2b2a      	cmp	r3, #42	; 0x2a
 800615a:	d015      	beq.n	8006188 <_vfiprintf_r+0x13c>
 800615c:	4654      	mov	r4, sl
 800615e:	2000      	movs	r0, #0
 8006160:	f04f 0c0a 	mov.w	ip, #10
 8006164:	9a07      	ldr	r2, [sp, #28]
 8006166:	4621      	mov	r1, r4
 8006168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800616c:	3b30      	subs	r3, #48	; 0x30
 800616e:	2b09      	cmp	r3, #9
 8006170:	d94e      	bls.n	8006210 <_vfiprintf_r+0x1c4>
 8006172:	b1b0      	cbz	r0, 80061a2 <_vfiprintf_r+0x156>
 8006174:	9207      	str	r2, [sp, #28]
 8006176:	e014      	b.n	80061a2 <_vfiprintf_r+0x156>
 8006178:	eba0 0308 	sub.w	r3, r0, r8
 800617c:	fa09 f303 	lsl.w	r3, r9, r3
 8006180:	4313      	orrs	r3, r2
 8006182:	46a2      	mov	sl, r4
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	e7d2      	b.n	800612e <_vfiprintf_r+0xe2>
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	1d19      	adds	r1, r3, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	9103      	str	r1, [sp, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	bfbb      	ittet	lt
 8006194:	425b      	neglt	r3, r3
 8006196:	f042 0202 	orrlt.w	r2, r2, #2
 800619a:	9307      	strge	r3, [sp, #28]
 800619c:	9307      	strlt	r3, [sp, #28]
 800619e:	bfb8      	it	lt
 80061a0:	9204      	strlt	r2, [sp, #16]
 80061a2:	7823      	ldrb	r3, [r4, #0]
 80061a4:	2b2e      	cmp	r3, #46	; 0x2e
 80061a6:	d10c      	bne.n	80061c2 <_vfiprintf_r+0x176>
 80061a8:	7863      	ldrb	r3, [r4, #1]
 80061aa:	2b2a      	cmp	r3, #42	; 0x2a
 80061ac:	d135      	bne.n	800621a <_vfiprintf_r+0x1ce>
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	3402      	adds	r4, #2
 80061b2:	1d1a      	adds	r2, r3, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	9203      	str	r2, [sp, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	bfb8      	it	lt
 80061bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80061c0:	9305      	str	r3, [sp, #20]
 80061c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800629c <_vfiprintf_r+0x250>
 80061c6:	2203      	movs	r2, #3
 80061c8:	4650      	mov	r0, sl
 80061ca:	7821      	ldrb	r1, [r4, #0]
 80061cc:	f7ff f886 	bl	80052dc <memchr>
 80061d0:	b140      	cbz	r0, 80061e4 <_vfiprintf_r+0x198>
 80061d2:	2340      	movs	r3, #64	; 0x40
 80061d4:	eba0 000a 	sub.w	r0, r0, sl
 80061d8:	fa03 f000 	lsl.w	r0, r3, r0
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	3401      	adds	r4, #1
 80061e0:	4303      	orrs	r3, r0
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e8:	2206      	movs	r2, #6
 80061ea:	482d      	ldr	r0, [pc, #180]	; (80062a0 <_vfiprintf_r+0x254>)
 80061ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061f0:	f7ff f874 	bl	80052dc <memchr>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d03f      	beq.n	8006278 <_vfiprintf_r+0x22c>
 80061f8:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <_vfiprintf_r+0x258>)
 80061fa:	bb1b      	cbnz	r3, 8006244 <_vfiprintf_r+0x1f8>
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	3307      	adds	r3, #7
 8006200:	f023 0307 	bic.w	r3, r3, #7
 8006204:	3308      	adds	r3, #8
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	443b      	add	r3, r7
 800620c:	9309      	str	r3, [sp, #36]	; 0x24
 800620e:	e767      	b.n	80060e0 <_vfiprintf_r+0x94>
 8006210:	460c      	mov	r4, r1
 8006212:	2001      	movs	r0, #1
 8006214:	fb0c 3202 	mla	r2, ip, r2, r3
 8006218:	e7a5      	b.n	8006166 <_vfiprintf_r+0x11a>
 800621a:	2300      	movs	r3, #0
 800621c:	f04f 0c0a 	mov.w	ip, #10
 8006220:	4619      	mov	r1, r3
 8006222:	3401      	adds	r4, #1
 8006224:	9305      	str	r3, [sp, #20]
 8006226:	4620      	mov	r0, r4
 8006228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800622c:	3a30      	subs	r2, #48	; 0x30
 800622e:	2a09      	cmp	r2, #9
 8006230:	d903      	bls.n	800623a <_vfiprintf_r+0x1ee>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0c5      	beq.n	80061c2 <_vfiprintf_r+0x176>
 8006236:	9105      	str	r1, [sp, #20]
 8006238:	e7c3      	b.n	80061c2 <_vfiprintf_r+0x176>
 800623a:	4604      	mov	r4, r0
 800623c:	2301      	movs	r3, #1
 800623e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006242:	e7f0      	b.n	8006226 <_vfiprintf_r+0x1da>
 8006244:	ab03      	add	r3, sp, #12
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	462a      	mov	r2, r5
 800624a:	4630      	mov	r0, r6
 800624c:	4b16      	ldr	r3, [pc, #88]	; (80062a8 <_vfiprintf_r+0x25c>)
 800624e:	a904      	add	r1, sp, #16
 8006250:	f7fd fdda 	bl	8003e08 <_printf_float>
 8006254:	4607      	mov	r7, r0
 8006256:	1c78      	adds	r0, r7, #1
 8006258:	d1d6      	bne.n	8006208 <_vfiprintf_r+0x1bc>
 800625a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800625c:	07d9      	lsls	r1, r3, #31
 800625e:	d405      	bmi.n	800626c <_vfiprintf_r+0x220>
 8006260:	89ab      	ldrh	r3, [r5, #12]
 8006262:	059a      	lsls	r2, r3, #22
 8006264:	d402      	bmi.n	800626c <_vfiprintf_r+0x220>
 8006266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006268:	f000 faab 	bl	80067c2 <__retarget_lock_release_recursive>
 800626c:	89ab      	ldrh	r3, [r5, #12]
 800626e:	065b      	lsls	r3, r3, #25
 8006270:	f53f af12 	bmi.w	8006098 <_vfiprintf_r+0x4c>
 8006274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006276:	e711      	b.n	800609c <_vfiprintf_r+0x50>
 8006278:	ab03      	add	r3, sp, #12
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	462a      	mov	r2, r5
 800627e:	4630      	mov	r0, r6
 8006280:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <_vfiprintf_r+0x25c>)
 8006282:	a904      	add	r1, sp, #16
 8006284:	f7fe f85c 	bl	8004340 <_printf_i>
 8006288:	e7e4      	b.n	8006254 <_vfiprintf_r+0x208>
 800628a:	bf00      	nop
 800628c:	0800746c 	.word	0x0800746c
 8006290:	0800748c 	.word	0x0800748c
 8006294:	0800744c 	.word	0x0800744c
 8006298:	080072f4 	.word	0x080072f4
 800629c:	080072fa 	.word	0x080072fa
 80062a0:	080072fe 	.word	0x080072fe
 80062a4:	08003e09 	.word	0x08003e09
 80062a8:	08006029 	.word	0x08006029

080062ac <__swbuf_r>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	460e      	mov	r6, r1
 80062b0:	4614      	mov	r4, r2
 80062b2:	4605      	mov	r5, r0
 80062b4:	b118      	cbz	r0, 80062be <__swbuf_r+0x12>
 80062b6:	6983      	ldr	r3, [r0, #24]
 80062b8:	b90b      	cbnz	r3, 80062be <__swbuf_r+0x12>
 80062ba:	f000 f9e3 	bl	8006684 <__sinit>
 80062be:	4b21      	ldr	r3, [pc, #132]	; (8006344 <__swbuf_r+0x98>)
 80062c0:	429c      	cmp	r4, r3
 80062c2:	d12b      	bne.n	800631c <__swbuf_r+0x70>
 80062c4:	686c      	ldr	r4, [r5, #4]
 80062c6:	69a3      	ldr	r3, [r4, #24]
 80062c8:	60a3      	str	r3, [r4, #8]
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	071a      	lsls	r2, r3, #28
 80062ce:	d52f      	bpl.n	8006330 <__swbuf_r+0x84>
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	b36b      	cbz	r3, 8006330 <__swbuf_r+0x84>
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	6820      	ldr	r0, [r4, #0]
 80062d8:	b2f6      	uxtb	r6, r6
 80062da:	1ac0      	subs	r0, r0, r3
 80062dc:	6963      	ldr	r3, [r4, #20]
 80062de:	4637      	mov	r7, r6
 80062e0:	4283      	cmp	r3, r0
 80062e2:	dc04      	bgt.n	80062ee <__swbuf_r+0x42>
 80062e4:	4621      	mov	r1, r4
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 f938 	bl	800655c <_fflush_r>
 80062ec:	bb30      	cbnz	r0, 800633c <__swbuf_r+0x90>
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	3001      	adds	r0, #1
 80062f2:	3b01      	subs	r3, #1
 80062f4:	60a3      	str	r3, [r4, #8]
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	701e      	strb	r6, [r3, #0]
 80062fe:	6963      	ldr	r3, [r4, #20]
 8006300:	4283      	cmp	r3, r0
 8006302:	d004      	beq.n	800630e <__swbuf_r+0x62>
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	07db      	lsls	r3, r3, #31
 8006308:	d506      	bpl.n	8006318 <__swbuf_r+0x6c>
 800630a:	2e0a      	cmp	r6, #10
 800630c:	d104      	bne.n	8006318 <__swbuf_r+0x6c>
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 f923 	bl	800655c <_fflush_r>
 8006316:	b988      	cbnz	r0, 800633c <__swbuf_r+0x90>
 8006318:	4638      	mov	r0, r7
 800631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <__swbuf_r+0x9c>)
 800631e:	429c      	cmp	r4, r3
 8006320:	d101      	bne.n	8006326 <__swbuf_r+0x7a>
 8006322:	68ac      	ldr	r4, [r5, #8]
 8006324:	e7cf      	b.n	80062c6 <__swbuf_r+0x1a>
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <__swbuf_r+0xa0>)
 8006328:	429c      	cmp	r4, r3
 800632a:	bf08      	it	eq
 800632c:	68ec      	ldreq	r4, [r5, #12]
 800632e:	e7ca      	b.n	80062c6 <__swbuf_r+0x1a>
 8006330:	4621      	mov	r1, r4
 8006332:	4628      	mov	r0, r5
 8006334:	f000 f81a 	bl	800636c <__swsetup_r>
 8006338:	2800      	cmp	r0, #0
 800633a:	d0cb      	beq.n	80062d4 <__swbuf_r+0x28>
 800633c:	f04f 37ff 	mov.w	r7, #4294967295
 8006340:	e7ea      	b.n	8006318 <__swbuf_r+0x6c>
 8006342:	bf00      	nop
 8006344:	0800746c 	.word	0x0800746c
 8006348:	0800748c 	.word	0x0800748c
 800634c:	0800744c 	.word	0x0800744c

08006350 <__ascii_wctomb>:
 8006350:	4603      	mov	r3, r0
 8006352:	4608      	mov	r0, r1
 8006354:	b141      	cbz	r1, 8006368 <__ascii_wctomb+0x18>
 8006356:	2aff      	cmp	r2, #255	; 0xff
 8006358:	d904      	bls.n	8006364 <__ascii_wctomb+0x14>
 800635a:	228a      	movs	r2, #138	; 0x8a
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	4770      	bx	lr
 8006364:	2001      	movs	r0, #1
 8006366:	700a      	strb	r2, [r1, #0]
 8006368:	4770      	bx	lr
	...

0800636c <__swsetup_r>:
 800636c:	4b32      	ldr	r3, [pc, #200]	; (8006438 <__swsetup_r+0xcc>)
 800636e:	b570      	push	{r4, r5, r6, lr}
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	4606      	mov	r6, r0
 8006374:	460c      	mov	r4, r1
 8006376:	b125      	cbz	r5, 8006382 <__swsetup_r+0x16>
 8006378:	69ab      	ldr	r3, [r5, #24]
 800637a:	b913      	cbnz	r3, 8006382 <__swsetup_r+0x16>
 800637c:	4628      	mov	r0, r5
 800637e:	f000 f981 	bl	8006684 <__sinit>
 8006382:	4b2e      	ldr	r3, [pc, #184]	; (800643c <__swsetup_r+0xd0>)
 8006384:	429c      	cmp	r4, r3
 8006386:	d10f      	bne.n	80063a8 <__swsetup_r+0x3c>
 8006388:	686c      	ldr	r4, [r5, #4]
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006390:	0719      	lsls	r1, r3, #28
 8006392:	d42c      	bmi.n	80063ee <__swsetup_r+0x82>
 8006394:	06dd      	lsls	r5, r3, #27
 8006396:	d411      	bmi.n	80063bc <__swsetup_r+0x50>
 8006398:	2309      	movs	r3, #9
 800639a:	6033      	str	r3, [r6, #0]
 800639c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	e03e      	b.n	8006426 <__swsetup_r+0xba>
 80063a8:	4b25      	ldr	r3, [pc, #148]	; (8006440 <__swsetup_r+0xd4>)
 80063aa:	429c      	cmp	r4, r3
 80063ac:	d101      	bne.n	80063b2 <__swsetup_r+0x46>
 80063ae:	68ac      	ldr	r4, [r5, #8]
 80063b0:	e7eb      	b.n	800638a <__swsetup_r+0x1e>
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <__swsetup_r+0xd8>)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	bf08      	it	eq
 80063b8:	68ec      	ldreq	r4, [r5, #12]
 80063ba:	e7e6      	b.n	800638a <__swsetup_r+0x1e>
 80063bc:	0758      	lsls	r0, r3, #29
 80063be:	d512      	bpl.n	80063e6 <__swsetup_r+0x7a>
 80063c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063c2:	b141      	cbz	r1, 80063d6 <__swsetup_r+0x6a>
 80063c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063c8:	4299      	cmp	r1, r3
 80063ca:	d002      	beq.n	80063d2 <__swsetup_r+0x66>
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7ff fb37 	bl	8005a40 <_free_r>
 80063d2:	2300      	movs	r3, #0
 80063d4:	6363      	str	r3, [r4, #52]	; 0x34
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	2300      	movs	r3, #0
 80063e0:	6063      	str	r3, [r4, #4]
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	f043 0308 	orr.w	r3, r3, #8
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	b94b      	cbnz	r3, 8006406 <__swsetup_r+0x9a>
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fc:	d003      	beq.n	8006406 <__swsetup_r+0x9a>
 80063fe:	4621      	mov	r1, r4
 8006400:	4630      	mov	r0, r6
 8006402:	f000 fa05 	bl	8006810 <__smakebuf_r>
 8006406:	89a0      	ldrh	r0, [r4, #12]
 8006408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800640c:	f010 0301 	ands.w	r3, r0, #1
 8006410:	d00a      	beq.n	8006428 <__swsetup_r+0xbc>
 8006412:	2300      	movs	r3, #0
 8006414:	60a3      	str	r3, [r4, #8]
 8006416:	6963      	ldr	r3, [r4, #20]
 8006418:	425b      	negs	r3, r3
 800641a:	61a3      	str	r3, [r4, #24]
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	b943      	cbnz	r3, 8006432 <__swsetup_r+0xc6>
 8006420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006424:	d1ba      	bne.n	800639c <__swsetup_r+0x30>
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	0781      	lsls	r1, r0, #30
 800642a:	bf58      	it	pl
 800642c:	6963      	ldrpl	r3, [r4, #20]
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	e7f4      	b.n	800641c <__swsetup_r+0xb0>
 8006432:	2000      	movs	r0, #0
 8006434:	e7f7      	b.n	8006426 <__swsetup_r+0xba>
 8006436:	bf00      	nop
 8006438:	2000000c 	.word	0x2000000c
 800643c:	0800746c 	.word	0x0800746c
 8006440:	0800748c 	.word	0x0800748c
 8006444:	0800744c 	.word	0x0800744c

08006448 <abort>:
 8006448:	2006      	movs	r0, #6
 800644a:	b508      	push	{r3, lr}
 800644c:	f000 fa50 	bl	80068f0 <raise>
 8006450:	2001      	movs	r0, #1
 8006452:	f7fb faa7 	bl	80019a4 <_exit>
	...

08006458 <__sflush_r>:
 8006458:	898a      	ldrh	r2, [r1, #12]
 800645a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645c:	4605      	mov	r5, r0
 800645e:	0710      	lsls	r0, r2, #28
 8006460:	460c      	mov	r4, r1
 8006462:	d457      	bmi.n	8006514 <__sflush_r+0xbc>
 8006464:	684b      	ldr	r3, [r1, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	dc04      	bgt.n	8006474 <__sflush_r+0x1c>
 800646a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	dc01      	bgt.n	8006474 <__sflush_r+0x1c>
 8006470:	2000      	movs	r0, #0
 8006472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006476:	2e00      	cmp	r6, #0
 8006478:	d0fa      	beq.n	8006470 <__sflush_r+0x18>
 800647a:	2300      	movs	r3, #0
 800647c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006480:	682f      	ldr	r7, [r5, #0]
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	d032      	beq.n	80064ec <__sflush_r+0x94>
 8006486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	075a      	lsls	r2, r3, #29
 800648c:	d505      	bpl.n	800649a <__sflush_r+0x42>
 800648e:	6863      	ldr	r3, [r4, #4]
 8006490:	1ac0      	subs	r0, r0, r3
 8006492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006494:	b10b      	cbz	r3, 800649a <__sflush_r+0x42>
 8006496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006498:	1ac0      	subs	r0, r0, r3
 800649a:	2300      	movs	r3, #0
 800649c:	4602      	mov	r2, r0
 800649e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a0:	4628      	mov	r0, r5
 80064a2:	6a21      	ldr	r1, [r4, #32]
 80064a4:	47b0      	blx	r6
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	d106      	bne.n	80064ba <__sflush_r+0x62>
 80064ac:	6829      	ldr	r1, [r5, #0]
 80064ae:	291d      	cmp	r1, #29
 80064b0:	d82c      	bhi.n	800650c <__sflush_r+0xb4>
 80064b2:	4a29      	ldr	r2, [pc, #164]	; (8006558 <__sflush_r+0x100>)
 80064b4:	40ca      	lsrs	r2, r1
 80064b6:	07d6      	lsls	r6, r2, #31
 80064b8:	d528      	bpl.n	800650c <__sflush_r+0xb4>
 80064ba:	2200      	movs	r2, #0
 80064bc:	6062      	str	r2, [r4, #4]
 80064be:	6922      	ldr	r2, [r4, #16]
 80064c0:	04d9      	lsls	r1, r3, #19
 80064c2:	6022      	str	r2, [r4, #0]
 80064c4:	d504      	bpl.n	80064d0 <__sflush_r+0x78>
 80064c6:	1c42      	adds	r2, r0, #1
 80064c8:	d101      	bne.n	80064ce <__sflush_r+0x76>
 80064ca:	682b      	ldr	r3, [r5, #0]
 80064cc:	b903      	cbnz	r3, 80064d0 <__sflush_r+0x78>
 80064ce:	6560      	str	r0, [r4, #84]	; 0x54
 80064d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064d2:	602f      	str	r7, [r5, #0]
 80064d4:	2900      	cmp	r1, #0
 80064d6:	d0cb      	beq.n	8006470 <__sflush_r+0x18>
 80064d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064dc:	4299      	cmp	r1, r3
 80064de:	d002      	beq.n	80064e6 <__sflush_r+0x8e>
 80064e0:	4628      	mov	r0, r5
 80064e2:	f7ff faad 	bl	8005a40 <_free_r>
 80064e6:	2000      	movs	r0, #0
 80064e8:	6360      	str	r0, [r4, #52]	; 0x34
 80064ea:	e7c2      	b.n	8006472 <__sflush_r+0x1a>
 80064ec:	6a21      	ldr	r1, [r4, #32]
 80064ee:	2301      	movs	r3, #1
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b0      	blx	r6
 80064f4:	1c41      	adds	r1, r0, #1
 80064f6:	d1c7      	bne.n	8006488 <__sflush_r+0x30>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0c4      	beq.n	8006488 <__sflush_r+0x30>
 80064fe:	2b1d      	cmp	r3, #29
 8006500:	d001      	beq.n	8006506 <__sflush_r+0xae>
 8006502:	2b16      	cmp	r3, #22
 8006504:	d101      	bne.n	800650a <__sflush_r+0xb2>
 8006506:	602f      	str	r7, [r5, #0]
 8006508:	e7b2      	b.n	8006470 <__sflush_r+0x18>
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006510:	81a3      	strh	r3, [r4, #12]
 8006512:	e7ae      	b.n	8006472 <__sflush_r+0x1a>
 8006514:	690f      	ldr	r7, [r1, #16]
 8006516:	2f00      	cmp	r7, #0
 8006518:	d0aa      	beq.n	8006470 <__sflush_r+0x18>
 800651a:	0793      	lsls	r3, r2, #30
 800651c:	bf18      	it	ne
 800651e:	2300      	movne	r3, #0
 8006520:	680e      	ldr	r6, [r1, #0]
 8006522:	bf08      	it	eq
 8006524:	694b      	ldreq	r3, [r1, #20]
 8006526:	1bf6      	subs	r6, r6, r7
 8006528:	600f      	str	r7, [r1, #0]
 800652a:	608b      	str	r3, [r1, #8]
 800652c:	2e00      	cmp	r6, #0
 800652e:	dd9f      	ble.n	8006470 <__sflush_r+0x18>
 8006530:	4633      	mov	r3, r6
 8006532:	463a      	mov	r2, r7
 8006534:	4628      	mov	r0, r5
 8006536:	6a21      	ldr	r1, [r4, #32]
 8006538:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800653c:	47e0      	blx	ip
 800653e:	2800      	cmp	r0, #0
 8006540:	dc06      	bgt.n	8006550 <__sflush_r+0xf8>
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	e790      	b.n	8006472 <__sflush_r+0x1a>
 8006550:	4407      	add	r7, r0
 8006552:	1a36      	subs	r6, r6, r0
 8006554:	e7ea      	b.n	800652c <__sflush_r+0xd4>
 8006556:	bf00      	nop
 8006558:	20400001 	.word	0x20400001

0800655c <_fflush_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	690b      	ldr	r3, [r1, #16]
 8006560:	4605      	mov	r5, r0
 8006562:	460c      	mov	r4, r1
 8006564:	b913      	cbnz	r3, 800656c <_fflush_r+0x10>
 8006566:	2500      	movs	r5, #0
 8006568:	4628      	mov	r0, r5
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	b118      	cbz	r0, 8006576 <_fflush_r+0x1a>
 800656e:	6983      	ldr	r3, [r0, #24]
 8006570:	b90b      	cbnz	r3, 8006576 <_fflush_r+0x1a>
 8006572:	f000 f887 	bl	8006684 <__sinit>
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <_fflush_r+0x6c>)
 8006578:	429c      	cmp	r4, r3
 800657a:	d11b      	bne.n	80065b4 <_fflush_r+0x58>
 800657c:	686c      	ldr	r4, [r5, #4]
 800657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0ef      	beq.n	8006566 <_fflush_r+0xa>
 8006586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006588:	07d0      	lsls	r0, r2, #31
 800658a:	d404      	bmi.n	8006596 <_fflush_r+0x3a>
 800658c:	0599      	lsls	r1, r3, #22
 800658e:	d402      	bmi.n	8006596 <_fflush_r+0x3a>
 8006590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006592:	f000 f915 	bl	80067c0 <__retarget_lock_acquire_recursive>
 8006596:	4628      	mov	r0, r5
 8006598:	4621      	mov	r1, r4
 800659a:	f7ff ff5d 	bl	8006458 <__sflush_r>
 800659e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a0:	4605      	mov	r5, r0
 80065a2:	07da      	lsls	r2, r3, #31
 80065a4:	d4e0      	bmi.n	8006568 <_fflush_r+0xc>
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	059b      	lsls	r3, r3, #22
 80065aa:	d4dd      	bmi.n	8006568 <_fflush_r+0xc>
 80065ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ae:	f000 f908 	bl	80067c2 <__retarget_lock_release_recursive>
 80065b2:	e7d9      	b.n	8006568 <_fflush_r+0xc>
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <_fflush_r+0x70>)
 80065b6:	429c      	cmp	r4, r3
 80065b8:	d101      	bne.n	80065be <_fflush_r+0x62>
 80065ba:	68ac      	ldr	r4, [r5, #8]
 80065bc:	e7df      	b.n	800657e <_fflush_r+0x22>
 80065be:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <_fflush_r+0x74>)
 80065c0:	429c      	cmp	r4, r3
 80065c2:	bf08      	it	eq
 80065c4:	68ec      	ldreq	r4, [r5, #12]
 80065c6:	e7da      	b.n	800657e <_fflush_r+0x22>
 80065c8:	0800746c 	.word	0x0800746c
 80065cc:	0800748c 	.word	0x0800748c
 80065d0:	0800744c 	.word	0x0800744c

080065d4 <std>:
 80065d4:	2300      	movs	r3, #0
 80065d6:	b510      	push	{r4, lr}
 80065d8:	4604      	mov	r4, r0
 80065da:	e9c0 3300 	strd	r3, r3, [r0]
 80065de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065e2:	6083      	str	r3, [r0, #8]
 80065e4:	8181      	strh	r1, [r0, #12]
 80065e6:	6643      	str	r3, [r0, #100]	; 0x64
 80065e8:	81c2      	strh	r2, [r0, #14]
 80065ea:	6183      	str	r3, [r0, #24]
 80065ec:	4619      	mov	r1, r3
 80065ee:	2208      	movs	r2, #8
 80065f0:	305c      	adds	r0, #92	; 0x5c
 80065f2:	f7fd fb63 	bl	8003cbc <memset>
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <std+0x38>)
 80065f8:	6224      	str	r4, [r4, #32]
 80065fa:	6263      	str	r3, [r4, #36]	; 0x24
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <std+0x3c>)
 80065fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8006600:	4b04      	ldr	r3, [pc, #16]	; (8006614 <std+0x40>)
 8006602:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <std+0x44>)
 8006606:	6323      	str	r3, [r4, #48]	; 0x30
 8006608:	bd10      	pop	{r4, pc}
 800660a:	bf00      	nop
 800660c:	08006929 	.word	0x08006929
 8006610:	0800694b 	.word	0x0800694b
 8006614:	08006983 	.word	0x08006983
 8006618:	080069a7 	.word	0x080069a7

0800661c <_cleanup_r>:
 800661c:	4901      	ldr	r1, [pc, #4]	; (8006624 <_cleanup_r+0x8>)
 800661e:	f000 b8af 	b.w	8006780 <_fwalk_reent>
 8006622:	bf00      	nop
 8006624:	0800655d 	.word	0x0800655d

08006628 <__sfmoreglue>:
 8006628:	2268      	movs	r2, #104	; 0x68
 800662a:	b570      	push	{r4, r5, r6, lr}
 800662c:	1e4d      	subs	r5, r1, #1
 800662e:	4355      	muls	r5, r2
 8006630:	460e      	mov	r6, r1
 8006632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006636:	f7ff fa6b 	bl	8005b10 <_malloc_r>
 800663a:	4604      	mov	r4, r0
 800663c:	b140      	cbz	r0, 8006650 <__sfmoreglue+0x28>
 800663e:	2100      	movs	r1, #0
 8006640:	e9c0 1600 	strd	r1, r6, [r0]
 8006644:	300c      	adds	r0, #12
 8006646:	60a0      	str	r0, [r4, #8]
 8006648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800664c:	f7fd fb36 	bl	8003cbc <memset>
 8006650:	4620      	mov	r0, r4
 8006652:	bd70      	pop	{r4, r5, r6, pc}

08006654 <__sfp_lock_acquire>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__sfp_lock_acquire+0x8>)
 8006656:	f000 b8b3 	b.w	80067c0 <__retarget_lock_acquire_recursive>
 800665a:	bf00      	nop
 800665c:	200002ad 	.word	0x200002ad

08006660 <__sfp_lock_release>:
 8006660:	4801      	ldr	r0, [pc, #4]	; (8006668 <__sfp_lock_release+0x8>)
 8006662:	f000 b8ae 	b.w	80067c2 <__retarget_lock_release_recursive>
 8006666:	bf00      	nop
 8006668:	200002ad 	.word	0x200002ad

0800666c <__sinit_lock_acquire>:
 800666c:	4801      	ldr	r0, [pc, #4]	; (8006674 <__sinit_lock_acquire+0x8>)
 800666e:	f000 b8a7 	b.w	80067c0 <__retarget_lock_acquire_recursive>
 8006672:	bf00      	nop
 8006674:	200002ae 	.word	0x200002ae

08006678 <__sinit_lock_release>:
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__sinit_lock_release+0x8>)
 800667a:	f000 b8a2 	b.w	80067c2 <__retarget_lock_release_recursive>
 800667e:	bf00      	nop
 8006680:	200002ae 	.word	0x200002ae

08006684 <__sinit>:
 8006684:	b510      	push	{r4, lr}
 8006686:	4604      	mov	r4, r0
 8006688:	f7ff fff0 	bl	800666c <__sinit_lock_acquire>
 800668c:	69a3      	ldr	r3, [r4, #24]
 800668e:	b11b      	cbz	r3, 8006698 <__sinit+0x14>
 8006690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006694:	f7ff bff0 	b.w	8006678 <__sinit_lock_release>
 8006698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800669c:	6523      	str	r3, [r4, #80]	; 0x50
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <__sinit+0x68>)
 80066a0:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <__sinit+0x6c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	bf08      	it	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	4620      	mov	r0, r4
 80066ae:	bf08      	it	eq
 80066b0:	61a3      	streq	r3, [r4, #24]
 80066b2:	f000 f81f 	bl	80066f4 <__sfp>
 80066b6:	6060      	str	r0, [r4, #4]
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f81b 	bl	80066f4 <__sfp>
 80066be:	60a0      	str	r0, [r4, #8]
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 f817 	bl	80066f4 <__sfp>
 80066c6:	2200      	movs	r2, #0
 80066c8:	2104      	movs	r1, #4
 80066ca:	60e0      	str	r0, [r4, #12]
 80066cc:	6860      	ldr	r0, [r4, #4]
 80066ce:	f7ff ff81 	bl	80065d4 <std>
 80066d2:	2201      	movs	r2, #1
 80066d4:	2109      	movs	r1, #9
 80066d6:	68a0      	ldr	r0, [r4, #8]
 80066d8:	f7ff ff7c 	bl	80065d4 <std>
 80066dc:	2202      	movs	r2, #2
 80066de:	2112      	movs	r1, #18
 80066e0:	68e0      	ldr	r0, [r4, #12]
 80066e2:	f7ff ff77 	bl	80065d4 <std>
 80066e6:	2301      	movs	r3, #1
 80066e8:	61a3      	str	r3, [r4, #24]
 80066ea:	e7d1      	b.n	8006690 <__sinit+0xc>
 80066ec:	080070d4 	.word	0x080070d4
 80066f0:	0800661d 	.word	0x0800661d

080066f4 <__sfp>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	4607      	mov	r7, r0
 80066f8:	f7ff ffac 	bl	8006654 <__sfp_lock_acquire>
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <__sfp+0x84>)
 80066fe:	681e      	ldr	r6, [r3, #0]
 8006700:	69b3      	ldr	r3, [r6, #24]
 8006702:	b913      	cbnz	r3, 800670a <__sfp+0x16>
 8006704:	4630      	mov	r0, r6
 8006706:	f7ff ffbd 	bl	8006684 <__sinit>
 800670a:	3648      	adds	r6, #72	; 0x48
 800670c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006710:	3b01      	subs	r3, #1
 8006712:	d503      	bpl.n	800671c <__sfp+0x28>
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	b30b      	cbz	r3, 800675c <__sfp+0x68>
 8006718:	6836      	ldr	r6, [r6, #0]
 800671a:	e7f7      	b.n	800670c <__sfp+0x18>
 800671c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006720:	b9d5      	cbnz	r5, 8006758 <__sfp+0x64>
 8006722:	4b16      	ldr	r3, [pc, #88]	; (800677c <__sfp+0x88>)
 8006724:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006728:	60e3      	str	r3, [r4, #12]
 800672a:	6665      	str	r5, [r4, #100]	; 0x64
 800672c:	f000 f847 	bl	80067be <__retarget_lock_init_recursive>
 8006730:	f7ff ff96 	bl	8006660 <__sfp_lock_release>
 8006734:	2208      	movs	r2, #8
 8006736:	4629      	mov	r1, r5
 8006738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800673c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006740:	6025      	str	r5, [r4, #0]
 8006742:	61a5      	str	r5, [r4, #24]
 8006744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006748:	f7fd fab8 	bl	8003cbc <memset>
 800674c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006754:	4620      	mov	r0, r4
 8006756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006758:	3468      	adds	r4, #104	; 0x68
 800675a:	e7d9      	b.n	8006710 <__sfp+0x1c>
 800675c:	2104      	movs	r1, #4
 800675e:	4638      	mov	r0, r7
 8006760:	f7ff ff62 	bl	8006628 <__sfmoreglue>
 8006764:	4604      	mov	r4, r0
 8006766:	6030      	str	r0, [r6, #0]
 8006768:	2800      	cmp	r0, #0
 800676a:	d1d5      	bne.n	8006718 <__sfp+0x24>
 800676c:	f7ff ff78 	bl	8006660 <__sfp_lock_release>
 8006770:	230c      	movs	r3, #12
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	e7ee      	b.n	8006754 <__sfp+0x60>
 8006776:	bf00      	nop
 8006778:	080070d4 	.word	0x080070d4
 800677c:	ffff0001 	.word	0xffff0001

08006780 <_fwalk_reent>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	4606      	mov	r6, r0
 8006786:	4688      	mov	r8, r1
 8006788:	2700      	movs	r7, #0
 800678a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800678e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006792:	f1b9 0901 	subs.w	r9, r9, #1
 8006796:	d505      	bpl.n	80067a4 <_fwalk_reent+0x24>
 8006798:	6824      	ldr	r4, [r4, #0]
 800679a:	2c00      	cmp	r4, #0
 800679c:	d1f7      	bne.n	800678e <_fwalk_reent+0xe>
 800679e:	4638      	mov	r0, r7
 80067a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a4:	89ab      	ldrh	r3, [r5, #12]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d907      	bls.n	80067ba <_fwalk_reent+0x3a>
 80067aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ae:	3301      	adds	r3, #1
 80067b0:	d003      	beq.n	80067ba <_fwalk_reent+0x3a>
 80067b2:	4629      	mov	r1, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	47c0      	blx	r8
 80067b8:	4307      	orrs	r7, r0
 80067ba:	3568      	adds	r5, #104	; 0x68
 80067bc:	e7e9      	b.n	8006792 <_fwalk_reent+0x12>

080067be <__retarget_lock_init_recursive>:
 80067be:	4770      	bx	lr

080067c0 <__retarget_lock_acquire_recursive>:
 80067c0:	4770      	bx	lr

080067c2 <__retarget_lock_release_recursive>:
 80067c2:	4770      	bx	lr

080067c4 <__swhatbuf_r>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	460e      	mov	r6, r1
 80067c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067cc:	4614      	mov	r4, r2
 80067ce:	2900      	cmp	r1, #0
 80067d0:	461d      	mov	r5, r3
 80067d2:	b096      	sub	sp, #88	; 0x58
 80067d4:	da08      	bge.n	80067e8 <__swhatbuf_r+0x24>
 80067d6:	2200      	movs	r2, #0
 80067d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	061a      	lsls	r2, r3, #24
 80067e0:	d410      	bmi.n	8006804 <__swhatbuf_r+0x40>
 80067e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e6:	e00e      	b.n	8006806 <__swhatbuf_r+0x42>
 80067e8:	466a      	mov	r2, sp
 80067ea:	f000 f903 	bl	80069f4 <_fstat_r>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	dbf1      	blt.n	80067d6 <__swhatbuf_r+0x12>
 80067f2:	9a01      	ldr	r2, [sp, #4]
 80067f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067fc:	425a      	negs	r2, r3
 80067fe:	415a      	adcs	r2, r3
 8006800:	602a      	str	r2, [r5, #0]
 8006802:	e7ee      	b.n	80067e2 <__swhatbuf_r+0x1e>
 8006804:	2340      	movs	r3, #64	; 0x40
 8006806:	2000      	movs	r0, #0
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	b016      	add	sp, #88	; 0x58
 800680c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006810 <__smakebuf_r>:
 8006810:	898b      	ldrh	r3, [r1, #12]
 8006812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006814:	079d      	lsls	r5, r3, #30
 8006816:	4606      	mov	r6, r0
 8006818:	460c      	mov	r4, r1
 800681a:	d507      	bpl.n	800682c <__smakebuf_r+0x1c>
 800681c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	6123      	str	r3, [r4, #16]
 8006824:	2301      	movs	r3, #1
 8006826:	6163      	str	r3, [r4, #20]
 8006828:	b002      	add	sp, #8
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	466a      	mov	r2, sp
 800682e:	ab01      	add	r3, sp, #4
 8006830:	f7ff ffc8 	bl	80067c4 <__swhatbuf_r>
 8006834:	9900      	ldr	r1, [sp, #0]
 8006836:	4605      	mov	r5, r0
 8006838:	4630      	mov	r0, r6
 800683a:	f7ff f969 	bl	8005b10 <_malloc_r>
 800683e:	b948      	cbnz	r0, 8006854 <__smakebuf_r+0x44>
 8006840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006844:	059a      	lsls	r2, r3, #22
 8006846:	d4ef      	bmi.n	8006828 <__smakebuf_r+0x18>
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	f043 0302 	orr.w	r3, r3, #2
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	e7e3      	b.n	800681c <__smakebuf_r+0xc>
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <__smakebuf_r+0x7c>)
 8006856:	62b3      	str	r3, [r6, #40]	; 0x28
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	6020      	str	r0, [r4, #0]
 800685c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	9b00      	ldr	r3, [sp, #0]
 8006864:	6120      	str	r0, [r4, #16]
 8006866:	6163      	str	r3, [r4, #20]
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	b15b      	cbz	r3, 8006884 <__smakebuf_r+0x74>
 800686c:	4630      	mov	r0, r6
 800686e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006872:	f000 f8d1 	bl	8006a18 <_isatty_r>
 8006876:	b128      	cbz	r0, 8006884 <__smakebuf_r+0x74>
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	81a3      	strh	r3, [r4, #12]
 8006884:	89a0      	ldrh	r0, [r4, #12]
 8006886:	4305      	orrs	r5, r0
 8006888:	81a5      	strh	r5, [r4, #12]
 800688a:	e7cd      	b.n	8006828 <__smakebuf_r+0x18>
 800688c:	0800661d 	.word	0x0800661d

08006890 <_malloc_usable_size_r>:
 8006890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006894:	1f18      	subs	r0, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfbc      	itt	lt
 800689a:	580b      	ldrlt	r3, [r1, r0]
 800689c:	18c0      	addlt	r0, r0, r3
 800689e:	4770      	bx	lr

080068a0 <_raise_r>:
 80068a0:	291f      	cmp	r1, #31
 80068a2:	b538      	push	{r3, r4, r5, lr}
 80068a4:	4604      	mov	r4, r0
 80068a6:	460d      	mov	r5, r1
 80068a8:	d904      	bls.n	80068b4 <_raise_r+0x14>
 80068aa:	2316      	movs	r3, #22
 80068ac:	6003      	str	r3, [r0, #0]
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068b6:	b112      	cbz	r2, 80068be <_raise_r+0x1e>
 80068b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068bc:	b94b      	cbnz	r3, 80068d2 <_raise_r+0x32>
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 f830 	bl	8006924 <_getpid_r>
 80068c4:	462a      	mov	r2, r5
 80068c6:	4601      	mov	r1, r0
 80068c8:	4620      	mov	r0, r4
 80068ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ce:	f000 b817 	b.w	8006900 <_kill_r>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d00a      	beq.n	80068ec <_raise_r+0x4c>
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	d103      	bne.n	80068e2 <_raise_r+0x42>
 80068da:	2316      	movs	r3, #22
 80068dc:	6003      	str	r3, [r0, #0]
 80068de:	2001      	movs	r0, #1
 80068e0:	e7e7      	b.n	80068b2 <_raise_r+0x12>
 80068e2:	2400      	movs	r4, #0
 80068e4:	4628      	mov	r0, r5
 80068e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068ea:	4798      	blx	r3
 80068ec:	2000      	movs	r0, #0
 80068ee:	e7e0      	b.n	80068b2 <_raise_r+0x12>

080068f0 <raise>:
 80068f0:	4b02      	ldr	r3, [pc, #8]	; (80068fc <raise+0xc>)
 80068f2:	4601      	mov	r1, r0
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	f7ff bfd3 	b.w	80068a0 <_raise_r>
 80068fa:	bf00      	nop
 80068fc:	2000000c 	.word	0x2000000c

08006900 <_kill_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	2300      	movs	r3, #0
 8006904:	4d06      	ldr	r5, [pc, #24]	; (8006920 <_kill_r+0x20>)
 8006906:	4604      	mov	r4, r0
 8006908:	4608      	mov	r0, r1
 800690a:	4611      	mov	r1, r2
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	f7fb f839 	bl	8001984 <_kill>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d102      	bne.n	800691c <_kill_r+0x1c>
 8006916:	682b      	ldr	r3, [r5, #0]
 8006918:	b103      	cbz	r3, 800691c <_kill_r+0x1c>
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	200002a8 	.word	0x200002a8

08006924 <_getpid_r>:
 8006924:	f7fb b827 	b.w	8001976 <_getpid>

08006928 <__sread>:
 8006928:	b510      	push	{r4, lr}
 800692a:	460c      	mov	r4, r1
 800692c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006930:	f000 f894 	bl	8006a5c <_read_r>
 8006934:	2800      	cmp	r0, #0
 8006936:	bfab      	itete	ge
 8006938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800693a:	89a3      	ldrhlt	r3, [r4, #12]
 800693c:	181b      	addge	r3, r3, r0
 800693e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006942:	bfac      	ite	ge
 8006944:	6563      	strge	r3, [r4, #84]	; 0x54
 8006946:	81a3      	strhlt	r3, [r4, #12]
 8006948:	bd10      	pop	{r4, pc}

0800694a <__swrite>:
 800694a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	461f      	mov	r7, r3
 8006950:	898b      	ldrh	r3, [r1, #12]
 8006952:	4605      	mov	r5, r0
 8006954:	05db      	lsls	r3, r3, #23
 8006956:	460c      	mov	r4, r1
 8006958:	4616      	mov	r6, r2
 800695a:	d505      	bpl.n	8006968 <__swrite+0x1e>
 800695c:	2302      	movs	r3, #2
 800695e:	2200      	movs	r2, #0
 8006960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006964:	f000 f868 	bl	8006a38 <_lseek_r>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	4632      	mov	r2, r6
 800696c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	4628      	mov	r0, r5
 8006974:	463b      	mov	r3, r7
 8006976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800697a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800697e:	f000 b817 	b.w	80069b0 <_write_r>

08006982 <__sseek>:
 8006982:	b510      	push	{r4, lr}
 8006984:	460c      	mov	r4, r1
 8006986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698a:	f000 f855 	bl	8006a38 <_lseek_r>
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	bf15      	itete	ne
 8006994:	6560      	strne	r0, [r4, #84]	; 0x54
 8006996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800699a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800699e:	81a3      	strheq	r3, [r4, #12]
 80069a0:	bf18      	it	ne
 80069a2:	81a3      	strhne	r3, [r4, #12]
 80069a4:	bd10      	pop	{r4, pc}

080069a6 <__sclose>:
 80069a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069aa:	f000 b813 	b.w	80069d4 <_close_r>
	...

080069b0 <_write_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	4604      	mov	r4, r0
 80069b4:	4608      	mov	r0, r1
 80069b6:	4611      	mov	r1, r2
 80069b8:	2200      	movs	r2, #0
 80069ba:	4d05      	ldr	r5, [pc, #20]	; (80069d0 <_write_r+0x20>)
 80069bc:	602a      	str	r2, [r5, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	f7fb f817 	bl	80019f2 <_write>
 80069c4:	1c43      	adds	r3, r0, #1
 80069c6:	d102      	bne.n	80069ce <_write_r+0x1e>
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	b103      	cbz	r3, 80069ce <_write_r+0x1e>
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	200002a8 	.word	0x200002a8

080069d4 <_close_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	2300      	movs	r3, #0
 80069d8:	4d05      	ldr	r5, [pc, #20]	; (80069f0 <_close_r+0x1c>)
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fb f823 	bl	8001a2a <_close>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_close_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_close_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	200002a8 	.word	0x200002a8

080069f4 <_fstat_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	2300      	movs	r3, #0
 80069f8:	4d06      	ldr	r5, [pc, #24]	; (8006a14 <_fstat_r+0x20>)
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	4611      	mov	r1, r2
 8006a00:	602b      	str	r3, [r5, #0]
 8006a02:	f7fb f81d 	bl	8001a40 <_fstat>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d102      	bne.n	8006a10 <_fstat_r+0x1c>
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	b103      	cbz	r3, 8006a10 <_fstat_r+0x1c>
 8006a0e:	6023      	str	r3, [r4, #0]
 8006a10:	bd38      	pop	{r3, r4, r5, pc}
 8006a12:	bf00      	nop
 8006a14:	200002a8 	.word	0x200002a8

08006a18 <_isatty_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	4d05      	ldr	r5, [pc, #20]	; (8006a34 <_isatty_r+0x1c>)
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4608      	mov	r0, r1
 8006a22:	602b      	str	r3, [r5, #0]
 8006a24:	f7fb f81b 	bl	8001a5e <_isatty>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d102      	bne.n	8006a32 <_isatty_r+0x1a>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b103      	cbz	r3, 8006a32 <_isatty_r+0x1a>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	200002a8 	.word	0x200002a8

08006a38 <_lseek_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	4611      	mov	r1, r2
 8006a40:	2200      	movs	r2, #0
 8006a42:	4d05      	ldr	r5, [pc, #20]	; (8006a58 <_lseek_r+0x20>)
 8006a44:	602a      	str	r2, [r5, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f7fb f813 	bl	8001a72 <_lseek>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d102      	bne.n	8006a56 <_lseek_r+0x1e>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	b103      	cbz	r3, 8006a56 <_lseek_r+0x1e>
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	200002a8 	.word	0x200002a8

08006a5c <_read_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	4611      	mov	r1, r2
 8006a64:	2200      	movs	r2, #0
 8006a66:	4d05      	ldr	r5, [pc, #20]	; (8006a7c <_read_r+0x20>)
 8006a68:	602a      	str	r2, [r5, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f7fa ffa4 	bl	80019b8 <_read>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_read_r+0x1e>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_read_r+0x1e>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	200002a8 	.word	0x200002a8

08006a80 <_init>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr

08006a8c <_fini>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr
